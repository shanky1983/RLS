 
/****** Object:  StoredProcedure [dbo].[PgetinvestigationvaluesreportcommonMicroresult]    Script Date: 2/3/2021 8:03:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[PgetinvestigationvaluesreportcommonMicroresult] (  
    --live   
    @pVisitID BIGINT,   
    @OrgID INT,   
    @TemplateID INT,   
    @InvestigationID VARCHAR(max)  
  ) --WITH recompile                 
  AS BEGIN   
SET   
  nocount ON DECLARE @LRowID INT DECLARE @LInvestigationId BIGINT DECLARE @LInvestigationName VARCHAR(100) 
  DECLARE @LResult VARCHAR(500) DECLARE @MinRno INT = 1,   
  @MaxRno INT DECLARE @MinRno1 INT,   
  @MaxRno1 INT DECLARE @MinRNo2 INT,   
  @MaxRNo2 INT 
   DECLARE @refVisitids Table(ReferVisitID BIGINT,ReforgID BigINT)                                       
  Insert into @refVisitids(ReferVisitID,ReforgID)                      
  Select distinct PV2.PatientVisitId,pv2.OrgID from PatientVisit PV2 with(nolock)                                      
  inner join PatientVisit PV1 (Nolock) on PV2.ReferVisitID = pv1.PatientVisitId                                      
  inner join TrustedOrgDetails TOD (Nolock) on TOD.SharingOrgID = PV2.OrgID                                      
  WHERE PV1.PatientVisitId=@pVisitID and TOD.LoggedOrgID = @OrgID     
    
  
  DECLARE @tblInvestigationValues TABLE (  
    [investigationvalueid] [BIGINT],   
    [name] [VARCHAR](600) NULL,   
    [value] [NVARCHAR](max) NULL,   
    [investigationid] [BIGINT] NULL,   
    [groupid] [INT] NULL,   
    [patientvisitid] [BIGINT] NULL,   
    [uomid] [INT] NULL,   
    [status] [VARCHAR](100) NULL,   
    [createdby] [BIGINT] NULL,   
    [createdat] [DATETIME] NULL,   
    [modifiedby] [BIGINT] NULL,   
    [modifiedat] [DATETIME] NULL,   
    [uomcode] [VARCHAR](50) NULL,   
    [groupname] [VARCHAR](255) NULL,   
    [orgid] [INT] NULL,   
    [ipinvsamplecollectionmasterid] [BIGINT] NULL,   
    [packageid] [INT] NULL,   
    [packagename] [VARCHAR](255),   
    [sequenceno] [INT],   
    [uid] [VARCHAR](255),   
    [newvalue] [NVARCHAR](20) NULL,   
    [convvalue] [VARCHAR](50) NULL,   
    convuomcode [VARCHAR](50) NULL  
  ) DECLARE @tblPatientInvestigation TABLE (  
    [patientvisitid] [BIGINT],   
    [investigationid] [BIGINT],   
    [investigationname] [VARCHAR](250),   
    [createdby] [BIGINT],   
    [createdat] [DATETIME],   
    [modifiedby] [BIGINT],   
    [modifiedat] [DATETIME],   
    [investigationmethodid] [BIGINT],   
    [investigationsamplecontainerid] [INT],   
    [sampleid] [INT],   
    [investigationsiteid] [INT],   
    [iscompleted] [CHAR](1),   
    [collecteddatetime] [DATETIME],   
    [status] [VARCHAR](100),   
    [complaintid] [INT],   
    [groupid] [INT],   
    [groupname] [VARCHAR](255),   
    [reason] [VARCHAR](250),   
    [reportstatus] [VARCHAR](500),   
    [referencerange] [VARCHAR](max),   
    [methodname] [VARCHAR](255),   
    [ipinvsamplecollectionmasterid] [BIGINT],   
    [orgid] [INT],   
    [worklistdeletedstatus] [VARCHAR](50),   
    [performingphysicainname] [VARCHAR](500),   
    [kitid] [BIGINT],   
    [kitname] [VARCHAR](255),   
    [instrumentid] [BIGINT],   
    [instrumentname] [VARCHAR](255),   
    [interpretation] [VARCHAR](max),   
    [principleid] [BIGINT],   
    [principlename] [VARCHAR](255),   
    [qcdata] [VARCHAR](max),   
    [packageid] [INT],   
    [packagename] [VARCHAR](255),   
    [approvedby] [BIGINT],   
    [patientinvid] [BIGINT],   
    [orderedat] [DATETIME],   
    [uid] [VARCHAR](255),   
    [groupcomment] [VARCHAR](255),   
    [approvedat] [DATETIME],   
    [accessionnumber] [BIGINT],   
    [isabnormal] [VARCHAR](80),   
    [medicalremarks] [NVARCHAR](max),   
    [groupmedicalremarks] [VARCHAR](255),   
    refsuffixtext VARCHAR(100),   
    [isnonreportable] [CHAR](1),   
    [authorizedby] [BIGINT],   
    [secondauthorizedby] [BIGINT],   
    [convreferencerange] [NVARCHAR](max),   
    [printablerange] [VARCHAR](max),   
    [coauthorizedby] [BIGINT]  
  ) DECLARE @tblRecheckTestDetails TABLE (  
    [patientvisitid] [BIGINT],   
    [investigationid] [BIGINT],   
    [investigationname] [VARCHAR](250),   
    oldaccessionnumber BIGINT,   
    [olduid] [VARCHAR](255),   
    [orgid] [INT],   
    newaccessionnumber BIGINT,   
    [newuid] [VARCHAR](255),   
    groupid INT,   
    packageid INT,   
    [oldvalues] [NVARCHAR](max) NULL,   
    [newvalue] [NVARCHAR](max) NULL,   
    [oldconvvalues] [VARCHAR](50) NULL,   
    [newconvvalue] [VARCHAR](50) NULL  
  ) DECLARE @tblRetestDetails TABLE (  
    [patientvisitid] [BIGINT],   
    [investigationid] [BIGINT],   
    [investigationname] [VARCHAR](250),   
    oldaccessionnumber BIGINT,   
    [olduid] [VARCHAR](255),   
    [orgid] [INT],   
    newaccessionnumber BIGINT,   
    [newuid] [VARCHAR](255),   
    groupid INT,   
    packageid INT,   
    [oldvalues] [NVARCHAR](max) NULL,   
    [newvalue] [NVARCHAR](max) NULL,   
    [oldconvvalues] [VARCHAR](50) NULL,   
    [newconvvalue] [VARCHAR](50) NULL  
  ) DECLARE @tblOrdPerfOrgGrpInvDtls TABLE (  
    orderedorgid INT,   
    performedorgid INT,   
    attunegroupid INT,   
    invtype VARCHAR(10),   
    performedorggroupid INT,   
    performedorguid VARCHAR(255),   
    orderedorggroupid INT,   
    orderedorguid VARCHAR(255)  
  ) DECLARE @tblAffectedVisits TABLE (visitid BIGINT, orgid BIGINT) DECLARE @OrderedPatientInv TABLE (  
    [patientvisitid] [BIGINT],   
    [investigationid] [BIGINT],   
    [investigationname] [VARCHAR](250),   
    [investigationmethodid] [BIGINT],   
    [investigationsamplecontainerid] [INT],   
    [sampleid] [INT],   
    [groupid] BIGINT,   
    [groupname] [VARCHAR](250),   
    [reason] [VARCHAR](250),   
    [referencerange] [VARCHAR](max),   
    [methodname] [VARCHAR](255),   
    [orgid] [INT],   
    [worklistdeletedstatus] [VARCHAR](50),   
    [performingphysicainname] [VARCHAR](500),   
    [kitid] [BIGINT],   
    [kitname] [VARCHAR](255),   
    [instrumentid] [BIGINT],   
    [instrumentname] [VARCHAR](255),   
    [interpretation] [VARCHAR](max),   
    [principleid] [BIGINT],   
    [principlename] [VARCHAR](255),   
    [qcdata] [VARCHAR](max),   
    [packageid] [INT],   
    [packagename] [VARCHAR](255),   
    [approvedby] [BIGINT],   
    [patientinvid] [BIGINT],   
    [uid] [VARCHAR](255),   
    [groupcomment] [VARCHAR](255),   
    [approvedat] [DATETIME],   
    [accessionnumber] [BIGINT],   
    refrangesuffixtest VARCHAR(255),   
    [authorizedby] [BIGINT],   
    convreferencerange [NVARCHAR](max),   
    printablerange VARCHAR(max),   
    [isabnormal] [VARCHAR](80)  
  ) DECLARE @tblResultSelectID TABLE (accessionno BIGINT) INSERT INTO @tblResultSelectID (accessionno)   
SELECT   
  DISTINCT item   
FROM   
  Fnsplit(@InvestigationID, ',')  
   
   --- A-B-C Report Update ---                  
    INSERT INTO @tblResultSelectID    
  SELECT AccessionNumber      
 FROM @tblResultSelectID tbl      
 INNER JOIN OrderedInvestigations OI ON tbl.AccessionNo = OI.ReferredAccessionNo      
      --- A-B-C Report Update ---  
   
  INSERT INTO @OrderedPatientInv            
SELECT   
  [patientvisitid],   
  investigationid,   
  [investigationname],   
  [investigationmethodid],   
  [investigationsamplecontainerid],   
  [sampleid],   
  [groupid],   
  [groupname],   
  [reason],   
  [referencerange],   
  [methodname],   
  orgid,   
  [worklistdeletedstatus],   
  [performingphysicainname],   
  [kitid],   
  [kitname],   
  [instrumentid],   
  [instrumentname],   
  [interpretation],   
  [principleid],   
  [principlename],   
  [qcdata],   
  [packageid],   
  [packagename],   
  [approvedby],   
  [patientinvid],   
  uid,   
  [groupcomment],   
  [approvedat],   
  accessionnumber,   
  groupmedicalremarks,   
  authorizedby,   
  convreferencerange,   
  printablerange,   
  [isabnormal]   
FROM   
  patientinvestigation(nolock)   
WHERE   
  accessionnumber IN (  
    SELECT   
      accessionnumber   
    FROM   
      orderedinvestigations OI WITH (nolock)   
      INNER JOIN @tblResultSelectID tbl ON tbl.accessionno = OI.referredaccessionno  
  )
  DECLARE @tblResultSelectUID TABLE (  
    uid VARCHAR(255)  
  ) INSERT INTO @tblResultSelectUID (uid)   
SELECT   
  DISTINCT OI.uid   
FROM   
  orderedinvestigations OI WITH (nolock)   
  INNER JOIN @tblResultSelectID trs ON OI.accessionnumber = trs.accessionno   
WHERE   
  OI.visitid = @pVisitID   
  AND OI.orgid = @OrgID 
  
   DECLARE @Orderedtb Table (VisitID BigInt,AttGroupID int,OrgID int,AccessionNumber BigInt,Name varchar(255),Type Varchar(20),ReferredAccessionNo BigInt)                                                            
 --IF (@refOrgid > 0)      
 IF EXISTS(select 1 from @refVisitids where ReferVisitID is not null)                        
 BEGIN                          
INSERT INTO @OrderedPatientInv                                                                                                
SELECT [PatientVisitID]    
 ,InvestigationID    
 ,[InvestigationName]    
 ,[InvestigationMethodID]    
 ,[InvestigationSampleContainerID]    
 ,[SampleID]    
 ,[GroupID]    
 ,[GroupName]    
 ,[Reason]    
 ,[ReferenceRange]    
 ,[MethodName]    
 ,OrgID    
 ,[WorklistDeletedStatus]    
 ,[PerformingPhysicainName]    
 ,[KitID]    
 ,[KitName]    
 ,[InstrumentID]    
 ,[InstrumentName]    
 ,[Interpretation]    
 ,[PrincipleID]    
 ,[PrincipleName]    
 ,[QCData]    
 ,[PackageID]    
 ,[PackageName]    
 ,[ApprovedBy]    
 ,[PatientInvID]    
 ,UID    
 ,[GroupComment]    
 ,[ApprovedAt]    
 ,AccessionNumber    
 ,GroupMedicalRemarks    
 ,AuthorizedBy    
 ,ConvReferenceRange    
 ,PrintableRange    
 ,[IsAbnormal]    
  FROM PatientInvestigation PI with(nolock)                               
 Inner join  @refVisitids refv on refv.ReferVisitID=PI.PatientVisitID and refv.ReforgID=PI.OrgID                                                                                         
 WHERE AccessionNumber in                                               
(                                                                                                
 SELECT AccessionNumber  FROM OrderedInvestigations OI  with(nolock)                                 
 INNER JOIN @tblResultSelectID tbl ON tbl.AccessionNo  = OI.ReferredAccessionNo -- and OI.OrgID = @refOrgid and OI.VisitID = @refVisitid                               
 Inner join @refVisitids ref on ref.ReferVisitID=OI.VisitID and ref.ReforgID=OI.OrgID                                                          
)                                                             
Insert Into @Orderedtb                                                           
Select VisitID,ID,OrgID,OI.AccessionNumber,OI.Name,OI.Type,OI.ReferredAccessionNo from OrderedInvestigations OI with(nolock)                                                                                             
INNER JOIN @tblResultSelectID tbl ON tbl.AccessionNo=OI.ReferredAccessionNo And Type='GRP' --and OI.OrgID = @refOrgid and OI.VisitID = @refVisitid                                                      
Inner join @refVisitids ref on ref.ReferVisitID=OI.VisitID and ref.ReforgID=OI.OrgID      
    
END    
    
Insert Into @Orderedtb                                                            
Select VisitID,ID,OrgID,OI.AccessionNumber,OI.Name,OI.Type,Oi.ReferredAccessionNo from OrderedInvestigations OI   with(nolock)                                                                 
INNER JOIN @tblResultSelectID tbl ON tbl.AccessionNo=OI.AccessionNumber  And Type='GRP'  ---and OI.OrgID = @refOrgid and OI.VisitID = @refVisitid                                                   
where AccessionNo NOT IN (Select ReferredAccessionNo From @Orderedtb)      
    
    
DECLARE @InvOrgGroup Table                   
(                                                            
[AttGroupID] [int],[OrgGroupID] [int],[OrgID] [int],[DisplayText] [varchar](255),                                                            
[SequenceNo] [int],[ValidationText] [varchar](max)                                                          
--,[ValidationRule] [nvarchar](max)                                                            
)               
DECLARE @InvGroupMapMaster Table                                                            
(                            
[GroupID] [int],                                                           
[InvestigationID] [bigint],                                                            
[Parent] [char](1),                                                
[SequenceNo] [int]                                                            
)     
         
Insert Into @InvOrgGroup                                                       
select IOG.[AttGroupID],IOG.[OrgGroupID],@OrgID,IOG.[DisplayText],               
IOG.[SequenceNo],IOG.[ValidationText]                            
--,IOG.[ValidationRule]                                                            
from InvOrgGroup IOG  with(nolock)                                         
Inner Join @Orderedtb t On IOG.AttGroupID=t.AttGroupID And IOG.OrgID=t.OrgID --Where t.OrgID=@OrgID_Loc      
    
      
Insert Into @InvOrgGroup                                                            
select IOG2.[AttGroupID],IGMM1.[InvestigationID],@OrgID,IOG2.[DisplayText],                         
IOG2.[SequenceNo],IOG2.[ValidationText]                                                          
--,IOG.[ValidationRule]                                                            
from InvOrgGroup IOG  with(nolock)                                                 
Inner Join @Orderedtb t On IOG.AttGroupID=t.AttGroupID And IOG.OrgID=t.OrgID                                                 
inner join InvGroupMapMaster IGMM1  with(nolock)  ON IGMM1.GroupID=IOG.OrgGroupID AND IOG.OrgID=t.OrgID AND IGMM1.Parent='Y'                                                
Inner Join InvOrgGroup IOG2  with(nolock)  ON IOG2.OrgGroupID=IGMM1.InvestigationID And IOG2.OrgID=t.OrgID     
    
    
Insert Into @InvOrgGroup                                                            
SELECT IOG3.[AttGroupID],IGMM2.[InvestigationID],@OrgID,IOG3.[DisplayText],                         
IOG3.[SequenceNo],IOG3.[ValidationText]                                                          
--,IOG.[ValidationRule]                                                            
FROM InvOrgGroup IOG  with(nolock)                                                 
Inner Join @Orderedtb t On IOG.AttGroupID=t.AttGroupID And IOG.OrgID=t.OrgID                                                 
inner join InvGroupMapMaster IGMM1  with(nolock)  ON IGMM1.GroupID=IOG.OrgGroupID AND IOG.OrgID=t.OrgID AND IGMM1.Parent='Y'                                                
Inner Join InvOrgGroup IOG2  with(nolock)  ON IOG2.OrgGroupID=IGMM1.InvestigationID And IOG2.OrgID=t.OrgID     
inner join InvGroupMapMaster IGMM2  with(nolock)  ON IGMM2.GroupID=IOG2.OrgGroupID AND IOG2.OrgID=t.OrgID AND IGMM2.Parent='Y'    
Inner Join InvOrgGroup IOG3  with(nolock)  ON IOG3.OrgGroupID=IGMM2.InvestigationID And IOG3.OrgID=t.OrgID     
    
            
Insert Into @InvGroupMapMaster                                                            
Select IGM.[GroupID],IGM.[InvestigationID],[Parent],IGM.[SequenceNo]                                                             
from InvGroupMapMaster IGM  with(nolock)                                         
Inner Join @InvOrgGroup t on IGM.GroupID=t.OrgGroupID                                                      
  
  

  INSERT INTO @tblAffectedVisits   
SELECT   
  @pVisitID,   
  @OrgID   
UNION   
SELECT   
  patientvisitid,   
  OrgID   
FROM   
  patientvisit(nolock)   
WHERE   
  refervisitid = @pVisitID  
   
    --- A-B-C Report Update ---                  
  INSERT INTO @tblAffectedVisits    
 select Distinct PV.PatientVisitId,PV.OrgID from @tblAffectedVisits T    
 Inner Join Patientvisit PV (NOLOCK) ON PV.ReferVisitID=T.VisitID    
 Where PV.PatientVisitId not in (Select Visitid from @tblAffectedVisits)    
  --- A-B-C Report Update ---  
 
  INSERT INTO @tblInvestigationValues            
SELECT   
  [investigationvalueid],   
  [name]  +'' + (  
    CASE WHEN IOA.isnabl = 'Y' THEN '<b>*</b>' ELSE '' END  
  ) + '' + (  
    CASE WHEN IOA.iscap = 'Y' THEN '<b>#</b>' ELSE '' END  
  ) AS [Name],   
  [value],   
  INV1.[investigationid] AS [InvestigationID],   
  [groupid],   
  [patientvisitid],   
  [uomid],   
  [status],   
  [createdby],   
  [createdat],   
  [modifiedby],   
  [modifiedat],   
  [uomcode],   
  [groupname],   
  INV1.[orgid],   
  [ipinvsamplecollectionmasterid],   
  [packageid],   
  [packagename],   
  [sequenceno],   
  [uid],   
  '',   
  [convvalue],   
  convuomcode   
FROM   
  investigationvalues INV1 WITH (nolock)   
  INNER JOIN @tblAffectedVisits v2 ON INV1.patientvisitid = v2.visitid   
  INNER JOIN invreportmapping IRM WITH (nolock) ON IRM.investigationid = INV1.investigationid   
  AND IRM.templateid = @TemplateID   
  LEFT JOIN investigationorgattributes IOA WITH (nolock) ON INV1.orgid = IOA.orgid   
  AND INV1.investigationid = IOA.investigationid   
WHERE   
  INV1.value <> ''   
  AND INV1.value <> '<br />'   
  /*Recheck Investigations Order Merging with Parent Group Order Start*/  
  /*Select Recheck Type based on statustype column instead of status column in patientinvestigation table   */  
  INSERT INTO @tblRecheckTestDetails (  
    [patientvisitid], [investigationid],   
    [investigationname], oldaccessionnumber,   
    [olduid], [orgid], groupid, packageid  
  )   
SELECT   
  PINV.[patientvisitid],   
  [PINV].investigationid,   
  [investigationname],   
  PINV.[accessionnumber],   
  PINV.[uid],   
  PINV.[orgid],   
  PINV.groupid,   
  PINV.packageid   
FROM   
  patientinvestigation PINV WITH (nolock)   
  INNER JOIN @tblResultSelectID tbl ON tbl.accessionno = PINV.accessionnumber   
WHERE   
  PINV.statustype = 'RC'   
UNION ALL   
SELECT   
  PINV.[patientvisitid],   
  [PINV].investigationid,   
  [investigationname],   
  PINV.[accessionnumber],   
  PINV.[uid],   
  PINV.[orgid],   
  PINV.groupid,   
  PINV.packageid   
FROM   
  patientinvestigation PINV WITH (nolock)   
WHERE   
  PINV.statustype = 'RC'   
  AND accessionnumber IN (  
    SELECT   
      accessionnumber   
    FROM   
      orderedinvestigations OI(nolock)   
      INNER JOIN @tblResultSelectID tbl ON tbl.accessionno = OI.referredaccessionno   
      AND OI.orgid != @OrgID  
  )   
  /*Update NewAccessionNumber based on statustype column in patientinvestigation table instead of referred type column in orderedinvestigations table*/  
UPDATE   
  t1   
SET   
  t1.newaccessionnumber = tmp.accessionnumber   
FROM   
  @tblRecheckTestDetails t1   
  INNER JOIN (  
    SELECT   
      t.investigationid,   
      Max(PIV.accessionnumber) AS AccessionNumber   
    FROM   
      orderedinvestigations OI(nolock)   
      INNER JOIN @tblRecheckTestDetails t ON t.patientvisitid = OI.visitid   
      AND t.orgid = OI.orgid   
      INNER JOIN patientinvestigation PIV WITH (nolock) ON PIV.patientvisitid = OI.visitid   
      AND piv.orgid = OI.orgid   
    WHERE   
      statustype = 'RC'   
    GROUP BY   
      t.investigationid  
  ) AS tmp ON tmp.investigationid = t1.investigationid   
UPDATE   
  t1   
SET   
  t1.newuid = OI.uid   
FROM   
  @tblRecheckTestDetails t1   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON OI.accessionnumber = t1.newaccessionnumber   
  AND OI.orgid = t1.orgid   
  /*Add Condition IV.statustype='RC' to get the old values      */  
UPDATE   
  t   
SET   
  t.oldvalues = IV.value,   
  t.oldconvvalues = IV.convvalue   
FROM   
  @tblRecheckTestDetails T   
  INNER JOIN investigationvalues IV WITH (nolock) ON T.patientvisitid = IV.patientvisitid   
  AND T.investigationid = IV.investigationid   
  AND T.groupid = IV.groupid   
  AND T.packageid = IV.packageid   
  AND T.orgid = IV.orgid   
  AND T.olduid = IV.uid   
  AND IV.statustype = 'RC'   
  /*Add Condition isnull(IV.statustype,'') not in ('RC','RR') to get the New values    */  
UPDATE   
  t   
SET   
  t.newvalue = IV.value,   
  t.newconvvalue = IV.convvalue   
FROM   
  @tblRecheckTestDetails T   
  INNER JOIN investigationvalues IV WITH (nolock) ON T.patientvisitid = IV.patientvisitid   
  AND T.investigationid = IV.investigationid   
  AND T.orgid = IV.orgid   
  AND T.newuid = IV.uid   
  AND Isnull(IV.statustype, '') NOT IN ('RC', 'RR')   
UPDATE   
  iv   
SET   
  iv.value = T.newvalue,   
  iv.newvalue = ' (RC)',   
  iv.convvalue = T.newconvvalue   
FROM   
  @tblInvestigationValues IV   
  INNER JOIN @tblRecheckTestDetails T ON T.patientvisitid = IV.patientvisitid   
  AND T.investigationid = IV.investigationid   
  AND T.olduid = IV.uid --Delete @tblInvestigationValues where Value is Null--if Investigation Value is Null,it will not disploy in Report                    
  --Select * from @tblRecheckTestDetails                                                           
  --select * from @tblInvestigationValues                                               
  /*Recheck Investigations Order Merging with Parent Group Order Start*/  
  /*Retest Investigations Order Merging with Parent Group Order Start*/  
  INSERT INTO @tblRetestDetails (  
    [patientvisitid], [investigationid],   
    [investigationname], oldaccessionnumber,   
    [olduid], [orgid], groupid, packageid,   
    newaccessionnumber  
  )   
SELECT   
  PINV.[patientvisitid],   
  [PINV].investigationid,   
  [investigationname],   
  PINV.[accessionnumber],   
  PINV.[uid],   
  PINV.[orgid],   
  PINV.groupid,   
  PINV.packageid,   
  PINV.accessionnumber   
FROM   
  patientinvestigation PINV WITH (nolock)   
  INNER JOIN @tblResultSelectID tbl ON tbl.accessionno = PINV.accessionnumber   
WHERE   
  PINV.statustype = 'RR'   
UPDATE   
  t1   
SET   
  t1.newaccessionnumber = tmp.accessionnumber   
FROM   
  @tblRetestDetails t1   
  INNER JOIN (  
    SELECT   
      investigationid,   
      Max(OI.accessionnumber) AS AccessionNumber   
    FROM   
      orderedinvestigations OI(nolock)   
      INNER JOIN @tblRetestDetails t ON t.patientvisitid = OI.visitid   
      AND t.investigationid = OI.id   
      AND t.orgid = OI.orgid   
    WHERE   
      referredtype = 'Retest'   
    GROUP BY   
      t.investigationid  
  ) AS tmp ON tmp.investigationid = t1.investigationid   
UPDATE   
  t1   
SET   
  t1.newuid = OI.uid   
FROM   
  @tblRetestDetails t1   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON OI.accessionnumber = t1.newaccessionnumber   
  AND OI.orgid = t1.orgid   
UPDATE   
  t   
SET   
  t.oldvalues = IV.value,   
  t.oldconvvalues = IV.convvalue   
FROM   
  @tblRetestDetails T   
  INNER JOIN investigationvalues IV WITH (nolock) ON T.patientvisitid = IV.patientvisitid   
  AND T.investigationid = IV.investigationid   
  AND T.groupid = IV.groupid   
  AND T.packageid = IV.packageid   
  AND T.orgid = IV.orgid   
  AND T.olduid = IV.uid   
UPDATE   
  t   
SET   
  t.newvalue = IV.value,   
  t.newconvvalue = IV.convvalue   
FROM   
  @tblRetestDetails T   
  INNER JOIN investigationvalues IV WITH (nolock) ON T.patientvisitid = IV.patientvisitid   
  AND T.investigationid = IV.investigationid   
  AND T.orgid = IV.orgid   
  AND T.newuid = IV.uid   
UPDATE   
  iv   
SET   
  iv.value = T.newvalue,   
  iv.newvalue = ' (RT)',   
  iv.convvalue = T.newconvvalue   
FROM   
  @tblInvestigationValues IV   
  INNER JOIN @tblRetestDetails T ON T.patientvisitid = IV.patientvisitid   
  AND T.investigationid = IV.investigationid   
  AND T.olduid = IV.uid --Delete @tblInvestigationValues where Value is Null--if Investigation Value is Null,it will not disploy in Report                                                                                                                     
  
   
  --Select * from @tblRecheckTestDetails                                                        
  --select * from @tblInvestigationValues                                                   
  --return                            
  /*Retest Investigations Order Merging with Parent Group Order Start*/  
  INSERT INTO @tblPatientInvestigation   
SELECT   
  [patientvisitid],   
  [PINV].investigationid,   
  [investigationname],   
  [PINV].[createdby],   
  [PINV].[createdat],   
  [PINV].[modifiedby],   
  [PINV].[modifiedat],   
  [investigationmethodid],   
  [investigationsamplecontainerid],   
  [sampleid],   
  [investigationsiteid],   
  [iscompleted],   
  [collecteddatetime],   
  [status],   
  [complaintid],   
  [groupid],   
  [groupname],   
  [reason],   
  [reportstatus],   
  Replace(  
    PINV.[referencerange], '<?xml version="1.0" encoding="utf-16"?>',   
    ''  
  ),   
  [methodname],   
  [ipinvsamplecollectionmasterid],   
  PINV.[orgid],   
  [worklistdeletedstatus],   
  [performingphysicainname],   
  PINV.[kitid],   
  [kitname],   
PINV.[instrumentid],   
  [instrumentname],   
  PINV.[interpretation],   
  PINV.[principleid],   
  [principlename],   
  PINV.[qcdata],   
  [packageid],   
  [packagename],   
  [approvedby],   
  [patientinvid],   
  [orderedat],   
  [uid],   
  [groupcomment],   
  [approvedat],   
  PINV.[accessionnumber],   
  PINV.isabnormal,   
  PINV.medicalremarks,   
  PINV.groupmedicalremarks,   
  PINV.refsuffixtext,   
  IOM.isnonreportable,   
  '','' ,  
  --IDS.loginid,   
  --IDS2.loginid,   
  PINV.convreferencerange,   
  PINV.printablerange,   
  PINV.authorizedby   
FROM   
  patientinvestigation PINV WITH (nolock)   
  INNER JOIN @tblResultSelectID tbl ON tbl.accessionno = PINV.accessionnumber   
  INNER JOIN investigationorgmapping IOM WITH (nolock) ON IOM.investigationid = PINV.investigationid   
  AND IOM.orgid = PINV.orgid   
  AND PINV.status IN (  
    'Pending', 'Completed', 'Approve',   
    'Validate', 'ReflexWithSameSample',   
    'ReflexWithNewSample', 'Reject',   
    'Co-authorize', 'With Held', 'PartiallyApproved',   
    'PartiallyValidated'  
  )   
  --LEFT JOIN invdeptsignatory IDS ON IDS.orgid = IOM.orgid   
  --AND iom.deptid = IDS.deptid   
  --AND IDS.seqno = 1   
  --LEFT JOIN invdeptsignatory IDS2 ON IDS2.orgid = IOM.orgid   
  --AND iom.deptid = IDS2.deptid   
  --AND IDS2.seqno = 2   
  INNER JOIN invreportmapping IRM WITH (nolock) ON IRM.investigationid = PINV.investigationid   
  AND IRM.templateid = @TemplateID   
UPDATE   
  t   
SET   
  t.approvedby = 0,   
  authorizedby = 0,   
  coauthorizedby = 0,   
  secondauthorizedby = 0   
FROM   
  @tblPatientInvestigation T   
WHERE   
  t.status IN ('Pending')   
UPDATE   
  @tblPatientInvestigation   
SET   
  referencerange = ORDBTL.referencerange,   
  methodname = ORDBTL.methodname,   
  reason = ORDBTL.reason,   
  interpretation = ORDBTL.interpretation,   
  kitname = ORDBTL.kitname,   
  convreferencerange = ORDBTL.convreferencerange,   
  printablerange = ORDBTL.printablerange,   
  isabnormal = ORDBTL.[isabnormal]   
FROM   
  @tblPatientInvestigation TBL1   
  INNER JOIN @OrderedPatientInv ORDBTL ON ORDBTL.investigationid = TBL1.investigationid INSERT INTO @tblOrdPerfOrgGrpInvDtls (  
    orderedorgid, performedorgid, attunegroupid,   
    invtype, performedorggroupid  
  )   
SELECT   
  @OrgID,   
  OA.OrgID,   
  OI.id,   
  OI.type,   
  CASE WHEN OI.type = 'GRP' THEN IOG.orggroupid ELSE OI.id END   
FROM   
  orderedinvestigations OI WITH (nolock)   
  INNER JOIN organizationaddress OA WITH (nolock) ON OI.rescaptureloc = OA.addressid   
  LEFT JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = OI.id   
  AND IOG.orgid = OA.OrgID   
WHERE OI.VisitID in (select VisitID from @tblAffectedVisits )  --- A-B-C  
  --OI.visitid = @pVisitID          
  




   INSERT INTO @tblOrdPerfOrgGrpInvDtls (    
 OrderedOrgID    
 ,PerformedOrgID    
 ,AttuneGroupID    
 ,InvType    
 ,PerformedOrgGroupID    
 )    
 SELECT @OrgID    
 ,OA.OrgID    
 ,OI.ID    
 ,OI.Type    
 ,CASE     
 WHEN OI.Type = 'GRP'    
 THEN IOG.OrgGroupID    
 ELSE OI.ID    
 END    
 FROM OrderedInvestigations OI WITH (NOLOCK)    
 INNER JOIN OrganizationAddress OA WITH (NOLOCK) ON OI.ResCaptureLoc = OA.AddressID    
 LEFT JOIN InvOrgGroup IOG WITH (NOLOCK) ON IOG.AttGroupID = OI.ID    
 AND IOG.OrgID = OA.OrgID    
 WHERE OI.VisitID = @pVisitID    
 UPDATE T    
 SET T.OrderedOrgGroupID = IOG.OrgGroupID    
 FROM @tblOrdPerfOrgGrpInvDtls T    
 INNER JOIN InvOrgGroup IOG WITH (NOLOCK) ON T.AttuneGroupID = IOG.AttGroupID    
 AND IOG.OrgID = @OrgID    
 WHERE T.InvType != 'INV'    
 UPDATE T    
 SET T.PerformedOrgUID = OI.UID    
 FROM @tblOrdPerfOrgGrpInvDtls T    
 INNER JOIN OrderedInvestigations OI WITH (NOLOCK) ON T.PerformedOrgID = OI.OrgID    
 AND T.AttuneGroupID = OI.ID    
 AND t.InvType = OI.Type    
 INNER JOIN @tblResultSelectID TRS ON TRS.AccessionNo = OI.ReferredAccessionNo    
 INNER JOIN @tblAffectedVisits TAV ON TAV.VisitID = OI.VisitID    
 AND TAV.OrgID = T.PerformedOrgID and OI.Status not in ('Retest')    
 UPDATE T    
 SET T.PerformedOrgUID = OI.UID    
 FROM @tblOrdPerfOrgGrpInvDtls T    
 INNER JOIN OrderedInvestigations OI WITH (NOLOCK) ON T.PerformedOrgID = OI.OrgID    
 AND T.AttuneGroupID = OI.ID    
 AND t.InvType = OI.Type    
 INNER JOIN @tblResultSelectID TRS ON TRS.AccessionNo = OI.ReferredAccessionNo    
 INNER JOIN @tblAffectedVisits TAV ON TAV.VisitID = OI.VisitID    
 AND TAV.OrgID = T.PerformedOrgID and OI.Status not in ('Retest')    
 UPDATE T    
 SET T.OrderedOrgUID = OI.UID    
 FROM @tblOrdPerfOrgGrpInvDtls T    
 INNER JOIN OrderedInvestigations OI WITH (NOLOCK) ON T.OrderedOrgID = OI.OrgID    
 AND T.AttuneGroupID = OI.ID    
 AND OI.VisitID = @pVisitID    
 INNER JOIN @tblAffectedVisits TAV ON TAV.VisitID = OI.VisitID    
 AND TAV.OrgID = T.OrderedOrgID and OI.Status not in ('Retest')    
 UPDATE @tblOrdPerfOrgGrpInvDtls    
 SET PerformedOrgUID = OrderedOrgUID    
 WHERE OrderedOrgID = PerformedOrgID    
    
    
INSERT INTO @tblOrdPerfOrgGrpInvDtls                                                                         
(OrderedOrgID,PerformedOrgID,AttuneGroupID, InvType, PerformedOrgGroupID,PerformedOrgUID,OrderedOrgUID)                                                                           
select T1.OrderedOrgID,T1.PerformedOrgID,IOG2.AttGroupID,T1.InvType,IGMM1.InvestigationID,T1.PerformedOrgUID,                                                                        
--T1.OrderedOrgGroupID,                                                                        
T1.OrderedOrgUID                                                                         
from @tblOrdPerfOrgGrpInvDtls T1                                                                        
inner join @InvOrgGroup IOG1 on IOG1.OrgGroupID = T1.PerformedOrgGroupID                                                                        
inner join @InvGroupMapMaster IGMM1 on IGMM1.GroupID = IOG1.OrgGroupID and IGmm1.Parent = 'Y'                                                        
inner join @InvOrgGroup IOG2 on IOG2.OrgGroupID = IGMM1.InvestigationID                               
where T1.InvType = 'GRP'       
    
INSERT INTO @tblOrdPerfOrgGrpInvDtls                                                                         
(OrderedOrgID,PerformedOrgID,AttuneGroupID, InvType, PerformedOrgGroupID,PerformedOrgUID,OrderedOrgUID)                                                                           
select T1.OrderedOrgID,T1.PerformedOrgID,IOG3.AttGroupID,T1.InvType,IGMM2.InvestigationID,T1.PerformedOrgUID,                                                                        
--T1.OrderedOrgGroupID,                                                                        
T1.OrderedOrgUID                                                                         
from @tblOrdPerfOrgGrpInvDtls T1                 
inner join @InvOrgGroup IOG1 on IOG1.OrgGroupID = T1.PerformedOrgGroupID                                                                        
inner join @InvGroupMapMaster IGMM1 on IGMM1.GroupID = IOG1.OrgGroupID and IGmm1.Parent = 'Y'                                                        
inner join @InvOrgGroup IOG2 on IOG2.OrgGroupID = IGMM1.InvestigationID      
inner join @InvGroupMapMaster IGMM2 on IGMM2.GroupID = IOG2.OrgGroupID and IGMM2.Parent = 'Y'                                                        
inner join @InvOrgGroup IOG3 on IOG3.OrgGroupID = IGMM2.InvestigationID                                
where T1.InvType = 'GRP'        
    
UPDATE T SET T.OrderedOrgGroupID=IOG.OrgGroupID                           
FROM @tblOrdPerfOrgGrpInvDtls T     
INNER JOIN InvOrgGroup IOG ON T.AttuneGroupID=IOG.AttGroupID AND IOG.OrgID=@OrgID                                                     
WHERE T.InvType!='INV'


UPDATE   
  t   
SET   
  t.orderedorggroupid = IOG.orggroupid   
FROM   
  @tblOrdPerfOrgGrpInvDtls T   
  INNER JOIN invorggroup IOG WITH (nolock) ON T.attunegroupid = IOG.attgroupid   
  AND IOG.orgid = @OrgID   
WHERE   
  t.invtype != 'INV'   
UPDATE   
  t   
SET   
  t.performedorguid = OI.uid   
FROM   
  @tblOrdPerfOrgGrpInvDtls T   
  INNER JOIN orderedinvestigations OI ON T.performedorgid = OI.orgid   
  AND T.attunegroupid = OI.id   
  AND t.invtype = OI.type   
  INNER JOIN @tblResultSelectID TRS ON TRS.accessionno = OI.referredaccessionno   
  INNER JOIN @tblAffectedVisits TAV ON TAV.visitid = OI.visitid   
  AND TAV.orgid = T.performedorgid   
UPDATE   
  t   
SET   
  t.performedorguid = OI.uid   
FROM   
  @tblOrdPerfOrgGrpInvDtls T   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON T.performedorgid = OI.orgid   
  AND T.attunegroupid = OI.id   
  AND t.invtype = OI.type   
  INNER JOIN @tblResultSelectID TRS ON TRS.accessionno = OI.referredaccessionno   
  INNER JOIN @tblAffectedVisits TAV ON TAV.visitid = OI.visitid   
  AND TAV.orgid = T.performedorgid   
UPDATE   
  t   
SET   
  t.orderedorguid = OI.uid   
FROM   
  @tblOrdPerfOrgGrpInvDtls T   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON T.orderedorgid = OI.orgid   
  AND T.attunegroupid = OI.id   
  AND OI.visitid = @pVisitID   
  INNER JOIN @tblAffectedVisits TAV ON TAV.visitid = OI.visitid   
  AND TAV.orgid = T.orderedorgid   
UPDATE   
  @tblOrdPerfOrgGrpInvDtls   
SET   
  performedorguid = orderedorguid   
WHERE   
  orderedorgid = performedorgid 
  
  
  
  
  
  IF (  
    1 < (  
      SELECT   
        Count(1)   
      FROM   
        @tblAffectedVisits  
    )  
  ) BEGIN   
UPDATE   
  t   
SET   
  patientvisitid = @pVisitID,   
  orgid = @OrgID,   
  groupid = dbo.Fn_getorderedorggroupid(@OrgID, orgid, groupid),   
  uid = T1.orderedorguid   
FROM   
  @tblInvestigationValues T   
  INNER JOIN @tblOrdPerfOrgGrpInvDtls T1 ON T.uid = T1.performedorguid   
  AND T.groupid = T1.performedorggroupid   
WHERE   
  T1.invtype != 'INV'   
  AND Isnull(t.groupid, 0) > 0   
UPDATE   
  t   
SET   
  patientvisitid = @pVisitID,   
  orgid = @OrgID,   
  uid = T1.orderedorguid   
FROM   
  @tblInvestigationValues T   
  INNER JOIN @tblOrdPerfOrgGrpInvDtls T1 ON T.uid = T1.performedorguid   
  AND T.investigationid = T1.performedorggroupid   
WHERE   
  T1.invtype = 'INV' END DECLARE @tblTempGrp TABLE (  
    invid VARCHAR(10),   
    grpid VARCHAR(10),   
    accessionno VARCHAR(10),   
    parentgrpid VARCHAR(10),   
    isgroup CHAR(1),   
    atlevel INT,   
    grpcontentseq INT,   
    [uid] VARCHAR(500),   
    patientvisitid BIGINT,   
    actualgrpid BIGINT,   
    deptname VARCHAR(255),   
    methodname VARCHAR(255),   
    notes VARCHAR(max),   
    referencerange VARCHAR(1),   
    sampleid BIGINT,   
    samplename VARCHAR(500),   
    uomcode VARCHAR(100),   
    comments VARCHAR(1),   
    pkgid INT,   
    packagename VARCHAR(255),   
    childprintseparately CHAR(1),   
    convreferencerange NVARCHAR(1),   
    printablerange VARCHAR(1)  
  ) DECLARE @tblOrdInvExploded TABLE (  
    invid VARCHAR(10),   
    grpid VARCHAR(10),   
    accessionno VARCHAR(10),   
    parentgrpid VARCHAR(10),   
    deptid BIGINT,   
    grpdeptid VARCHAR(10),   
    isgroup CHAR(1),   
    atlevel INT,   
    deptseq INT,   
    firstlvlseq INT,   
    grpcontentseq INT,   
    rootgroupid VARCHAR(10),   
    innercontentseq INT,   
    uid VARCHAR(500),   
    patientvisitid BIGINT,   
    actualgrpid BIGINT,   
    deptname VARCHAR(255),   
    methodname VARCHAR(500),   
    notes VARCHAR(max),   
    referencerange VARCHAR(max),   
    sampleid BIGINT,   
    samplename VARCHAR(500),   
    uomcode VARCHAR(255),   
    comments VARCHAR(250),   
    patternid BIGINT,   
    patternname VARCHAR(200),   
    uomid INT,   
    validationtext VARCHAR(max),   
    isabnormal VARCHAR(50),   
    invvalidationtext VARCHAR(max),   
    [groupcomment] [VARCHAR](255),   
    [groupmedicalremarks] [VARCHAR](255),   
    resultvaluetype NVARCHAR(200),   
    decimalplaces VARCHAR(20),   
    pkgid INT,   
    packagename VARCHAR(255),   
    rootgrpname VARCHAR(250),   
    result VARCHAR(max),   
    medicalremarks NVARCHAR(max),   
    l2contentseq INT,   
    parentgrpname VARCHAR(250),   
    isnonreportable CHAR(1),   
    parentprintseparately CHAR(1),   
    parentpagenumber INT,   
    childprintseparately CHAR(1),   
    childpagenumber INT,   
    isrejected CHAR(1),   
    referredtype VARCHAR(50),   
    convreferencerange NVARCHAR(max),   
    convresult VARCHAR(50),   
    iswithheld CHAR(1),   
    newvalue NVARCHAR(20),   
    convuomcode VARCHAR(50),   
    subgroupinterpretation NVARCHAR(1),   
    printablerange VARCHAR(max)  
  ) DECLARE @tblSeq TABLE (  
    invid VARCHAR(10),   
    grpid VARCHAR(10),   
    accessionno VARCHAR(10),   
    parentgrpid VARCHAR(10),   
    deptid VARCHAR(10),   
    explodedseq INT,   
    overallseq INT,   
    indcontentseq INT  
  )   
  /****************** Explode the Groups ordered to get the investigation to be performed along with the levels *********************************/  
  ;  
WITH c1 AS (  
  SELECT   
    OI.id AS GrpID,   
    IGM.investigationid AS InvID,   
    OI.id AS ParentGrpID,   
    IGM.parent,   
    OI.accessionnumber,   
    0 AS [level],   
    IGM.sequenceno,   
    OI.[uid],   
    OI.visitid,   
    CONVERT(BIGINT, IOG.orggroupid) AS OrgGroupID,   
    '' AS DeptName,   
    '' AS MethodName,   
'' AS Interpretation,   
    '' AS ReferenceRange,   
    '' AS SampleID,   
    '' AS Reason,   
    IGM.printseparately AS ChildPrintSeparately,   
    '' AS ConvReferenceRange,   
    '' AS PrintableRange   
  FROM   
    orderedinvestigations OI WITH (nolock)   
    INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = OI.id   
    AND OI.orgid = IOG.orgid   
    INNER JOIN invgroupmapmaster IGM WITH (nolock) ON IOG.orggroupid = IGM.groupid   
    INNER JOIN @tblResultSelectID TRS ON TRS.accessionno = OI.accessionnumber   
  WHERE   
    OI.type = 'GRP'   
    AND Isnull(oi.pkgid, 0) = 0   
  UNION ALL   
  SELECT   
    CONVERT(BIGINT, IOG.attgroupid) AS GrpID,   
    IGM.investigationid AS InvID,   
    OI.grpid AS ParentGrpID,   
    IGM.parent,   
    OI.accessionnumber,   
    [level] + 1,   
    CASE WHEN OI.grpid IN (  
      SELECT   
        OI1.id   
      FROM   
        orderedinvestigations OI1 WITH (nolock)   
      WHERE   
        type = 'GRP'  
    ) THEN OI.sequenceno ELSE OI.sequenceno --+ 1 -- + [level]                               
    END AS SequenceNo,   
    OI.[uid],   
    OI.visitid,   
    OI.invid AS OrgGroupID,   
    methodname,   
    interpretation,   
    referencerange,   
    sampleid,   
    '',   
    reason,   
    IGM.printseparately AS ChildPrintSeparately,   
    convreferencerange,   
    printablerange   
  FROM   
    c1 OI   
    INNER JOIN invorggroup IOG WITH (nolock) ON IOG.orggroupid = OI.invid   
    AND IOG.orgid = @OrgID   
    INNER JOIN invgroupmapmaster IGM WITH (nolock) ON OI.invid = IGM.groupid   
    INNER JOIN @tblResultSelectID TRS ON TRS.accessionno = OI.accessionnumber   
  WHERE   
    OI.parent = 'Y'   
    AND IGM.active <> 'N'  
) INSERT INTO @tblTempGrp (  
  invid, grpid, accessionno, parentgrpid,   
  isgroup, atlevel, grpcontentseq,   
  [uid], patientvisitid, actualgrpid,   
  deptname, methodname, notes, referencerange,   
  sampleid, samplename, uomcode, comments,   
  pkgid, packagename, childprintseparately,   
  convreferencerange, printablerange  
)   
SELECT   
  invid,   
  grpid,   
  accessionnumber,   
  parentgrpid,   
  'Y',   
  [level],   
  sequenceno,   
  uid,   
  visitid,   
  orggroupid,   
  deptname,   
  methodname,   
  interpretation,   
  referencerange,   
  sampleid,   
  '',   
  '',   
  reason,   
  0,   
  '',   
  childprintseparately,   
  convreferencerange,   
  printablerange   
FROM   
  c1   
WHERE   
  Isnull(parent, 'N') = 'N'   
ORDER BY   
  parentgrpid   
UPDATE   
  c1   
SET   
  c1.notes = IOG.groupinterpretation   
FROM   
  @tblTempGrp c1   
  INNER JOIN invorggroup IOG WITH (nolock) ON c1.grpid = IOG.orggroupid   
  AND IOG.orgid = @OrgID ----------------                                                                                                                                      
  DECLARE @InvGroupMapMasterForOrderedPkg TABLE (  
    groupid BIGINT,   
    investigationid BIGINT,   
    parent CHAR(1),   
    sequenceno INT,   
    pkgseqno INT,   
    orderedid BIGINT,   
    uid VARCHAR(255),   
    orgid INT,   
    accessionnumber BIGINT,   
    pkgid BIGINT,   
    pkgname VARCHAR(255),   
    childprintseparately CHAR(1)  
  ) INSERT INTO @InvGroupMapMasterForOrderedPkg --select IOG.OrgGroupID,IPM.ID,Case When IPM.Type='GRP' Then 'Y' Else 'N' End As Parent,IPM.SequenceNo,IPM.PrintSeparately                                                                                    
   
   
  --from OrderedInvestigations OI WITH(NOLOCK)         
  --INNER JOIN InvOrgGroup IOG WITH(NOLOCK)ON IOG.AttGroupID=OI.ID And IOG.OrgID=OI.OrgID             
  --INNER JOIN InvPackageMapping IPM WITH(NOLOCK)ON IPM.PackageID=IOG.OrgGroupID And IPM.Type In('INV','GRP')    
  --INNER JOIN @tblResultSelectID TRS ON TRS.AccessionNo=OI.AccessionNumber                                            
  --Where OI.Type='PKG'                                                   
SELECT   
  IOG.orggroupid,   
  IPM.id,   
  'N' AS Parent,   
  IPM.sequenceno,   
  IOG.sequenceno,   
  IPM.id,   
  OI.uid,   
  OI.orgid,   
  OI.accessionnumber,   
 OI.pkgid,   
  OI.pkgname,   
  IPM.printseparately   
FROM   
  orderedinvestigations OI WITH (nolock)   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = OI.pkgid   
  INNER JOIN invpackagemapping IPM WITH (nolock) ON IPM.packageid = IOG.orggroupid   
  AND IPM.id = OI.id   
  AND IPM.type = OI.type   
WHERE   
  IOG.orgid = @OrgID   
  AND visitid = @pVisitID   
  AND IPM.type = 'INV'   
  AND oi.accessionnumber IN (  
    SELECT   
      accessionno   
    FROM   
      @tblResultSelectID  
  )   
UNION ALL   
SELECT   
  IOG.orggroupid,   
  IPM.id,   
  'Y' AS Parent,   
  IPM.sequenceno,   
  IOG.sequenceno,   
  IOG1.attgroupid,   
  OI.uid,   
  OI.orgid,   
  OI.accessionnumber,   
  OI.pkgid,   
  OI.pkgname,   
  IPM.printseparately   
FROM   
  orderedinvestigations OI WITH (nolock)   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = OI.pkgid   
  INNER JOIN invpackagemapping IPM WITH (nolock) ON IPM.packageid = IOG.orggroupid   
  INNER JOIN invorggroup IOG1 WITH (nolock) ON IOG1.attgroupid = OI.id   
  AND OI.type = 'GRP'   
  AND IOG1.orggroupid = IPM.id   
  AND IPM.type = OI.type   
  AND IOG1.orgid = @OrgID   
WHERE   
  IOG.orgid = @OrgID   
  AND visitid = @pVisitID   
  AND IPM.type = 'GRP'   
  AND oi.accessionnumber IN (  
    SELECT   
      accessionno   
    FROM   
      @tblResultSelectID  
  );  
WITH c2 AS (  
  SELECT   
    CASE WHEN IGM.parent = 'Y' THEN IGM.orderedid ELSE 0 END AS GrpID,   
    IGM.investigationid AS InvID,   
    IGM.pkgid AS ParentGrpID,   
    IGM.parent,   
    IGM.accessionnumber,   
    0 AS [level],   
    IGM.sequenceno,   
    IGM.[uid],   
    @pVisitID AS VisitID,   
    CASE WHEN IGM.parent = 'Y' THEN CONVERT(BIGINT, IGM.investigationid) ELSE 0 END AS OrgGroupID --,IDM.DeptName                         
    ,   
    '' AS DeptName,   
    '' AS MethodName,   
    '' AS Interpretation,   
    '' AS ReferenceRange,   
    '' AS SampleID --,'' as UomCode                             
    ,   
    '' AS Reason,   
    '' AS PrintableRange,   
    IGM.pkgid AS PKGID,   
    IGM.pkgname,   
    Cast(  
      Isnull(IGM.childprintseparately, 'N') AS CHAR(1)  
    ) AS ChildPrintSeparately,   
    '' AS ConvReferenceRange   
  FROM   
    @InvGroupMapMasterForOrderedPkg IGM   
  UNION ALL   
  SELECT   
    CONVERT(BIGINT, IOG.attgroupid) AS GrpID,   
    IGM.investigationid AS InvID,   
    OI.grpid AS ParentGrpID,   
    CONVERT(  
      CHAR(1),   
      IGM.parent  
    ) AS Parent,   
    OI.accessionnumber,   
    [level] + 1,   
    CASE WHEN OI.grpid IN (  
      SELECT   
        OI1.id   
      FROM   
        orderedinvestigations OI1 WITH (nolock)   
      WHERE   
        type = 'GRP'  
    ) THEN OI.sequenceno ELSE OI.sequenceno --+ 1 -- + [level]                   
    END AS SequenceNo,   
    OI.[uid],   
    OI.visitid,   
    OI.invid AS OrgGroupID,   
    methodname,   
    interpretation,   
    referencerange,   
    sampleid,   
    '',   
    reason,   
    printablerange,   
    OI.pkgid,   
    OI.pkgname,   
    Cast(  
      Isnull(IGM.printseparately, 'N') AS CHAR(1)  
    ) AS ChildPrintSeparately,   
    convreferencerange   
  FROM   
    c2 OI   
    INNER JOIN invorggroup IOG WITH (nolock) ON IOG.orggroupid = OI.invid   
    AND IOG.orgid = @OrgID   
    INNER JOIN invgroupmapmaster IGM WITH (nolock) ON OI.invid = IGM.groupid   
    INNER JOIN @tblResultSelectID tblUID ON tblUID.accessionno = oi.accessionnumber   
  WHERE   
    OI.parent = 'Y'  
) INSERT INTO @tblTempGrp (  
  invid, grpid, accessionno, parentgrpid,   
  isgroup, atlevel, grpcontentseq,   
  [uid], patientvisitid, actualgrpid,   
  deptname, methodname, notes, referencerange,   
  sampleid, samplename, uomcode, comments,   
  pkgid, packagename, childprintseparately,   
  convreferencerange, printablerange  
)   
SELECT   
  invid,   
  grpid,   
  accessionnumber,   
  parentgrpid,   
  'Y',   
  [level],   
  sequenceno,   
  uid,   
  visitid,   
  orggroupid,   
  deptname,   
  methodname,   
  interpretation,   
  referencerange,   
  sampleid,   
  '',   
  '',   
  reason,   
  pkgid,   pkgname,   
  childprintseparately,   
  convreferencerange,   
  printablerange   
FROM   
  c2   
WHERE   
  Isnull(parent, 'N') = 'N'   
ORDER BY   
  parentgrpid ----------------                              
  /****************** Explode the Groups ordered to get the investigation to be performed along with theie levels *********************************/  
  /********** Insert ordered investigations and exploded group contents into a temp table *******************************************************/  
  INSERT INTO @tblOrdInvExploded (  
    invid, grpid, accessionno, parentgrpid,   
    deptid, grpdeptid, isgroup, atlevel,   
    deptseq, firstlvlseq, grpcontentseq,   
    rootgroupid, innercontentseq, uid,   
    patientvisitid, actualgrpid, deptname,   
    methodname, notes, referencerange,   
    sampleid, samplename, uomcode, comments,   
    patternid, patternname, uomid, validationtext,   
    invvalidationtext, groupcomment,   
    groupmedicalremarks, resultvaluetype,   
    decimalplaces, pkgid, packagename,   
    medicalremarks, isnonreportable,   
    childprintseparately, parentprintseparately,   
    referredtype, convreferencerange,   
    printablerange  
  )   
SELECT   
  OI.id,   
  '0',   
  OI.accessionnumber,   
  '0',   
  IOM.deptid,   
  IOM.deptid,   
  'N',   
  0,   
  0,   
  IOM.sequenceno,   
  0,   
  '',   
  0,   
  OI.uid,   
  OI.visitid,   
  0,   
  IDM.deptname,   
  piv.methodname,   
  PIV.interpretation,   
  PIV.referencerange,   
  PIV.sampleid,   
  '',   
  '',   
  reason,   
  0,   
  '',   
  IOM.uomid,   
  '',   
  '',   
  groupcomment,   
  groupmedicalremarks,   
  '',   
  0,   
  0,   
  '',   
  PIV.medicalremarks,   
  IOM.isnonreportable,   
  '',   
  IOM.printseparately,   
  OI.referredtype,   
  PIV.convreferencerange,   
  printablerange   
FROM   
  orderedinvestigations OI WITH (nolock)   
  INNER JOIN investigationorgmapping IOM WITH (nolock) ON OI.id = IOM.investigationid   
  AND OI.orgid = IOM.orgid   
  INNER JOIN invdeptmaster IDM WITH (nolock) ON IDM.deptid = IOM.deptid   
  AND OI.orgid = IDM.orgid   
  INNER JOIN @tblPatientInvestigation PIV ON Piv.investigationid = IOM.investigationid   
  AND piv.patientvisitid = OI.visitid   
  AND PIV.uid = oi.uid   
  INNER JOIN @tblResultSelectID TRS ON TRS.accessionno = OI.accessionnumber   
WHERE   
  type NOT IN ('GRP', 'PKG')   
  AND Isnull(OI.pkgid, 0) = 0   
UNION   
SELECT   
  invid,   
  grpid,   
  accessionno,   
  parentgrpid,   
  '0',   
  '0',   
  isgroup,   
  atlevel,   
  0,   
  0,   
  grpcontentseq,   
  '',   
  0,   
  uid,   
  patientvisitid,   
  actualgrpid,   
  deptname,   
  methodname,   
  notes,   
  referencerange,   
  sampleid,   
  '',   
  '',   
  comments,   
  0,   
  '',   
  0,   
  '',   
  '',   
  '',   
  '',   
  '',   
  0,   
  pkgid,   
  packagename,   
  '',   
  'N',   
  childprintseparately,   
  '',   
  '',   
  convreferencerange,   
  printablerange   
FROM   
  @tblTempGrp   
UPDATE   
  t   
SET   
  methodname = PIV.methodname,   
  notes = PIV.interpretation,   
  referencerange = PIV.referencerange,   
  comments = reason,   
  deptid = IM.deptid,   
  deptname = IDM.deptname,   
  t.samplename = ISm.sampledesc,   
  patternid = PM.patternid,   
  patternname = IPM.patternname,   
  --uomid = IM.uomid,                 
  --uomcode = IM.uomcode,                 
  isabnormal = PIV.isabnormal,   
  invvalidationtext = Isnull(IM.invvalidationtext, ''),   
  groupcomment = PIV.groupcomment,   
  groupmedicalremarks = PIV.groupmedicalremarks,   
  resultvaluetype = Isnull(IOA.resultvaluetype, 'AN'),   
  decimalplaces = IOA.decimalplaces,   
  medicalremarks = PIV.medicalremarks,   
  isnonreportable = IM.isnonreportable,   
  t.patientvisitid = piv.patientvisitid,   
  t.convreferencerange = PIV.convreferencerange,   
  t.printablerange = PIV.printablerange   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN @tblPatientInvestigation PIV ON Piv.investigationid = t.invid   
  AND piv.patientvisitid = t.patientvisitid   
  And PIV.groupid = t.actualgrpid  
  AND PIV.uid = t.uid   
  INNER JOIN investigationorgmapping IM WITH (nolock) ON T.invid = IM.investigationid   
  AND IM.orgid = @OrgID   
  LEFT JOIN invsamplemaster ISm WITH (nolock) ON ism.samplecode = PIV.sampleid   
  AND ism.orgid = @OrgID   
  AND ISm.orgid = PIV.orgid   
  INNER JOIN invdeptmaster IDM WITH (nolock) ON IDM.deptid = IM.deptid   
  AND IM.orgid = IDM.orgid   
  INNER JOIN patternmapping PM WITH (nolock) ON PM.investigationid = t.invid   
  INNER JOIN investigationpattern IPM WITH (nolock) ON ipm.patternid = PM.patternid   
  AND ipm.orgid = @OrgID   
  LEFT JOIN investigationorgattributes IOA WITH (nolock) ON IOA.orgid = @OrgID   
  AND IOA.investigationid = IM.investigationid   
UPDATE   
  t   
SET   
  uomid = INV.uomid,   
  uomcode = INV.uomcode   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN @tblInvestigationValues INV ON INV.investigationid = T.invid   
  AND T.patientvisitid = INV.patientvisitid   
WHERE   
  INV.patientvisitid = @pVisitID   
  AND INV.orgid = @OrgID   
UPDATE   
  t   
SET   
  t.groupid = t.packageid,   
  t.groupname = Isnull(IOG.displaytext, IG.groupname)   
FROM   
  @tblPatientInvestigation T   
  INNER JOIN invorggroup IOG(nolock) ON IOG.orggroupid = T.packageid   
  AND IOG.orgid = T.orgid   
  INNER JOIN invgroupmaster IG(nolock) ON IG.groupid = IOG.attgroupid   
WHERE   
  t.packageid > 0   
  AND (  
    t.groupid = 0   
    OR t.groupid IS NULL  
  )   
  /*********************** Update the departments for all the investigations ***********************/  
  /***************************************  Get the Root GroupID for all the Groups/Inner Groups **********************************************/  
  DECLARE @tblRootGrpID TABLE (  
    accessionno VARCHAR(10),   
    parentgrpid VARCHAR(10)  
  ) INSERT INTO @tblRootGrpID   
SELECT   
  accessionno,   
  parentgrpid   
FROM   
  @tblOrdInvExploded --WHERE Atlevel=0                                            
GROUP BY   
  accessionno,   
  parentgrpid   
UPDATE   
  t   
SET   
  t.parentgrpid = t.grpid   
FROM   
  @tblOrdInvExploded T   
WHERE   
  t.atlevel = 1   
UPDATE   
  t   
SET   
  t.parentgrpname = Isnull(IOG.displaytext, IGM.groupname)   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invgroupmaster IGM WITH (nolock) ON IGM.groupid = T.parentgrpid   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = IGM.groupid   
  AND IOG.orgid = @OrgID   
WHERE   
  IOG.orgid = @OrgID   
UPDATE   
  t   
SET   
  t.rootgroupid = T1.parentgrpid,   
  t.parentprintseparately = Isnull(IOG.printseparately, 'N')   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN @tblRootGrpID T1 ON T.accessionno = T1.accessionno   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON OI.accessionnumber = T1.accessionno   
  AND T1.parentgrpid = OI.id   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = OI.id   
  AND IOG.orgid = @OrgID   
WHERE   
  OI.type IN ('GRP', 'PKG')   
  AND Isnull(OI.pkgid, 0) = 0   
UPDATE   
  t   
SET   
  t.rootgrpname = T1.NAME   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN orderedinvestigations T1 WITH (nolock) ON T.accessionno = T1.accessionnumber   
  AND T.rootgroupid = T1.id   
WHERE   
  Isnull(T1.pkgid, 0) = 0   
UPDATE   
  t   
SET   
  t.rootgroupid = OI.pkgid   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN @tblRootGrpID T1 ON T.accessionno = T1.accessionno   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON OI.accessionnumber = T1.accessionno --AND T1.ParentGrpID=OI.ID                                                                                                       
WHERE   
  Isnull(OI.pkgid, 0) <> 0   
UPDATE   
  t   
SET   
  t.rootgrpname = T1.pkgname   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN orderedinvestigations T1 WITH (nolock) ON T.accessionno = T1.accessionnumber   
  AND T.rootgroupid = T1.pkgid   
WHERE   
  Isnull(T1.pkgid, 0) <> 0   
UPDATE   
  t   
SET   
  t.parentprintseparately = Isnull(IOG.printseparately, 'N')   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN @tblRootGrpID T1 ON T.accessionno = T1.accessionno   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON OI.accessionnumber = T1.accessionno --AND T1.ParentGrpID=OI.ID            
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = OI.id   
  AND IOG.orgid = @OrgID   
WHERE   
  Isnull(OI.pkgid, 0) <> 0   
  AND OI.type = 'GRP'   
UPDATE   
  t   
SET   
  t.parentprintseparately = Isnull(IOM.printseparately, 'N')   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON OI.accessionnumber = T.accessionno --AND T1.ParentGrpID=OI.ID                               
  INNER JOIN investigationorgmapping IOM WITH (nolock) ON IOM.investigationid = OI.id   
  AND IOM.orgid = @OrgID   
WHERE   
  Isnull(OI.pkgid, 0) <> 0   
  AND OI.type = 'INV'   
  /*************************** RootGroup populating ends ********************************************************************/  
  /******************************************* Assign DeptID for Groups based on Max no. depts in a group ************************************/  
  DECLARE @tblDeptGrp TABLE (  
    rootgroupid VARCHAR(10),   
    deptid VARCHAR(10),   
    deptcnt INT  
  ) DECLARE @tblDeptGrpAdjusted TABLE (  
    rootgroupid VARCHAR(10),   
    deptid VARCHAR(10)  
  ) INSERT INTO @tblDeptGrp   
SELECT   
  rootgroupid,   
  deptid,   
  Count(deptid)   
FROM   
  @tblOrdInvExploded   
WHERE   
  rootgroupid != '0'   
  AND rootgroupid <> ''   
  AND Isnull(parentgrpid, '') <> ''   
  AND deptid != '0'   
GROUP BY   
  rootgroupid,   
  deptid   
ORDER BY   
  rootgroupid INSERT INTO @tblDeptGrpAdjusted   
SELECT   
  rootgroupid,   
  Min(deptid)   
FROM   
  @tblDeptGrp t1   
WHERE   
  deptcnt = (  
    SELECT   
      Max(deptcnt)   
    FROM   
      @tblDeptGrp t2   
    WHERE   
      t2.rootgroupid = t1.rootgroupid  
  )   
GROUP BY   
  rootgroupid   
UPDATE   
  t   
SET   
  t.grpdeptid = T1.deptid   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN @tblDeptGrpAdjusted T1 ON T.rootgroupid = T1.rootgroupid   
UPDATE   
  t   
SET   
  t.deptname = T1.deptname,   
  t.deptid = T1.deptid   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invdeptmaster T1 WITH (nolock) ON T1.deptid = T.grpdeptid   
  AND T1.orgid = @OrgID   
UPDATE   
  @tblOrdInvExploded   
SET   
  grpdeptid = deptid   
WHERE   
  grpdeptid = '0'   
UPDATE   
  t   
SET   
  t.deptname = IH.headername,   
  t.deptid = T1.deptid --select       T.DeptName ,IH.HeaderName ,IH.HeaderID         ,T1.DeptID  ,  IOM.OutputInvestigationCode,  IOM.InvestigationID,T.InvID                
FROM   
  @tblOrdInvExploded T   
  INNER JOIN investigationorgmapping IOM WITH (nolock) ON iom.investigationid = T.invid   
  INNER JOIN invdeptmaster T1 WITH (nolock) ON T1.deptid = T.grpdeptid   
  AND T1.orgid = @OrgID   
  LEFT JOIN investigationheader IH WITH (nolock) ON IH.headerid = iom.headerid   
WHERE   
  IOM.orgid = @OrgID   
  AND Isnull(IOM.isheader, '') = 'Y'   
  /******************************************* Assign DeptID for Groups based on Max no. depts in a group ************************************/  
  /******************************************* Update Dept Sequence ************************************/  
UPDATE   
  t   
SET   
  t.deptseq = D.sequenceno   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invdeptmaster D WITH (nolock) ON T.grpdeptid = D.deptid   
  AND D.orgid = @OrgID   
  /******************************************* Update Dept Sequence ************************************/  
  /* Order Investigation by seq */  
UPDATE   
  t   
SET   
  t.firstlvlseq = IOG.sequenceno   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN investigationorgmapping IOG WITH (nolock) ON T.invid = IOG.investigationid   
  AND IOG.orgid = @OrgID   
WHERE   
  t.isgroup != 'Y'   
  /* Order Group by group Seq */  
UPDATE   
  t   
SET   
  t.firstlvlseq = IOG.sequenceno,   
  validationtext = iog.validationtext   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invorggroup IOG WITH (nolock) ON T.rootgroupid = IOG.attgroupid   
  AND IOG.orgid = @OrgID   
  /* Order Inner Content Sequence */  
UPDATE   
  t   
SET   
  innercontentseq = IGM.sequenceno   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = t.grpid   
  AND IOG.orgid = @OrgID   
  INNER JOIN invgroupmapmaster IGM WITH (nolock) ON IGM.groupid = IOG.orggroupid   
  AND T.invid = IGM.investigationid   
WHERE   
  t.atlevel IN (0, 1)   
UPDATE   
  t   
SET   
  innercontentseq = IGM.sequenceno   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = t.parentgrpid   
  AND IOG.orgid = @OrgID   
  INNER JOIN invgroupmapmaster IGM WITH (nolock) ON IGM.groupid = IOG.orggroupid   
  AND IGM.investigationid = t.actualgrpid   
WHERE   
  t.atlevel IN (2)   
UPDATE   
  t   
SET   
  l2contentseq = IGM.sequenceno,   
  validationtext = iog.validationtext   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.orggroupid = t.actualgrpid   
  AND IOG.orgid = @OrgID   
  AND T.atlevel = 2   
  INNER JOIN invgroupmapmaster IGM WITH (nolock) ON IGM.groupid = T.actualgrpid   
  AND T.invid = IGM.investigationid   
  AND T.atlevel = 2   
UPDATE   
  t   
SET   
  t.result = Isnull(t1.value, '')   
FROM   
  @tblOrdInvExploded t   
  INNER JOIN @tblInvestigationValues t1 ON t.invid = t1.investigationid   
  AND t.uid = t1.uid   
  AND t.patientvisitid = t1.patientvisitid   
  AND T.invid = t1.investigationid   
  AND t1.orgid = @OrgID   
UPDATE   
  t1   
SET   
  t1.result = t2.value,   
  t1.newvalue = t2.newvalue,   
  t1.convresult = t2.convvalue,   
  t1.convuomcode = t2.convuomcode --  + Case When t1.ReferredType='Recheck' Then ' (RC)' When t1.ReferredType='Retest' Then ' (RT)' Else '' End                    
FROM   
  @tblOrdInvExploded t1   
  INNER JOIN @tblInvestigationValues t2 ON t1.invid = t2.investigationid   
  AND (  
    t1.actualgrpid = t2.groupid   
    OR t1.grpid = t2.groupid  
  ) --AND t1.pkgid = t2.packageid        
  AND t1.uid = t2.uid   
  AND t2.status NOT IN ('Reject', 'With Held')   
UPDATE   
  t1   
SET   
  t1.result = '-',   
  t1.referencerange = '-',   
  t1.uomcode = '',   
  t1.isrejected = 'Y',   
  t1.convresult = '-',   
  t1.convreferencerange = '-',   
  t1.printablerange = '-'   
FROM   
  @tblOrdInvExploded t1   
  INNER JOIN @tblInvestigationValues t2 ON t1.invid = t2.investigationid   
  AND (  
    t1.actualgrpid = t2.groupid   
    OR t1.grpid = t2.groupid  
  )   
  AND t1.pkgid = t2.packageid   
  AND t1.uid = t2.uid   
  AND t2.status IN ('Reject')   
UPDATE   
  t1   
SET   
  t1.result = '-',   
  t1.referencerange = '-',   
  t1.uomcode = '',   
  t1.iswithheld = 'Y',   
  t1.convresult = '-',   
  t1.convreferencerange = '-',   
  t1.printablerange = '-'   
FROM   
  @tblOrdInvExploded t1   
  INNER JOIN @tblInvestigationValues t2 ON t1.invid = t2.investigationid   
  AND (  
    t1.actualgrpid = t2.groupid   
    OR t1.grpid = t2.groupid  
  )   
  AND t1.pkgid = t2.packageid   
  AND t1.uid = t2.uid   
  AND t2.status IN ('With Held')   
UPDATE   
  t   
SET   
  t.childprintseparately = Isnull(IGM.printseparately, 'N')   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = T.rootgroupid   
  AND IOG.orgid = @OrgID   
  INNER JOIN invgroupmapmaster IGM WITH (nolock) ON IGM.groupid = IOG.orggroupid   
  AND IGM.parent = 'Y'   
  AND IGM.investigationid = T.actualgrpid   
UPDATE   
  t   
SET   
  t.childprintseparately = Isnull(IGM.printseparately, 'N')   
FROM   
  @tblOrdInvExploded T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = T.rootgroupid   
  AND IOG.orgid = @OrgID   
  INNER JOIN invgroupmapmaster IGM WITH (nolock) ON IGM.groupid = IOG.orggroupid   
  AND IGM.parent = 'Y'   
  INNER JOIN invorggroup IOG1 WITH (nolock) ON IOG1.orggroupid = IGM.investigationid   
  AND IOG1.orgid = @OrgID   
  INNER JOIN invgroupmapmaster IGM1 WITH (nolock) ON IGM1.groupid = IOG1.orggroupid   
  AND IGM1.parent = 'Y'   
  AND IGM1.investigationid = T.actualgrpid DECLARE @tblTempOrdInvExploded TABLE (  
    rowid INT,   
    accessionno VARCHAR(10),   
    actualgrpid BIGINT,   
    grpid VARCHAR(10),   
    firstlvlseq INT,   
    grpcontentseq INT,   
    innercontentseq INT,   
    invid BIGINT,   
    parentgrpid BIGINT,       rootgroupid VARCHAR(10),   
    deptname VARCHAR(255),   
    valuesgrpid BIGINT,   
    groupname VARCHAR(255),   
    investigationvalueid BIGINT,   
    NAME VARCHAR(300),   
    value VARCHAR(1),   
    sequenceno INT,   
    methodname VARCHAR(500),   
    notes VARCHAR(max),   
    referencerange VARCHAR(max),   
    sampleid BIGINT,   
    samplename VARCHAR(500),   
    comments VARCHAR(250),   
    units VARCHAR(100),   
    patternid BIGINT,   
    patternname VARCHAR(200),   
    deptid BIGINT,   
    validationtext VARCHAR(max),   
    isabnormal VARCHAR(50),   
    invvalidationtext VARCHAR(max),   
    [groupcomment] [VARCHAR](255),   
    [groupmedicalremarks] [VARCHAR](255),   
    resultvaluetype NVARCHAR(200),   
    decimalplaces VARCHAR(20),   
    pkgid INT,   
    packagename VARCHAR(255),   
    rootgrpname VARCHAR(250),   
    result VARCHAR(max),   
    medicalremarks NVARCHAR(max),   
    parentgrpname VARCHAR(250),   
    isnonreportable CHAR(1),   
    childprintseparately CHAR(1),   
    approvedby BIGINT,   
    approvername NVARCHAR(500),   
    approverqualification NVARCHAR(500),   
    childpagenumber INT,   
    parentprintseparately CHAR(1),   
    parentpagenumber INT,   
    isgroup CHAR(1),   
    authorizedby BIGINT,   
    authorizername NVARCHAR(500),   
    authorizerqualification NVARCHAR(500),   
    secondauthorizedby BIGINT,   
    secondauthorizername NVARCHAR(500),   
    secondauthorizerqualification NVARCHAR(500),   
    deptprintseparately CHAR(1),   
    deptpagenumber INT,   
    patientvisiid BIGINT,   
    isrejected CHAR(1),   
    iswithheld CHAR(1),   
    newvalue NVARCHAR(20),   
    convreferencerange VARCHAR(max),   
    convvalue VARCHAR(50),   
    uid VARCHAR(255),   
    convuomcode VARCHAR(50),   
    subgroupinterpretation NVARCHAR(1),   
    printablerange VARCHAR(max),   
    isdeptheader CHAR(10),   
    deptmentname VARCHAR(200),   
    coauthorizedby BIGINT,   
    coauthorizername NVARCHAR(500),   
    coauthorizerqualification NVARCHAR(500),   
    coauthorizerimagesource VARBINARY(max)  
  ) DECLARE @tblTempOrdInvExplodedResult TABLE (  
    temprowid BIGINT IDENTITY(1, 1),   
    rowid INT,   
    accessionno VARCHAR(10),   
    actualgrpid INT,   
    grpid VARCHAR(10),   
    firstlvlseq INT,   
    grpcontentseq INT,   
    innercontentseq INT,   
    invid BIGINT,   
    parentgrpid BIGINT,   
    rootgroupid VARCHAR(10),   
    deptname VARCHAR(255),   
    valuesgrpid BIGINT,   
    groupname VARCHAR(255),   
    investigationvalueid BIGINT,   
    NAME VARCHAR(500),   
    value VARCHAR(1),   
    sequenceno INT,   
    methodname VARCHAR(500),   
    notes VARCHAR(max),   
    referencerange VARCHAR(max),   
    sampleid BIGINT,   
    samplename VARCHAR(500),   
    technicalremarks VARCHAR(255),   
    units VARCHAR(100),   
    patternid BIGINT,   
    patternname VARCHAR(200),   
    deptid BIGINT,   
    validationtext VARCHAR(max),   
    isabnormal VARCHAR(50),   
    invvalidationtext VARCHAR(max),   
    [medicalremarks] [NVARCHAR](max),   
    resultvaluetype NVARCHAR(200),   
    decimalplaces VARCHAR(20),   
    pkgid INT,   
    packagename VARCHAR(255),   
    rootgrpname VARCHAR(250),   
    result VARCHAR(max),   
    attgroupid BIGINT,   
    parentgrpname VARCHAR(250),   
    isnonreportable CHAR(1),   
    childprintseparately CHAR(1),   
    approvedby BIGINT,   
    approvername NVARCHAR(500),   
    approverqualification NVARCHAR(500),   
    childpagenumber INT,   
    parentprintseparately CHAR(1),   
    parentpagenumber INT,   
    isgroup CHAR(1),   
    authorizedby BIGINT,   
    authorizername NVARCHAR(500),   
    authorizerqualification NVARCHAR(500),   
    secondauthorizedby BIGINT,   
    secondauthorizername NVARCHAR(500),   
    secondauthorizerqualification NVARCHAR(500),   
    deptprintseparately CHAR(1),   
    deptpagenumber INT,   
    patientvisitid BIGINT,   
    isrejected CHAR(1),   
    iswithheld CHAR(1),   
    newvalue NVARCHAR(20),   
    convreferencerange VARCHAR(max),   
    convvalue VARCHAR(50),   
    uid VARCHAR(255),   
    convuomcode VARCHAR(50),   
    codename VARCHAR(100),   
    subgroupinterpretation NVARCHAR(1),   
    printablerange VARCHAR(max),   
    isdeptheader CHAR(10),   
    deptmentname VARCHAR(200),   
    coauthorizedby BIGINT,   
    coauthorizername NVARCHAR(500),   
    coauthorizerqualification NVARCHAR(500),   
    coauthorizerimagesource VARBINARY(max),   
    deptleveltrend CHAR(1)  
  ) DECLARE @tblTempOrdInvExplodedResultOrderbyRowID TABLE (  
    temorowid BIGINT,   
    rowid INT,   
    accessionno VARCHAR(10),   
    actualgrpid INT,   
    grpid VARCHAR(10),   
    firstlvlseq INT,   
    grpcontentseq INT,   
    innercontentseq INT,   
    invid BIGINT,   
    parentgrpid BIGINT,   
    rootgroupid VARCHAR(10),   
    deptname VARCHAR(255),   
    valuesgrpid BIGINT,   
    groupname VARCHAR(255),   
    investigationvalueid BIGINT,   
    NAME VARCHAR(500),   
    value VARCHAR(1),   
    sequenceno INT,   
    methodname VARCHAR(500),   
    notes VARCHAR(max),   
    referencerange VARCHAR(max),   
    sampleid BIGINT,   
    samplename VARCHAR(500),   
    technicalremarks VARCHAR(255),   
    units VARCHAR(100),   
    patternid BIGINT,   
    patternname VARCHAR(200),   
    deptid BIGINT,   
    validationtext VARCHAR(max),   
    isabnormal VARCHAR(50),   
    invvalidationtext VARCHAR(max),   
    [medicalremarks] [NVARCHAR](max),   
    resultvaluetype NVARCHAR(200),   
    decimalplaces VARCHAR(20),   
    pkgid INT,   
    packagename VARCHAR(255),   
    rootgrpname VARCHAR(250),   
    result VARCHAR(max),   
    attgroupid BIGINT,   
    parentgrpname VARCHAR(250),   
    isnonreportable CHAR(1),   
    childprintseparately CHAR(1),   
    approvedby BIGINT,   
    approvername NVARCHAR(500),   
    approverqualification NVARCHAR(500),   
    childpagenumber INT,   
    parentprintseparately CHAR(1),   
    parentpagenumber INT,   
    isgroup CHAR(1),   
    authorizedby BIGINT,   
    authorizername NVARCHAR(500),   
    authorizerqualification NVARCHAR(500),   
    secondauthorizedby BIGINT,   
    secondauthorizername NVARCHAR(500),   
    secondauthorizerqualification NVARCHAR(500),   
    deptprintseparately CHAR(1),   
    deptpagenumber INT,   
    patientvisiid BIGINT,   
    isrejected CHAR(1),   
    iswithheld CHAR(1),   
    retestrecheck NVARCHAR(20),   
    convreferencerange VARCHAR(max),   
    convvalue VARCHAR(50),   
    uid VARCHAR(255),   
    convuomcode VARCHAR(50),   
    codename VARCHAR(100),   
    subgroupinterpretation NVARCHAR(max),   
    printablerange VARCHAR(max),   
    isdeptheader CHAR(10),   
    deptmentname VARCHAR(200),   
    coauthorizedby BIGINT,   
    coauthorizername NVARCHAR(500),   
    coauthorizerqualification NVARCHAR(500),   
    coauthorizerimagesource VARBINARY(max),   
    isinterpretation INT,   
    labno VARCHAR(100),   
    labresult VARCHAR(100),   
    deptleveltrend CHAR(1)  
  ) DECLARE @tblTempOrdInvExplodedResultOrderbyRowID1 TABLE (  
    temorowid BIGINT,   
    rowid INT,   
    accessionno VARCHAR(10),   
    actualgrpid INT,   
    grpid VARCHAR(10),   
    firstlvlseq INT,   
    grpcontentseq INT,   
    innercontentseq INT,   
    invid BIGINT,   
    parentgrpid BIGINT,   
    rootgroupid VARCHAR(10),   
    deptname VARCHAR(255),   
    valuesgrpid BIGINT,   
    groupname VARCHAR(255),   
    investigationvalueid BIGINT,   
    NAME VARCHAR(500),   
    value VARCHAR(1),   
    sequenceno INT,   
    methodname VARCHAR(500),   
    notes VARCHAR(max),   
    referencerange VARCHAR(max),   
    sampleid BIGINT,   
    samplename VARCHAR(500),   
    technicalremarks VARCHAR(255),   
    units VARCHAR(100),   
    patternid BIGINT,   
    patternname VARCHAR(200),   
    deptid BIGINT,   
    validationtext VARCHAR(max),   
    isabnormal VARCHAR(50),   
    invvalidationtext VARCHAR(max),   
    [medicalremarks] [NVARCHAR](max),   
    resultvaluetype NVARCHAR(200),   
    decimalplaces VARCHAR(20),   
    pkgid INT,   
    packagename VARCHAR(255),   
    rootgrpname VARCHAR(250),   
    result VARCHAR(max),   
    attgroupid BIGINT,   
    parentgrpname VARCHAR(250),   
    isnonreportable CHAR(1),   
    childprintseparately CHAR(1),   
    approvedby BIGINT,   
    approvername NVARCHAR(500),   
    approverqualification NVARCHAR(500),   
    childpagenumber INT,   
    parentprintseparately CHAR(1),   
    parentpagenumber INT,   
    isgroup CHAR(1),   
    authorizedby BIGINT,   
    authorizername NVARCHAR(500),   
    authorizerqualification NVARCHAR(500),   
    secondauthorizedby BIGINT,   
    secondauthorizername NVARCHAR(500),   
    secondauthorizerqualification NVARCHAR(500),   
    deptprintseparately CHAR(1),   
    deptpagenumber INT,   
    patientvisiid BIGINT,   
    isrejected CHAR(1),   
    iswithheld CHAR(1),   
    retestrecheck NVARCHAR(20),   
    convreferencerange VARCHAR(max),   
    convvalue VARCHAR(50),   
    uid VARCHAR(255),   
    convuomcode VARCHAR(50),   
    codename VARCHAR(100),   
    subgroupinterpretation NVARCHAR(max),   
    printablerange VARCHAR(max),   
    isdeptheader CHAR(10),   
    deptmentname VARCHAR(200),   
    coauthorizedby BIGINT,   
    coauthorizername NVARCHAR(500),   
    coauthorizerqualification NVARCHAR(500),   
    coauthorizerimagesource VARBINARY(max),   
    isinterpretation INT,   
    labno VARCHAR(100),   
    labresult VARCHAR(100),   
    deptleveltrend CHAR(1)  
  ) --kapil    
  INSERT INTO @tblTempOrdInvExploded (  
    rowid, accessionno, actualgrpid, grpid,   
    firstlvlseq, grpcontentseq, innercontentseq,   
    invid, parentgrpid, rootgroupid,   
    deptname, valuesgrpid, groupname,   
    investigationvalueid, NAME, value,   
    sequenceno, methodname, notes, referencerange,   
    sampleid, samplename, comments, units,   
    patternid, patternname, deptid, validationtext,   
    isabnormal, invvalidationtext, groupcomment,   
    groupmedicalremarks, resultvaluetype,   
    decimalplaces, pkgid, packagename,   
    rootgrpname, result, medicalremarks,   
    parentgrpname, isnonreportable,   
    childprintseparately, approvedby,   
    parentprintseparately, isgroup,   
    authorizedby, secondauthorizedby,   
    patientvisiid, isrejected, iswithheld,   
    newvalue, convreferencerange, convvalue,   
    uid, convuomcode, subgroupinterpretation,   
    printablerange, isdeptheader, deptmentname,   
    coauthorizedby  
  )   
SELECT   
  Row_number() OVER (  
    ORDER BY   
      deptseq,   
      firstlvlseq,   
      grpcontentseq,   
      innercontentseq,   
      l2contentseq  
  ),   
  tbl.accessionno,   
  CASE WHEN Isnull(PIV.packageid, 0) > 0 THEN PIV.groupid ELSE tbl.actualgrpid END,   
  PIV.groupid,   
  tbl.firstlvlseq,   
  tbl.grpcontentseq,   
  tbl.innercontentseq,   
  tbl.invid,   
  tbl.parentgrpid,   
  tbl.rootgroupid,   
  tbl.deptname,   
  PIV.groupid AS ValuesGRpID,   
  PIV.groupname,   
  0,   
  CASE WHEN tbl.isrejected = 'Y' THEN '* ' + PIV.investigationname WHEN tbl.iswithheld = 'Y' THEN '* ' + PIV.investigationname ELSE --PIV.investigationname   
  IV.NAME END,   
  '',   
  0,   
  tbl.methodname,   
  tbl.notes,   
  tbl.referencerange,   
  tbl.sampleid,   
  tbl.samplename,   
  tbl.comments,   
  tbl.uomcode,   
  patternid,   
  patternname,   
  deptid,   
  tbl.validationtext,   
  PIV.isabnormal,   
  tbl.invvalidationtext,   
  PIV.groupcomment,   
  PIV.groupmedicalremarks,   
  tbl.resultvaluetype,   
  tbl.decimalplaces,   
  tbl.pkgid,   
  tbl.packagename,   
  tbl.rootgrpname,   
  tbl.result,   
  tbl.medicalremarks,   
  tbl.parentgrpname,   
  PIV.isnonreportable,   
  tbl.childprintseparately,   
  PIV.approvedby,   
  tbl.parentprintseparately,   
  tbl.isgroup,   
  PIV.authorizedby,   
  PIV.secondauthorizedby,   
  tbl.patientvisitid,   
  tbl.isrejected,   
  tbl.iswithheld,   
  tbl.newvalue,   
  tbl.convreferencerange,   
  tbl.convresult,   
  PIV.uid,   
  tbl.convuomcode,   
  tbl.subgroupinterpretation,   
  tbl.printablerange,   
  '',   
  '',   
  PIV.coauthorizedby   
FROM   
  @tblOrdInvExploded tbl   
  INNER JOIN @tblPatientInvestigation PIV ON PIV.investigationid = tbl.invid   
  AND (  
    PIV.groupid = tbl.actualgrpid   
    OR PIV.groupid = tbl.grpid  
  ) --and PIV.PackageID= tbl.PKGID                
  AND PIV.patientvisitid = tbl.patientvisitid   
  AND PIV.uid = tbl.uid   
  INNER JOIN @tblInvestigationValues IV ON IV.investigationid = PIV.investigationid   
  AND IV.groupid = PIV.groupid --AND IV.PackageID=PIV.PackageID                                                                 
  AND IV.uid = PIV.uid   
  AND PIV.patientvisitid = IV.patientvisitid   
ORDER BY   
  deptseq,   
  firstlvlseq,   
  grpcontentseq,   
  innercontentseq,   
  l2contentseq DECLARE @RowID BIGINT INSERT INTO @tblTempOrdInvExplodedResult   
SELECT   
  rowid,   
  accessionno,   
  actualgrpid,   
  grpid,   
  firstlvlseq,   
  grpcontentseq,   
  innercontentseq,   
  invid,   
  parentgrpid,   
  rootgroupid,   
  deptname,   
  valuesgrpid,   
  groupname,   
  investigationvalueid,   
  NAME,   
  value,   
  sequenceno,   
  methodname,   
  notes,   
  referencerange,   
  sampleid,   
  samplename,   
  comments,   
  units,   
  patternid,   
  patternname,   
  deptid,   
  validationtext,   
  isabnormal,   
  invvalidationtext MedicalRemarks,   
  resultvaluetype,   
  decimalplaces,   
  pkgid,   
  packagename,   
  rootgrpname,   
  result,   
  medicalremarks,   
  0,   
  parentgrpname,   
  isnonreportable,   
  childprintseparately,   
  approvedby,   
  approvername,   
  approverqualification,   
  childpagenumber,   
  parentprintseparately,   
  parentpagenumber,   
  isgroup,   
  authorizedby,   
  authorizername,   
  authorizerqualification,   
  secondauthorizedby,   
  secondauthorizername,   
  secondauthorizerqualification,   
  deptprintseparately,   
  deptpagenumber,   
  patientvisiid,   
  isrejected,   
  iswithheld,   
  newvalue,   
  convreferencerange,   
  convvalue,   
  uid,   
  convuomcode,   
  '',   
  subgroupinterpretation,   
  printablerange,   
  isdeptheader,   
  deptmentname,   
  coauthorizedby,   
  coauthorizername,   
  coauthorizerqualification,   
  coauthorizerimagesource,   
  ''   
FROM   
  @tblTempOrdInvExploded   
WHERE   
  1 = 2   
  /* Start : Using While Instead Of rowidcursor Cursor */  
SET   
  @MaxRno = (  
    SELECT   
      Count(rowid)   
    FROM   
      @tblTempOrdInvExploded  
  ) WHILE (@MinRno < = @MaxRno) BEGIN   
SELECT   
  @RowID = rowid   
FROM   
  (  
    SELECT   
      rowid,   
      Row_number() OVER (  
        ORDER BY   
          rowid  
      ) AS ID   
    FROM   
      @tblTempOrdInvExploded  
  ) t   
WHERE   
  id = @MinRno INSERT INTO @tblTempOrdInvExplodedResult (  
    rowid, deptname, NAME, deptid, rootgroupid,   
    childprintseparately, approvedby,   
    parentgrpid, parentprintseparately,   
    isgroup, authorizedby, secondauthorizedby,   
    accessionno, pkgid, packagename,   
    coauthorizedby  
  )   
SELECT   
  rowid,   
  deptname,   
  '',   
  deptid,   
  Isnull(rootgroupid, invid),   
  childprintseparately,   
  approvedby,   
  parentgrpid,   
  parentprintseparately,   
  isgroup,   
  authorizedby,   
  secondauthorizedby,   
  accessionno,   
  pkgid,   
  packagename,   
  coauthorizedby   
FROM   
  @tblTempOrdInvExploded   
WHERE   
  rowid = @RowID INSERT INTO @tblTempOrdInvExplodedResult (  
    rowid, deptname, NAME, deptid, rootgroupid,   
    childprintseparately, approvedby,   
    parentgrpid, parentprintseparately,   
    isgroup, authorizedby, secondauthorizedby,   
    accessionno, pkgid, packagename,   
    isdeptheader, deptmentname, coauthorizedby  
  )   
SELECT   
  rowid,   
  deptname,   
  --'<B>' + Upper(  
  --  Ltrim(  
  --    Rtrim(  
  --      Isnull(deptname, '')  
  --    )  
  --  )  
  --) + '</B>',  
   '<B>' +  
    Ltrim(  
      Rtrim(  
        Isnull(deptname, '')  
      )  
    )  
   + '</B>',   
  deptid,   
  Isnull(rootgroupid, invid),   
  childprintseparately,   
  approvedby,   
  parentgrpid,   
  parentprintseparately,   
  isgroup,   
  authorizedby,   
  secondauthorizedby,   
  accessionno,   
  pkgid,   
  packagename,   
  'Y',   
  --'<B>' + Upper(  
  --  Ltrim(  
  --    Rtrim(  
  --      Isnull(deptname, '')  
  --    )  
  --  )  
  --) + '</B>', 
   '<B>' +  
    Ltrim(  
      Rtrim(  
        Isnull(deptname, '')  
      )  
    )  
   + '</B>',  
  coauthorizedby --,CASE       
  -- WHEN deptid = 13      
  --  AND parentpagenumber = 2      
  --  THEN '' + Upper(Ltrim(Rtrim(Isnull(deptname, '')))) + ''      
  -- ELSE '' + Upper(Ltrim(Rtrim(Isnull(deptname, '')))) + ''      
  -- END      
FROM   
  @tblTempOrdInvExploded   
WHERE   
  rowid = @RowID INSERT INTO @tblTempOrdInvExplodedResult (  
    rowid, rootgrpname, NAME, rootgroupid,   
    technicalremarks, medicalremarks,   
    deptid, grpid, childprintseparately,   
    approvedby, parentgrpid, parentprintseparately,   
    isgroup, authorizedby, secondauthorizedby,   
    accessionno, actualgrpid, pkgid,   
    packagename, coauthorizedby  
  )   
SELECT   
  rowid,   
  rootgrpname,   
  '<B>' + Ltrim(  
    Rtrim(  
      Isnull(rootgrpname, '')  
    )  
  ) + '</B>',   
  rootgroupid,   
  groupcomment,   
  groupmedicalremarks,   
  deptid,   
  grpid,   
  childprintseparately,   
  approvedby,   
  parentgrpid,   
  parentprintseparately,   
  isgroup,   
  authorizedby,   
  secondauthorizedby,   
  accessionno,   
  actualgrpid,   
  pkgid,   
  packagename,   
  coauthorizedby   
FROM   
  @tblTempOrdInvExploded   
WHERE   
  rowid = @RowID   
  AND Isnull(rootgrpname, 'NULL') != 'NULL' INSERT INTO @tblTempOrdInvExplodedResult (  
    rowid, parentgrpname, NAME, parentgrpid,   
    technicalremarks, medicalremarks,   
    deptid, grpid, rootgroupid, childprintseparately,   
    approvedby, parentprintseparately,   
    isgroup, authorizedby, secondauthorizedby,   
    accessionno, pkgid, packagename,   
    coauthorizedby  
  )   
SELECT   
  rowid,   
  parentgrpname,   
  CASE WHEN Isnull(rootgrpname, '') <> parentgrpname THEN '<B>' + Ltrim(  
    Rtrim(  
      Isnull(parentgrpname, '')  
    )  
  ) + '</B>' ELSE NULL END,   
  parentgrpid,   
  groupcomment,   
  groupmedicalremarks,   
  deptid,   
  grpid,   
  rootgroupid,   
  childprintseparately,   
  approvedby,   
  parentprintseparately,   
  isgroup,   
  authorizedby,   
  secondauthorizedby,   
  accessionno,   
  pkgid,   
  packagename,   
  coauthorizedby   
FROM   
  @tblTempOrdInvExploded   
WHERE   
  rowid = @RowID   
  AND Isnull(parentgrpname, 'NULL') != 'NULL'   
  AND parentgrpname != '' INSERT INTO @tblTempOrdInvExplodedResult (  
    rowid, groupname, NAME, actualgrpid,   
    technicalremarks, medicalremarks,   
    deptid, grpid, rootgroupid, childprintseparately,   
    approvedby, parentgrpid, parentprintseparately,   
    isgroup, authorizedby, secondauthorizedby,   
    accessionno, pkgid, packagename,   
    coauthorizedby  
  )   
SELECT   
  rowid,   
  groupname,   
  CASE WHEN Isnull(rootgrpname, '') <> groupname   
  AND Isnull(parentgrpname, '') <> groupname THEN '<B>' + Ltrim(  
    Rtrim(  
      Isnull(groupname, '')  
    )  
  ) + '</B>' ELSE NULL END,   
  actualgrpid,   
  groupcomment,   
  groupmedicalremarks,   
  deptid,   
  grpid,   
  rootgroupid,   
  childprintseparately,   
  approvedby,   
  parentgrpid,   
  parentprintseparately,   
  isgroup,   
  authorizedby,   
  secondauthorizedby,   
  accessionno,   
  pkgid,   
  packagename,   
  coauthorizedby   
FROM   
  @tblTempOrdInvExploded   
WHERE   
  rowid = @RowID   
  AND Isnull(groupname, 'NULL') != 'NULL'   
  AND groupname != '' INSERT INTO @tblTempOrdInvExplodedResult (  
    rowid, accessionno, actualgrpid, grpid,   
    firstlvlseq, grpcontentseq, innercontentseq,   
    invid, parentgrpid, rootgroupid,   
    deptname, valuesgrpid, groupname,   
    investigationvalueid, NAME, value,   
    sequenceno, sampleid, samplename,   
    technicalremarks, units, methodname,   
    notes, referencerange, patternid,   
    patternname, deptid, validationtext,   
    isabnormal, invvalidationtext, medicalremarks,   
    resultvaluetype, decimalplaces,   
    pkgid, packagename, rootgrpname,   
    result, parentgrpname, isnonreportable,   
    childprintseparately, approvedby,   
    parentprintseparately, isgroup,   
    authorizedby, secondauthorizedby,   
    patientvisitid, isrejected, iswithheld,   
    newvalue, convreferencerange, convvalue,   
    uid, convuomcode, printablerange,   
    coauthorizedby  
  )   
SELECT   
  rowid,   
  accessionno,   
  actualgrpid,   
  grpid,   
  firstlvlseq,   
 grpcontentseq,   
  innercontentseq,   
  invid,   
  parentgrpid,   
  rootgroupid,   
  Isnull(deptname, ''),   
  valuesgrpid,   
  Isnull(groupname, ''),   
  investigationvalueid,   
  NAME,   
  value,   
  sequenceno,   
  sampleid,   
  samplename,   
  comments,   
  units,   
  methodname,   
  notes,   
  referencerange,   
  patternid,   
  patternname,   
  deptid,   
  validationtext,   
  isabnormal,   
  invvalidationtext,   
  medicalremarks,   
  resultvaluetype,   
  decimalplaces,   
  pkgid,   
  packagename,   
  rootgrpname,   
  result,   
  parentgrpname,   
  isnonreportable,   
  childprintseparately,   
  approvedby,   
  parentprintseparately,   
  isgroup,   
  authorizedby,   
  secondauthorizedby,   
  patientvisiid,   
  isrejected,   
  iswithheld,   
  newvalue,   
  convreferencerange,   
  convvalue,   
  uid,   
  convuomcode,   
  printablerange,   
  coauthorizedby   
FROM   
  @tblTempOrdInvExploded   
WHERE   
  rowid = @RowID   
ORDER BY   
  rowid   
SET   
  @MinRno = @MinRno + 1 END   
  /* End : Using While Instead Of rowidcursor Cursor  */  
  /*        
             */  
DELETE FROM   
  tmp1   
FROM   
  @tblTempOrdInvExplodedResult tmp1   
  LEFT JOIN (  
    SELECT   
      Min(temprowid) AS id,   
      invid,   
      accessionno   
    FROM   
      @tblTempOrdInvExplodedResult   
    WHERE   
      accessionno IS NOT NULL   
      AND invid IS NOT NULL   
    GROUP BY   
      invid,   
      accessionno,   
      parentgrpid  
  ) tmp2 ON tmp1.invid = tmp2.invid   
  AND tmp1.accessionno = tmp2.accessionno   
  AND tmp1.temprowid = tmp2.id   
WHERE   
  tmp2.id IS NULL   
  AND tmp1.accessionno IS NOT NULL   
  AND tmp1.invid IS NOT NULL INSERT INTO @tblTempOrdInvExplodedResultOrderbyRowID   
SELECT   
  *,   
  0 AS IsInterpretation,   
  '',   
  ''   
FROM   
  @tblTempOrdInvExplodedResult   
ORDER BY   
  temprowid DECLARE @tblUnqDept TABLE (  
    rowid BIGINT,   
    deptname VARCHAR(255)  
  ) INSERT INTO @tblUnqDept   
SELECT   
  Min(rowid),   
  deptname   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID t   
WHERE   
  rowid = (  
    SELECT   
      Min(rowid)   
    FROM   
      @tblTempOrdInvExplodedResultOrderbyRowID t1   
    WHERE   
      t.deptname = t1.deptname  
  )   
GROUP BY   
  deptname   
DELETE FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
  deptname IN (  
    SELECT   
      deptname   
    FROM   
      @tblUnqDept  
  )   
  AND rowid NOT IN (  
    SELECT   
      rowid   
    FROM   
      @tblUnqDept  
  )   
  AND (  
    grpid IS NULL   
    OR invid IS NULL  
  ) DECLARE @tblRootGrp TABLE (  
    rowid BIGINT,   
    rootgrpname VARCHAR(250)  
  ) INSERT INTO @tblRootGrp   
SELECT   
  Min(rowid),   
  rootgrpname   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID t   
WHERE   
  rowid = (  
    SELECT   
      Min(rowid)   
    FROM   
      @tblTempOrdInvExplodedResultOrderbyRowID t1   
    WHERE   
      t.rootgrpname = t1.rootgrpname  
  )   
GROUP BY   
  rootgrpname   
DELETE FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
  rootgrpname IN (  
    SELECT   
      rootgrpname   
    FROM   
      @tblRootGrp  
  )   
  AND rowid NOT IN (  
    SELECT   
      rowid   
    FROM   
      @tblRootGrp  
  )   
  AND (  
    grpid IS NULL   
    OR invid IS NULL  
  ) DECLARE @tblParentGrp TABLE (  
    rowid BIGINT,   
    parentgrpname VARCHAR(250)  
  ) INSERT INTO @tblParentGrp   
SELECT   
  Min(rowid),   
  parentgrpname   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID t   
WHERE   
  rowid = (  
    SELECT   
      Min(rowid)   
    FROM   
      @tblTempOrdInvExplodedResultOrderbyRowID t1   
    WHERE   
      t.parentgrpname = t1.parentgrpname   
      AND t.rootgrpname = t1.rootgrpname  
  )   
GROUP BY   
  parentgrpname,   
  rootgrpname   
DELETE FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
  parentgrpname IN (  
    SELECT   
      parentgrpname   
    FROM   
      @tblParentGrp  
  )   
  AND rowid NOT IN (  
    SELECT   
      rowid   
    FROM   
      @tblParentGrp  
  )   
  AND (  
    grpid IS NULL   
    OR invid IS NULL  
  ) DECLARE @tblUnqGrp TABLE (      rowid BIGINT,   
    parentgrpname VARCHAR(250),   
    grpname VARCHAR(250)  
  ) INSERT INTO @tblUnqGrp   
SELECT   
  Min(rowid),   
  parentgrpname,   
  groupname   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID t   
WHERE   
  rowid = (  
    SELECT   
      Min(rowid)   
    FROM   
      @tblTempOrdInvExplodedResultOrderbyRowID t1   
    WHERE   
      t.groupname = t1.groupname   
      AND t.parentgrpname = t1.parentgrpname   
      AND t.rootgrpname = t1.rootgrpname  
  ) --t.GroupName=t1.GroupName AND t.ParentGrpName=t1.ParentGrpName)                        
GROUP BY   
  parentgrpname,   
  groupname,   
  rootgrpname   
DELETE FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
  groupname IN (  
    SELECT   
      groupname   
    FROM   
      @tblUnqGrp  
  )   
  AND rowid NOT IN (  
    SELECT   
      rowid   
    FROM   
      @tblUnqGrp  
  )   
  AND (  
    grpid IS NULL   
    OR invid IS NULL  
  )   
DELETE FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
  Isnull(NAME, 'NULL') = 'NULL'   
DELETE FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
  NAME = ''   
  /***CODE Added For Show Method Name And Sample Name in Group Level***/  
  IF EXISTS (SELECT COM.configkeyid   
                 FROM   configorgmaster COM(nolock)   
                        INNER JOIN configkeymaster CKM(nolock)   
                                ON CKM.configkeyid = COM.configkeyid   
                 WHERE  CKM.configkey = 'GroupTestSeperator'   
                        AND COM.orgid = @OrgID)   
        BEGIN   
            DECLARE @SampleCountTable AS TABLE   
              (   
                 countvalue INT   
              )   
            DECLARE @MethodCountTable AS TABLE   
              (   
                 countvalue INT   
              )   
            DECLARE @SampleName NVARCHAR(500)   
            DECLARE @MethodName NVARCHAR(500)   
            --AB Code      
            --UPDATE T1    
            --SET T1.IsDeptHeader = 'Y'    
    --  ,T1.DeptmentName = '' + Upper(Ltrim(Rtrim(Isnull(I.deptname, '')))) + ''    
            --FROM @tblTempOrdInvExplodedResultOrderbyRowID T1    
            --INNER JOIN InvDeptmaster I ON I.deptid = T1.deptid    
            --  AND I.orgid = @OrgID    
            --WHERE     
            ----T1.patternid IS NULL      AND     
            --  T1.parentprintseparately = 'Y'    
            UPDATE tt1   
            SET    tt1.attgroupid = IOG.attgroupid   
            FROM   @tblTempOrdInvExplodedResultOrderbyRowID TT1   
                   INNER JOIN invorggroup IOG WITH (nolock)   
                           ON IOG.orggroupid = TT1.actualgrpid   
            WHERE  orgid = @OrgID   
            UPDATE @tblTempOrdInvExplodedResultOrderbyRowID   
            SET    methodname = Isnull(methodname, ''),   
                   samplename = Isnull(samplename, '')   
            DECLARE @GrpID BIGINT   
            /* Start : Using While Instead Of rowidcursor Cursor */   
            SET @MinRno = 1   
            SET @MaxRno = (SELECT Count(DISTINCT grpid)   
                           FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                           WHERE  Isnull(grpid, '0') <> '0')   
            WHILE ( @MinRno < = @MaxRno )   
              BEGIN   
                  SELECT @GrpID = grpid   
                  FROM   (SELECT grpid,   
                                 Row_number()   
                                   OVER (   
                                     ORDER BY grpid ) AS ID   
                          FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                          WHERE  Isnull(grpid, '0') <> '0'   
                          GROUP  BY grpid) t   
                  WHERE  id = @MinRno   
                  INSERT INTO @SampleCountTable   
                  SELECT Count(DISTINCT ( samplename ))   
                  FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                  WHERE  grpid = @GrpID   
                         AND Isnull(invid, '') <> ''   
                  GROUP  BY samplename   
                  INSERT INTO @MethodCountTable   
                  SELECT Count(DISTINCT ( methodname ))   
                  FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                  WHERE  grpid = @GrpID   
                         AND Isnull(invid, '') <> ''   
                  GROUP  BY methodname   
                  IF ( (SELECT Count(1)   
                        FROM   @SampleCountTable) = 1   
                       AND (SELECT Count(1)   
                            FROM   @MethodCountTable) = 1 )   
                    BEGIN  
                        SELECT @SampleName = samplename   
                        FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                        WHERE  grpid = @GrpID   
                               AND Isnull(invid, '') <> ''   
                        GROUP  BY samplename   
                        --UPDATE T SET T.SampleName=@SampleName FROM @tblTempOrdInvExplodedResultOrderbyRowID T where T.GrpID= @GrpID and ISNULL(InvID,'')=''                          
                        --Update Unique Sample Name as null        
                        IF EXISTS (SELECT groupid   
                                   FROM   invgroupmapmaster(nolock)   
                                   WHERE  groupid = @GrpID   
                                          AND parent = 'Y')   
                          BEGIN   
                              UPDATE t   
                              SET    t.samplename = ''   
                              FROM   @tblTempOrdInvExplodedResultOrderbyRowID T   
                              WHERE  t.grpid = @GrpID   
                                     AND Isnull(invid, '') <> ''   
                                     AND t.parentgrpid <> t.attgroupid   
                              UPDATE t   
                              SET    t.samplename = ''   
                              FROM   @tblTempOrdInvExplodedResultOrderbyRowID T   
                              WHERE  t.grpid = @GrpID   
                                     AND Isnull(invid, '') <> ''   
                          END   
                        ELSE   
                          BEGIN   
                              UPDATE t   
                              SET    t.samplename = ''   
                              FROM   @tblTempOrdInvExplodedResultOrderbyRowID T   
                              WHERE  t.grpid = @GrpID   
                                     AND Isnull(invid, '') <> ''   
                          END   
                        --Update test Unique Sample name to Group Smaple Name            
                        DECLARE @Scount INT   
                        SELECT @Scount = Count(grpid)   
                        FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                        WHERE  grpid = @GrpID   
                               AND Isnull(invid, '') = ''   
                        UPDATE t   
                        SET    t.samplename = @SampleName   
                        FROM   (SELECT grpid,   
                                       samplename,   
                                       Row_number()   
                                         OVER (   
                                           partition BY grpid   
                                           ORDER BY grpid DESC ) AS RN   
                                FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                                WHERE  grpid = @GrpID   
                                       AND Isnull(invid, '') = '') AS t   
                        WHERE  rn = @Scount   
                    END   
                  IF ( (SELECT Count(1)   
                        FROM   @SampleCountTable) = 1   
                       AND (SELECT Count(1)   
                            FROM   @MethodCountTable) = 1 )   
                    BEGIN   
                        SELECT @MethodName = methodname   
                        FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                        WHERE  grpid = @GrpID   
       AND Isnull(invid, '') <> ''   
                        GROUP  BY methodname   
                        --Update Unique Sample Name as null                             
                        IF EXISTS (SELECT groupid   
                                   FROM   invgroupmapmaster(nolock)   
                                   WHERE  groupid = @GrpID   
                                          AND parent = 'Y')   
                          BEGIN   
                              UPDATE t   
                              SET    t.methodname = ''   
                              FROM   @tblTempOrdInvExplodedResultOrderbyRowID T   
                              WHERE  t.grpid = @GrpID   
                                     AND Isnull(invid, '') <> ''   
                                     AND t.parentgrpid <> t.attgroupid   
                              UPDATE t   
                              SET    t.methodname = ''   
                              FROM   @tblTempOrdInvExplodedResultOrderbyRowID T   
                              WHERE  t.grpid = @GrpID   
                                     AND Isnull(invid, '') <> ''   
                          END   
                        ELSE   
                          BEGIN   
                              UPDATE t   
                              SET    t.methodname = ''   
                              FROM   @tblTempOrdInvExplodedResultOrderbyRowID T   
                              WHERE  t.grpid = @GrpID   
                                     AND Isnull(invid, '') <> ''   
                          END   
                        --Update test Unique Sample name to Group Smaple Name                                                                                             
                        DECLARE @Mcount INT   
    SELECT @Mcount = Count(grpid)   
                        FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                        WHERE  grpid = @GrpID   
                               AND Isnull(invid, '') = ''   
                        UPDATE t   
                        SET    t.methodname = @MethodName   
                        FROM   (SELECT grpid,   
                                       methodname,   
                                       Row_number()   
                                         OVER (   
                                           partition BY grpid   
                                           ORDER BY grpid DESC ) AS RN   
                                FROM   @tblTempOrdInvExplodedResultOrderbyRowID   
                                WHERE  grpid = @GrpID   
                                       AND Isnull(invid, '') = '') AS t   
                        WHERE  rn = @Mcount   
                    END   
                  --UPDATE T SET T.Name='  ~'+T.Name FROM @tblTempOrdInvExplodedResultOrderbyRowID T where T.GrpID= @GrpID and ISNULL(InvID,'')<>'' AND T.RootGroupID<>T.AttGroupID           
                  DELETE @SampleCountTable   
                  DELETE @MethodCountTable   
                  SET @MinRno = @MinRno + 1   
              END   
        /* End : Using While Instead Of rowidcursor Cursor */   
        /*         
            */   
        END   
UPDATE   
  t   
SET   
  t.deptprintseparately = Isnull(IDM.printseparately, 'N')   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN invdeptmaster IDM(nolock) ON IDM.deptid = T.deptid   
  AND IDM.orgid = @OrgID   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  rootgroupid = invid,   
  actualgrpid = invid   
WHERE   
  isgroup = 'N'   
UPDATE   
  t   
SET   
  t.rootgroupid = T1.rootgroupid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN @tblTempOrdInvExplodedResultOrderbyRowID T1 ON T1.rowid = T.rowid   
WHERE   
  Isnull(t.rootgroupid, '') = '' DECLARE @tblDeptID TABLE (  
    deptid BIGINT,   
    sequenceno INT,   
    deptprintseparately CHAR(1)  
  ) INSERT INTO @tblDeptID   
SELECT   
  DISTINCT T.deptid,   
  Max(T.rowid) AS SequenceNo,   
  Max(T.deptprintseparately) AS DeptPrintSeparately   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
GROUP BY   
  T.deptid   
ORDER BY   
  sequenceno DECLARE @DeptID BIGINT DECLARE @DeptPrintSeparately CHAR(1) DECLARE @DeptPageNumber INT   
SET   
  @DeptPageNumber = 1   
  /* Start : Using While Instead Of deptdetailcursor Cursor */  
SET   
  @MinRno = 1   
SET   
  @MaxRno = (  
    SELECT   
      Count(deptid)   
    FROM   
      @tblDeptID  
  ) WHILE (@MinRno < = @MaxRno) BEGIN   
SELECT   
  @DeptID = deptid   
FROM   
  (  
    SELECT   
      deptid,   
      Row_number() OVER (  
        ORDER BY   
          sequenceno  
      ) AS ID   
    FROM   
      @tblDeptID  
  ) t   
WHERE   
  id = @MinRno   
SELECT   
  @DeptPrintSeparately = deptprintseparately   
FROM   
  @tblDeptID   
WHERE   
  deptid = @DeptID IF (@DeptPrintSeparately = 'Y') BEGIN   
SET   
  @DeptPageNumber = @DeptPageNumber + 1   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  deptpagenumber = @DeptPageNumber   
WHERE   
  deptid = @DeptID   
SET   
  @DeptPageNumber = @DeptPageNumber + 1 END ELSE BEGIN   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  deptpagenumber = @DeptPageNumber   
WHERE   
  deptid = @DeptID END   
SET   
  @MinRno = @MinRno + 1 END   
  /* End : Using While Instead Of deptdetailcursor Cursor */  
  /*        
             */  
  DECLARE @TBLTEMPORDINVEXPLODEDRESULTORDERBYROWID_TEMP TABLE (  
    temorowid BIGINT,   
    rowid INT,   
    accessionno VARCHAR(10),   
    actualgrpid INT,   
    grpid VARCHAR(10),   
    firstlvlseq INT,   
    grpcontentseq INT,   
    innercontentseq INT,   
    invid BIGINT,   
    parentgrpid BIGINT,   
    rootgroupid VARCHAR(10),   
    deptname VARCHAR(255),   
    valuesgrpid BIGINT,   
    groupname VARCHAR(255),   
    investigationvalueid BIGINT,   
    NAME VARCHAR(500),   
    value VARCHAR(1),   
    sequenceno INT,   
    methodname VARCHAR(500),   
    notes VARCHAR(max),   
    referencerange VARCHAR(max),   
    sampleid BIGINT,   
    samplename VARCHAR(500),   
    technicalremarks VARCHAR(255),   
    units VARCHAR(100),   
    patternid BIGINT,   
    patternname VARCHAR(200),   
    deptid BIGINT,   
    validationtext VARCHAR(max),   
    isabnormal VARCHAR(50),   
    invvalidationtext VARCHAR(max),   
    [medicalremarks] [NVARCHAR](max),   
    resultvaluetype NVARCHAR(200),   
    decimalplaces VARCHAR(20),   
    pkgid INT,   
    packagename VARCHAR(255),   
    rootgrpname VARCHAR(250),   
    result VARCHAR(max),   
    attgroupid BIGINT,   
    parentgrpname VARCHAR(250),   
    isnonreportable CHAR(1),   
    childprintseparately CHAR(1),   
    approvedby BIGINT,   
    approvername NVARCHAR(500),   
    approverqualification NVARCHAR(500),   
    childpagenumber INT,   
    parentprintseparately CHAR(1),   
    parentpagenumber INT,   
    isgroup CHAR(1),   
    authorizedby BIGINT,   
    authorizername NVARCHAR(500),   
    authorizerqualification NVARCHAR(500),   
    secondauthorizedby BIGINT,   
    secondauthorizername NVARCHAR(500),   
    secondauthorizerqualification NVARCHAR(500),   
    deptprintseparately CHAR(1),   
    deptpagenumber INT,   
    patientvisiid BIGINT,   
    isrejected CHAR(1),   
    iswithheld CHAR(1),   
    retestrecheck NVARCHAR(20),   
    convreferencerange VARCHAR(max),   
    convvalue VARCHAR(50),   
    uid VARCHAR(255),   
    convuomcode VARCHAR(50),   
    codename VARCHAR(100),   
    subgroupinterpretation NVARCHAR(max),   
    printablerange VARCHAR(max),   
    isdeptheader CHAR(10),   
    deptmentname VARCHAR(200),   
    coauthorizedby BIGINT,   
    coauthorizername NVARCHAR(500),   
    coauthorizerqualification NVARCHAR(500),   
    coauthorizersignature VARBINARY(max),   
    isinterpretation INT,   
    labno VARCHAR(100),   
    labresult VARCHAR(100),   
    deptleveltrend CHAR(1)  
  ) INSERT INTO @TBLTEMPORDINVEXPLODEDRESULTORDERBYROWID_TEMP   
SELECT   
  *   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
  Isnull(pkgid, 0) <> 0   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  rootgroupid = parentgrpid   
WHERE   
  Isnull(pkgid, 0) <> 0   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  rootgroupid = Isnull(invid, parentgrpid)   
WHERE   
  Isnull(pkgid, 0) <> 0   
  AND grpid = 0 --select * from @tblTempOrdInvExplodedResultOrderbyRowID                                                                              
  DECLARE @tblRootID TABLE (  
    rootid BIGINT,   
    sequenceno INT,   
    parentprintseparately CHAR(1),   
    pkgid BIGINT  
  )   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  pkgid = 0   
WHERE   
  pkgid IS NULL   
  OR pkgid = '' INSERT INTO @tblRootID   
SELECT   
  DISTINCT T.rootgroupid,   
  Max(T.rowid) AS SequenceNo,   
  Max(T.parentprintseparately) AS ParentPrintSeparately,   
  pkgid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN investigationorgmapping IOM WITH (nolock) ON IOM.investigationid = T.invid   
  AND IOM.orgid = @OrgID   
WHERE   
  T.isgroup = 'N'   
GROUP BY   
  T.rootgroupid,   
  T.pkgid   
ORDER BY   
  sequenceno INSERT INTO @tblRootID   
SELECT   
  DISTINCT T.rootgroupid,   
  Max(T.rowid) AS SequenceNo,   
  Max(T.parentprintseparately) AS ParentPrintSeparately,   
  pkgid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = T.rootgroupid   
  AND IOG.orgid = @OrgID   
WHERE   
  T.isgroup != 'N'   
GROUP BY   
  T.rootgroupid,   
  pkgid   
ORDER BY   
  sequenceno INSERT INTO @tblRootID   
SELECT   
  DISTINCT T.rootgroupid,   
  Max(T.rowid) AS SequenceNo,   
  Max(T.parentprintseparately) AS ParentPrintSeparately,   
  pkgid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN investigationorgmapping IOM WITH (nolock) ON IOM.investigationid = T.rootgroupid   
  AND IOM.orgid = @OrgID   
WHERE   
  T.grpid = 0   
  AND Isnull(T.pkgid, 0) <> 0   
GROUP BY   
  T.rootgroupid,   
  pkgid   
ORDER BY   
  sequenceno --select * from @tblRootID                                                                                                           
  DECLARE @tblParentID TABLE (parentid BIGINT, sequenceno INT) DECLARE @tblGroupChildList TABLE (  
    childprintseparately CHAR(1),   
    sequenceno INT  
  ) DECLARE @ParentID BIGINT DECLARE @ChildID INT DECLARE @ChildPrintSeparately CHAR(1) DECLARE @ParentPrintSeparately NVARCHAR(10) DECLARE @ParentPageNumber INT DECLARE @ChildPageNumber INT   
SET   
  @ParentPageNumber = 1   
SET   
  @ChildPageNumber = 1 DECLARE @RootID BIGINT DECLARE @PKGID BIGINT   
UPDATE   
  t   
SET   
  t.rootgroupid = T1.rootgroupid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN @tblTempOrdInvExplodedResultOrderbyRowID T1 ON T1.rowid = T.rowid   
  /* Start : Using While Instead Of invdetailcursor Cursor */  
SET   
  @MinRno = 1   
SET   
  @MaxRno = (  
    SELECT   
      Count(rootid)   
    FROM   
      @tblRootID  
  ) WHILE (@MinRno <= @MaxRno) BEGIN   
SELECT   
  @RootID = rootid,   
  @PKGID = pkgid   
FROM   
  (  
    SELECT   
      rootid,   
      pkgid,   
      Row_number() OVER (  
        ORDER BY   
          sequenceno  
      ) AS ID   
    FROM   
      @tblRootID  
  ) t   
WHERE   
  id = @MinRno   
SELECT   
  @ParentPrintSeparately = parentprintseparately   
FROM   
  @tblRootID   
WHERE   
  rootid = @RootID   
  AND pkgid = @PKGID IF (@ParentPrintSeparately = 'Y') BEGIN   
SET   
  @ParentPageNumber = @ParentPageNumber + 1   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  parentpagenumber = @ParentPageNumber   
WHERE   
  rootgroupid = @RootID   
  AND pkgid = @PKGID   
SET   
  @ParentPageNumber = @ParentPageNumber + 1 END ELSE BEGIN   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  parentpagenumber = @ParentPageNumber   
WHERE   
  rootgroupid = @RootID   
  AND pkgid = @PKGID END INSERT INTO @tblParentID   
SELECT   
  DISTINCT parentgrpid,   
  Max(rowid) AS SequenceNo   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
  rootgroupid = @RootID   
  AND pkgid = @PKGID   
GROUP BY   
  parentgrpid   
ORDER BY   
  sequenceno   
  /* Start : Using While Instead Of grpdetailcursor Cursor */  
SET   
  @MinRno1 = 1   
SET   
  @MaxRno1 = (  
    SELECT   
      Count(parentid)   
    FROM   
      @tblParentID  
  ) WHILE (@MinRno1 < = @MaxRno1) BEGIN   
SELECT   
  @ParentID = parentid   
FROM   
  (  
    SELECT   
      parentid,   
      Row_number() OVER (  
        ORDER BY   
          sequenceno  
      ) AS ID   
    FROM   
      @tblParentID  
  ) t   
WHERE   
  id = @MinRno1 INSERT INTO @tblGroupChildList (  
    childprintseparately, sequenceno  
  )   
SELECT   
  childprintseparately,   
  rowid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
WHERE   
rootgroupid = @RootID   
  AND pkgid = @PKGID   
  AND parentgrpid = @ParentID   
  /* Start : Using While Instead Of grpchilddetailcursor Cursor */  
SET   
  @MinRNo2 = 1   
SET   
  @MaxRNo2 = (  
    SELECT   
      Count(sequenceno)   
    FROM   
      @tblGroupChildList  
  ) WHILE (@MinRNo2 < = @MaxRNo2) BEGIN   
SELECT   
  @ChildID = sequenceno   
FROM   
  (  
    SELECT   
      sequenceno,   
      Row_number() OVER (  
        ORDER BY   
          sequenceno  
      ) AS ID   
    FROM   
      @tblGroupChildList  
  ) t   
WHERE   
  id = @MinRNo2   
SELECT   
  @ChildPrintSeparately = childprintseparately   
FROM   
  @tblGroupChildList   
WHERE   
  sequenceno = @ChildID IF (@ChildPrintSeparately = 'Y') BEGIN   
SET   
  @ChildPageNumber = @ChildPageNumber + 1   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  childpagenumber = @ChildPageNumber   
WHERE   
  rootgroupid = @RootID   
  AND parentgrpid = @ParentID   
  AND rowid = @ChildID   
  AND pkgid = @PKGID   
SET   
  @ChildPageNumber = @ChildPageNumber + 1 END ELSE BEGIN   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  childpagenumber = @ChildPageNumber   
WHERE   
  rootgroupid = @RootID   
  AND parentgrpid = @ParentID   
  AND rowid = @ChildID   
  AND pkgid = @PKGID END   
SET   
  @MinRNo2 = @MinRNo2 + 1 END   
  /* End : Using While Instead Of grpchilddetailcursor Cursor */  
SET   
  @MinRno1 = @MinRno1 + 1 END   
  /* End : Using While Instead Of grpdetailcursor Cursor */  
SET   
  @MinRno = @MinRno + 1 END   
  /* End : Using While Instead Of invdetailcursor Cursor */  
  --     DECLARE invdetailcursor CURSOR FOR        
  --       SELECT rootid,        
  --              pkgid        
  --       FROM   @tblRootID        
  --       ORDER  BY sequenceno        
  --     OPEN invdetailcursor        
  --     FETCH next FROM invdetailcursor INTO @RootID, @PKGID        
  --     WHILE @@FETCH_STATUS = 0        
  --       BEGIN        
  --     SELECT @ParentPrintSeparately = parentprintseparately        
  -- FROM   @tblRootID        
  --WHERE  rootid = @RootID        
  --                 AND pkgid = @PKGID        
  --           IF( @ParentPrintSeparately = 'Y' )        
  --             BEGIN        
  --                 SET @ParentPageNumber = @ParentPageNumber + 1        
  --                 UPDATE @tblTempOrdInvExplodedResultOrderbyRowID        
  --                 SET    parentpagenumber = @ParentPageNumber        
  --        WHERE  rootgroupid = @RootID        
  --                        AND pkgid = @PKGID        
  --           SET @ParentPageNumber = @ParentPageNumber + 1        
  --             END        
  --           ELSE        
  --             BEGIN        
  --                 UPDATE @tblTempOrdInvExplodedResultOrderbyRowID        
  --                 SET    parentpagenumber = @ParentPageNumber        
  --                 WHERE  rootgroupid = @RootID        
  --                        AND pkgid = @PKGID        
  --             END        
  --           INSERT INTO @tblParentID        
  --           SELECT DISTINCT parentgrpid,        
  --               Max(rowid) AS SequenceNo        
  --           FROM   @tblTempOrdInvExplodedResultOrderbyRowID        
  --           WHERE  rootgroupid = @RootID        
  --                  AND pkgid = @PKGID        
  --           GROUP  BY parentgrpid        
  --    ORDER  BY sequenceno        
  --           /* Start : Using While Instead Of grpdetailcursor Cursor */        
  --  SET @MinRno1 = 1        
  --  SET @MaxRno1 = ( SELECT Count(parentid) FROM @tblParentID )      
  --  While ( @MinRno1 < = @MaxRno1 )        
  --       Begin        
  --         Select @ParentID = parentid from        
  --             (        
  --              SELECT parentid,ROW_NUMBER() Over(Order by sequenceno) as ID FROM @tblParentID      
  --             ) t where ID = @MinRno1        
  --      INSERT INTO @tblGroupChildList        
  --                             (childprintseparately,        
  --                              sequenceno)        
  --                 SELECT childprintseparately,        
  --                        rowid        
  --                 FROM   @tblTempOrdInvExplodedResultOrderbyRowID        
  --                 WHERE  rootgroupid = @RootID        
  --                        AND pkgid = @PKGID        
  --     AND parentgrpid = @ParentID        
  --      /* Start : Using While Instead Of grpchilddetailcursor Cursor */        
  --      SET @MinRNo2 = 1        
  --      SET @MaxRNo2 = ( SELECT Count(sequenceno) FROM   @tblGroupChildList )        
  --      While ( @MinRNo2 < = @MaxRNo2 )        
  --        Begin        
  --       Select @ChildID = sequenceno from         
  --                (        
  --                SELECT sequenceno,ROW_NUMBER() Over(Order by sequenceno) as ID         
  -- FROM @tblGroupChildList         
  --                ) t where ID = @MinRNo2        
  --       SELECT @ChildPrintSeparately = childprintseparately        
  --      FROM   @tblGroupChildList        
  --      WHERE  sequenceno = @ChildID        
  --       IF( @ChildPrintSeparately = 'Y' )        
  --        BEGIN        
  --         SET @ChildPageNumber = @ChildPageNumber + 1        
  --         UPDATE @tblTempOrdInvExplodedResultOrderbyRowID      
  --         SET    childpagenumber = @ChildPageNumber        
  --         WHERE  rootgroupid = @RootID        
  --          AND parentgrpid = @ParentID        
  --          AND rowid = @ChildID        
  --          AND pkgid = @PKGID        
  --         SET @ChildPageNumber = @ChildPageNumber + 1        
  --        END        
  --      ELSE        
  --        BEGIN        
  --         UPDATE @tblTempOrdInvExplodedResultOrderbyRowID        
  --         SET    childpagenumber = @ChildPageNumber        
  --         WHERE  rootgroupid = @RootID        
  --        AND parentgrpid = @ParentID        
  --          AND rowid = @ChildID        
  --          AND pkgid = @PKGID        
  --        END             
  --       Set  @MinRNo2 = @MinRNo2 + 1        
  --        End       
  --      /* End : Using While Instead Of grpchilddetailcursor Cursor */        
  --      SET @MinRno1 = @MinRno1 +1               
  --    End        
  --  /* End : Using While Instead Of grpdetailcursor Cursor */        
  --     --      DECLARE grpdetailcursor CURSOR FOR        
  --     --        SELECT parentid        
  --     --        FROM   @tblParentID        
  --     --        ORDER  BY sequenceno        
  --     --      OPEN grpdetailcursor        
  --     --      FETCH next FROM grpdetailcursor INTO @ParentID        
  --     --      WHILE @@FETCH_STATUS = 0        
  --     --        BEGIN        
  --     --            INSERT INTO @tblGroupChildList        
  --     --                        (childprintseparately,        
  --     --      sequenceno)        
  --     --            SELECT childprintseparately,        
  --     --                   rowid        
  --     --            FROM   @tblTempOrdInvExplodedResultOrderbyRowID        
  -- --           WHERE  rootgroupid = @RootID        
  --     --                   AND pkgid = @PKGID        
  --     --  AND parentgrpid = @ParentID        
  --     --            /* Start : Using While Instead Of grpchilddetailcursor Cursor */       
  --     --SET @MinRNo2 = 1        
  --     --SET @MaxRNo2 = ( SELECT Count(sequenceno) FROM   @tblGroupChildList )    
  --     --While ( @MinRNo2 < = @MaxRNo2 )   
  --     --                 Begin        
  --     -- Select @ChildID = sequenceno from         
  --     --          (        
  --     --          SELECT sequenceno,ROW_NUMBER() Over(Order by sequenceno) as ID         
  --     --           FROM @tblGroupChildList      
  -- --          ) t where ID = @MinRNo2        
  --     -- SELECT @ChildPrintSeparately = childprintseparately        
  --     --                  FROM   @tblGroupChildList        
  --     --                  WHERE  sequenceno = @ChildID        
  --     --             IF( @ChildPrintSeparately = 'Y' )        
  --     --           BEGIN    
  --     --                        SET @ChildPageNumber = @ChildPageNumber + 1        
  --     --                        UPDATE @tblTempOrdInvExplodedResultOrderbyRowID        
  --     --          SET    childpagenumber = @ChildPageNumber        
  --     --                        WHERE  rootgroupid = @RootID        
  --     --                               AND parentgrpid = @ParentID        
  --     --                               AND rowid = @ChildID        
  --     --                               AND pkgid = @PKGID        
  --     --                        SET @ChildPageNumber = @ChildPageNumber + 1       
  --     --                    END        
  --     --                  ELSE        
  --     --                    BEGIN        
  --     --                        UPDATE @tblTempOrdInvExplodedResultOrderbyRowID        
  --     --                        SET    childpagenumber = @ChildPageNumber        
  --     --                        WHERE  rootgroupid = @RootID        
  --     --                               AND parentgrpid = @ParentID        
  --     --                               AND rowid = @ChildID        
  --     --                               AND pkgid = @PKGID        
  --     --                    END             
  --     --    Set  @MinRNo2 = @MinRNo2 + 1        
  --     --  End        
  --     --/* End : Using While Instead Of grpchilddetailcursor Cursor */        
  --     --            --DECLARE grpchilddetailcursor CURSOR FOR        
  --     --            --  SELECT sequenceno        
  --     --            --  FROM   @tblGroupChildList        
  --     --            --  ORDER  BY sequenceno        
  --     --            --OPEN grpchilddetailcursor        
  --     --            --FETCH next FROM grpchilddetailcursor INTO @ChildID        
  --     --            --WHILE @@FETCH_STATUS = 0        
  --     --            --  BEGIN        
  --     --            --      SELECT @ChildPrintSeparately = childprintseparately        
  --     --            --      FROM   @tblGroupChildList        
  --     --            --      WHERE  sequenceno = @ChildID        
  --     --            --     IF( @ChildPrintSeparately = 'Y' )        
  --     --            --        BEGIN        
  --     --            --            SET @ChildPageNumber = @ChildPageNumber + 1        
  --     --            --            UPDATE @tblTempOrdInvExplodedResultOrderbyRowID        
  --     --            --            SET    childpagenumber = @ChildPageNumber        
  --     --            --            WHERE  rootgroupid = @RootID        
  --     --            --                   AND parentgrpid = @ParentID        
  --     --            --                   AND rowid = @ChildID        
  --     --            --  AND pkgid = @PKGID        
  --     --    --            SET @ChildPageNumber = @ChildPageNumber + 1        
  --     --            --        END        
  --     --            --      ELSE        
  --     --            --        BEGIN        
  --     --            --            UPDATE @tblTempOrdInvExplodedResultOrderbyRowID        
  -- --            --            SET  childpagenumber = @ChildPageNumber        
  --     --            --            WHERE  rootgroupid = @RootID        
  --     --            --                   AND parentgrpid = @ParentID        
  --     --            --        AND rowid = @ChildID        
  --     --           --      AND pkgid = @PKGID        
  --     --            --        END        
  --     --            --      FETCH next FROM grpchilddetailcursor INTO @ChildID        
  --     --            --  END        
  --     --            --DELETE FROM @tblGroupChildList        
  --    --     --CLOSE grpchilddetailcursor        
  --     --            --DEALLOCATE grpchilddetailcursor        
  --     --            FETCH next FROM grpdetailcursor INTO @ParentID        
  --     --        END        
  --     --      CLOSE grpdetailcursor        
  --     --      DEALLOCATE grpdetailcursor        
  --    FETCH next FROM invdetailcursor INTO @RootID, @PKGID        
  -- END        
  --     CLOSE invdetailcursor        
  --     DEALLOCATE invdetailcursor        
  ----------                
UPDATE   
  t   
SET   
  t.rootgroupid = t1.rootgroupid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID t   
  INNER JOIN @TBLTEMPORDINVEXPLODEDRESULTORDERBYROWID_TEMP t1 ON t.temorowid = t1.temorowid   
  AND t.pkgid = t1.pkgid   
WHERE   
  Isnull(t.pkgid, 0) <> 0   
UPDATE   
  t   
SET   
  t.rootgroupid = t1.rootgroupid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID t   
  INNER JOIN @TBLTEMPORDINVEXPLODEDRESULTORDERBYROWID_TEMP t1 ON t.temorowid = t1.temorowid   
  AND t.pkgid = t1.pkgid   
WHERE   
  Isnull(t.pkgid, 0) <> 0   
  AND t.grpid = 0 ----------------------------------------------------approver------------------   
UPDATE   
  t   
SET   
  t.approvername = Upper(  
    Isnull(S.titlename, '')  
  ) + ' ' + U.NAME,   
  t.approverqualification = U.qualification   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN login L WITH (nolock) ON L.loginid = T.approvedby   
  INNER JOIN users U WITH (nolock) ON U.loginid = L.loginid   
  AND U.OrgID = @OrgID   
  LEFT JOIN salutation S WITH (nolock) ON S.titleid = U.titlecode ----------------------------------------------------first authorized------------------   
UPDATE   
  t   
SET   
  t.authorizername = Upper(  
    Isnull(S.titlename, '')  
  ) + ' ' + U.NAME,   
  t.authorizerqualification = U.qualification   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN login L WITH (nolock) ON L.loginid = T.authorizedby   
  INNER JOIN users U WITH (nolock) ON U.loginid = L.loginid   
  AND U.OrgID = @OrgID   
  LEFT JOIN salutation S WITH (nolock) ON S.titleid = U.titlecode ----------------------------------------------------second authorized------------------   
UPDATE   
  t   
SET   
  t.secondauthorizername = Upper(  
    Isnull(S.titlename, '')  
  ) + ' ' + U.NAME,   
  t.secondauthorizerqualification = U.qualification   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN login L WITH (nolock) ON L.loginid = T.secondauthorizedby   
  INNER JOIN users U WITH (nolock) ON U.loginid = L.loginid   
  AND U.OrgID = @OrgID   
  LEFT JOIN salutation S WITH (nolock) ON S.titleid = U.titlecode ------------------------------------------------------co authorizer----------------------------------    
UPDATE   
  t   
SET   
  t.coauthorizername = Upper(  
    Isnull(S.titlename, '')  
  ) + ' ' + U.NAME,   
  t.coauthorizerqualification = U.qualification,   
  t.coauthorizerimagesource = l.imagesource   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN login L WITH (nolock) ON L.loginid = T.coauthorizedby   
  INNER JOIN users U WITH (nolock) ON U.loginid = L.loginid   
  AND U.OrgID = @OrgID   
  LEFT JOIN salutation S WITH (nolock) ON S.titleid = U.titlecode ---------------------------------------------------------------------------------------------------------   
UPDATE   
  t   
SET   
  packagename = OI.pkgname   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN orderedinvestigations OI WITH (nolock) ON OI.accessionnumber = T.accessionno   
WHERE   
  OI.orgid = @OrgID   
  AND OI.visitid = @pVisitID   
  AND Isnull(OI.pkgname, '') <> ''   
  /***Code End***/  

   DECLARE @hypenvalidation NVARCHAR(1)  
 SELECT @hypenvalidation = ConfigValue  
 FROM configorgmaster a  
 INNER JOIN configkeymaster b ON a.configkeyid = b.configkeyid  
 AND a.orgid = @orgid  
 AND configkey = 'hyphenvalidation'  
 IF (@hypenvalidation = 'Y')  
 BEGIN  
 DELETE T  
 FROM @tblTempOrdInvExplodedResultOrderbyRowID T  
 WHERE Result = '-'  
 DELETE T  
 FROM @tblTempOrdInvExplodedResultOrderbyRowID T  
 WHERE Result = '--'  
 END  
  DECLARE @ClientId BIGINT DECLARE @ClientTempTable TABLE (  
    blockfrom DATETIME,   
    blockto DATETIME,   
 status CHAR(10)  
  )   
SELECT   
  @ClientId = VCM.clientid   
FROM   
  patient P   
  INNER JOIN patientvisit PV(nolock) ON P.patientid = PV.patientid   
  INNER JOIN visitclientmapping VCM WITH (nolock) ON VCM.visitid = pv.patientvisitid   
WHERE   
  VCM.visitid = @pVisitID   
  AND VCM.orgid = @OrgID   
  AND Vcm.isactive IS NULL --select @ClientId                                      
  INSERT INTO @ClientTempTable   
SELECT   
  cm.blockfrom,   
  cm.blockto,   
  CM.status   
FROM   
  clientmaster CM WITH (nolock)   
WHERE   
  CM.clientid = @ClientId   
  AND cm.orgid = @OrgID   
  AND CM.status = 'S' DECLARE @Cstatus CHAR(10)   
SELECT   
  @Cstatus = status   
FROM   
  @ClientTempTable IF (  
    Isnull(@Cstatus, '') = ''  
  )   
SET   
  @Cstatus = 'XX' DECLARE @tempResult TABLE (  
    rowid INT,   
    NAME VARCHAR(500),   
    result VARCHAR(max),   
    units VARCHAR(100),   
    description VARCHAR(255),   
    referencerange VARCHAR(max),   
    investigationid BIGINT,   
    methodname VARCHAR(500),   
    notes VARCHAR(max),   
    samplename VARCHAR(500),   
    isabnormal VARCHAR(50),   
    medicalremarks VARCHAR(max),   
    refrangesuffixtest VARCHAR(1),   
    deptid BIGINT,   
    grpid BIGINT,   
    isnonreportable CHAR(1),   
    approvedby BIGINT,   
    approvername NVARCHAR(500),   
    approverqualification NVARCHAR(500),   
    rootgroupid BIGINT,   
    parentgrpid BIGINT,   
    deptprintseparately CHAR(1),   
    deptpagenumber INT,   
    parentprintseparately CHAR(1),   
    parentpagenumber INT,   
    childprintseparately CHAR(1),   
    childpagenumber INT,   
    authorizedby BIGINT,   
    authorizername NVARCHAR(500),   
    authorizerqualification NVARCHAR(500),   
    secondauthorizedby BIGINT,   
    secondauthorizername NVARCHAR(500),   
    secondauthorizerqualification NVARCHAR(500),   
    patientvisiid BIGINT,   
    packagename VARCHAR(255),   
    applicationurl NVARCHAR(max),   
    isrejected CHAR(1),   
    iswithheld CHAR(1),   
    recheckretest NVARCHAR(20),   
    convreferencerange NVARCHAR(max),   
    convvalue VARCHAR(50),   
    convuomcode VARCHAR(50),   
    codename VARCHAR(100),   
    subgroupinterpretation VARCHAR(max),   
    printablerange VARCHAR(max),   
    isdeptheader CHAR(10),   
    deptmentname VARCHAR(200),   
    coauthorizedby BIGINT,   
    coauthorizername NVARCHAR(500),   
    coauthorizerqualification NVARCHAR(500),   
    coauthorizersignature VARBINARY(max),   
    isinterpretation INT,   
    labno VARCHAR(100),   
    labresult VARCHAR(100),   
    deptleveltrend CHAR(1)  
  ) --select @Cstatus                                                                                                          
  DECLARE @ApplicationURL NVARCHAR(max)   
SELECT   
  @ApplicationURL = COM.configvalue   
FROM   
  configorgmaster COM(nolock)   
  INNER JOIN configkeymaster CKM WITH (nolock) ON CKM.configkeyid = COM.configkeyid   
WHERE   
  CKM.configkey = 'ApplicationURL'   
  AND COM.orgid = @OrgID   
SET   
  @ApplicationURL = Isnull(@ApplicationURL, '') + '/Images/Signature/ID'   
UPDATE   
  t   
SET   
  t.codename = CM.codename   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID t   
  INNER JOIN codemapper CMP WITH (nolock) ON CMP.identifyingid = t.grpid   
  AND CMP.identifyingtype = 'GRP'   
  INNER JOIN codemaster CM WITH (nolock) ON Cm.codemasterid = CMP.codemasterid   
WHERE   
  CM.codeschemeid = 1   
UPDATE   
  t   
SET   
  t.subgroupinterpretation = IOG.groupinterpretation   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.orggroupid = T.grpid -- AND T.RootGroupID<>T.ParentGrpID                                                                    
WHERE   
  IOG.orgid = @OrgID   
  AND Isnull(invid, '') <> ''   
  AND Isnull(patientvisiid, '') <> ''   
  AND Isnull(isnonreportable, 'N') <> 'Y' DECLARE @tblSubGroupInterpretation AS TABLE (  
    sno BIGINT IDENTITY(1, 1),   
    rootgroupid BIGINT,   
    accessionno BIGINT,   
    rowid INT,   
    groupid BIGINT,   
    groupinterpretation VARCHAR(max)  
  ) INSERT INTO @tblSubGroupInterpretation   
SELECT   
  rootgroupid,   
  accessionno,   
  Max(rowid),   
  grpid,   
  subgroupinterpretation   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID   
GROUP BY   
  rootgroupid,   
  accessionno,   
  grpid,   
  subgroupinterpretation   
HAVING   
  (subgroupinterpretation <> '')   
UPDATE   
  t   
SET   
  subgroupinterpretation = ''   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
WHERE   
  t.rowid NOT IN (  
    SELECT   
      rowid   
    FROM   
      @tblSubGroupInterpretation  
  )   
UPDATE   
  @tblTempOrdInvExplodedResultOrderbyRowID   
SET   
  retestrecheck = ''   
UPDATE   
  t   
SET   
  samplename = ''   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN investigationorgmapping IOM WITH (nolock) ON IOM.investigationid = T.invid   
WHERE   
  IOM.orgid = @OrgID   
  AND IOM.outputinvestigationcode IN ('WithOutSample')   
UPDATE   
  t   
SET   
  samplename = ''   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.orggroupid = T.grpid   
WHERE   
  IOG.orgid = @OrgID   
  AND IOG.outputgroupingcode IN ('WithOutSample') DELETE t   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = t.rootgroupid   
  INNER JOIN invgroupmaster IGM(nolock) ON IGM.groupid = IOG.attgroupid   
  INNER JOIN codemapper CMP(nolock) ON CMP.identifyingid = IOG.orggroupid   
  INNER JOIN codemaster CM(nolock) ON CM.codemasterid = CMP.codemasterid   
  AND CM.codetype = 'PKG'   
  AND CM.codeschemeid = 1   
WHERE   
  IOG.orgid = @OrgID   
  AND IOG.outputgroupingcode IN ('SPKG')   
  AND t.NAME LIKE '%<b>#</b>%'   
  AND t.packagename <> '' --and  T.groupname IS NULL        
  AND t.rootgrpname <> ''   
UPDATE   
  t   
SET   
  t.NAME = '<B><I><U>Haemogram</U></I></B>'   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
WHERE   
  NAME = '<B><I><U>CBC Haemogram</U></I></B>'   
UPDATE   
  t   
SET   
  t.patternid = 0   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN investigationorgmapping IOM WITH (nolock) ON IOM.investigationid = T.invid   
WHERE   
  IOM.orgid = @OrgID   
  AND IOM.outputinvestigationcode IN ('NoPattern')   
UPDATE   
  t   
SET   
  t.patternid = 0   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN investigationorgattributes IOM WITH (nolock) ON IOM.investigationid = T.invid   
WHERE   
  Isnull(IOM.resultvaluetype, '') = 'NTS'   
  AND IOM.orgid = @OrgID --SELECT * FROM       @tblTempOrdInvExplodedResultOrderbyRowID                     
  --return                     
UPDATE   
  t   
SET   
  result = dbo.[Udf_titlecase](result)   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = T.parentgrpid   
WHERE   
  IOG.orgid = @OrgID   
  AND IOG.outputgroupingcode IN ('TitleCase')   
  AND result IS NOT NULL   
UPDATE   
  t   
SET   
  result = dbo.[Udf_titlecase](result)   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID T   
  INNER JOIN invorggroup IOG WITH (nolock) ON IOG.attgroupid = T.rootgroupid   
WHERE   
  IOG.orgid = @OrgID   
  AND IOG.outputgroupingcode IN ('TitleCase')   
  AND result IS NOT NULL --              UPDATE T SET T.parentpageNumber=NULL,T.ChildpageNumber=NULL,ParentPrintSeparately='N',ChildPrintSeparately=NULL                                   
  --From @tblTempOrdInvExplodedResultOrderbyRowID T where --Name Like'%%' OR                    
  --Name LIKE '%%' AND isnull(T.PackageName,'')<>'' and isnull(T.grpid,0)=0                   
  --    UPDATE T SET T.parentpageNumber=NULL,T.ChildpageNumber=NULL,ParentPrintSeparately='N',ChildPrintSeparately=NULL                                   
  --From @tblTempOrdInvExplodedResultOrderbyRowID T where --Name Like'%%' OR                    
  --Name LIKE '%%' AND isnull(T.PackageName,'')<>'' and isnull(T.grpid,0)=0          
  DECLARE @TblDeptGrphs AS TABLE (  
    rnkid BIGINT IDENTITY(1, 1),   
    temmorowid BIGINT,   
    deptid INT  
  )  DECLARE @DeptleveltrendConfigkey CHAR(1)   
SELECT   
  @DeptleveltrendConfigkey = configvalue   
FROM   
  configorgmaster COM(nolock)   
  INNER JOIN configkeymaster CKM(nolock) ON CKM.configkeyid = COM.configkeyid   
WHERE   
  CKM.configkey = 'DeptLevelTrend'   
  AND COM.orgid = @OrgID --  Select @DeptleveltrendConfigkey   
  DECLARE @MinRowN1 BIGINT,   
  @MaxRowN1 BIGINT,   
  @Temorowid BIGINT   
 DECLARE @Trend CHAR(1) Declare @dep bigint   
SET   
  @dep = (  
    SELECT   
      TOP(1) DeptID   
    FROM   
      @tblInvestigationValues Temp   
      INNER JOIN investigationorgmapping ION ON Temp.investigationid = ION.investigationid   
    WHERE   
      ION.trend = 1  
  )   
SET   
  @Trend = (  
    SELECT   
      TOP(1) trend   
    FROM   
      @tblInvestigationValues Temp   
      INNER JOIN investigationorgmapping ION ON Temp.investigationid = ION.investigationid   
    WHERE   
      ION.trend = 1  
  ) DECLARE @IsServiceRequest CHAR(1) = 'Y' DECLARE @Patientid BIGINT DECLARE @PatientNumber VARCHAR(30) DECLARE @VisitCount INT = 0 CREATE TABLE #investigationids   
  (  
    investigationid BIGINT,   
    sequenceno INT,   
    referencerange VARCHAR(max)  
  ) CREATE TABLE #previousvisits   
  (  
    visitid BIGINT,   
    investigationid BIGINT,   
    value NVARCHAR(max),   
    visitdate DATETIME,   
    isarchive CHAR(1),   
    sequenceno INT,   
    NAME VARCHAR(500),   
    referencerange VARCHAR(max),   
    uomcode VARCHAR(50),   
    status VARCHAR(50)  
  ) DECLARE @TrendOrgConfig CHAR(1)   
SELECT   
  @TrendOrgConfig = configvalue   
FROM   
  configorgmaster WITH(nolock)   
WHERE   
  orgid = @OrgID   
  AND configkeyid IN(  
    SELECT   
      TOP 1 configkeyid   
    FROM   
      configkeymaster WITH(nolock)   
    WHERE   
      configkey = 'OrgLevelTrend'  
  ) IF (  
    Isnull(@TrendOrgConfig, 'N') = 'Y'  
  ) BEGIN   
SELECT   
  @Patientid = P.patientid,   
  @PatientNumber = P.patientnumber   
FROM   
  patientvisit(nolock) PV   
  INNER JOIN patient P WITH(nolock) ON P.patientid = PV.patientid   
WHERE   
  PV.patientvisitid = @pVisitID   
  AND PV.OrgID = @OrgID   
SELECT   
  @VisitCount = Count(PV.patientvisitid)   
FROM   
  patientvisit(nolock) PV   
  INNER JOIN patient P WITH(nolock) ON P.patientid = PV.patientid   
WHERE   
  P.patientnumber = @PatientNumber   
  AND PV.visitpurposeid = 3 IF(@VisitCount > 1) BEGIN IF(@IsServiceRequest = 'Y') BEGIN INSERT INTO #investigationids   
  (  
    investigationid, sequenceno, referencerange  
  )   
SELECT   
  DISTINCT Pinv.investigationid,   
  IOM.sequenceno,   
  PInv.referencerange   
FROM   
  patientinvestigation PInv (nolock)   
  INNER JOIN investigationorgmapping iom (nolock) ON Pinv.investigationid = iom.investigationid   
  AND Pinv.orgid = iom.orgid   
  AND Isnull(IOM.trend, 0) = 1   
  --and iom.DeptID = @dep   
  INNER JOIN orderedinvestigations OI (nolock) ON PInv.accessionnumber = OI.accessionnumber   
  AND OI.orgid = PInv.orgid   
  AND PInv.patientvisitid = OI.visitid   
  Inner join @tblResultSelectID tbl on OI.AccessionNumber = tbl.accessionno  
WHERE   
  PInv.patientvisitid = @pVisitID   
  AND OI.status NOT IN (  
    'Cancel', 'Retest', 'InActive', 'ForceClose',   
    'Recheck'  
  )   
  AND Isnull(PInv.statustype, '') NOT IN ('RR', 'RC')   
  AND PInv.status = 'Approve' END ELSE BEGIN INSERT INTO #investigationids   
  (  
    investigationid, sequenceno, referencerange  
  )   
SELECT   
  DISTINCT Pinv.investigationid,   
  IOM.sequenceno,   
  PInv.referencerange   
FROM   
  patientinvestigation PInv (nolock)   
  INNER JOIN investigationorgmapping iom (nolock) ON Pinv.investigationid = iom.investigationid   
  AND Pinv.orgid = iom.orgid   
  AND Isnull(IOM.trend, 0) = 1   
  AND iom.deptid = @DeptID   
  INNER JOIN orderedinvestigations OI (nolock) ON PInv.accessionnumber = OI.accessionnumber   
  AND OI.orgid = PInv.orgid   
  AND PInv.patientvisitid = OI.visitid   
  Inner Join @tblResultSelectID tbl on tbl.accessionno = OI.AccessionNumber  
WHERE   
  PInv.patientvisitid = @pVisitID   
  AND OI.status NOT IN (  
'Cancel', 'Retest', 'InActive', 'ForceClose',   
    'Recheck'  
  )   
  AND Isnull(PInv.statustype, '') NOT IN ('RR', 'RC') END END END IF EXISTS(  
    SELECT   
      1   
    FROM   
      #investigationids)   
      BEGIN IF(@IsServiceRequest = 'Y') BEGIN   
   INSERT INTO #previousvisits   
      (  
        visitid, investigationid, value, visitdate,   
        isarchive, sequenceno, NAME, referencerange,   
        uomcode, status  
      )   
    SELECT   
      DISTINCT Pv.patientvisitid,   
      Iv.investigationid,   
      Iv.value,   
      PV.visitdate,   
      'N',   
      I.sequenceno,   
      IV.NAME,   
      I.referencerange,   
      Iv.uomcode,   
      Iv.status   
    FROM   
      patient P WITH(nolock)   
      INNER JOIN patientvisit PV (nolock) ON P.patientid = PV.patientid   
      INNER JOIN investigationvalues Iv (nolock) ON PV.patientvisitid = Iv.patientvisitid   
      INNER JOIN #investigationids I (nolock)   
      ON iv.investigationid = I.investigationid   
    WHERE   
      P.patientnumber = @PatientNumber   
      AND iv.status NOT IN (  
        'Cancel', 'Retest', 'InActive', 'ForceClose',   
        'Recheck'  
      )   
      AND Isnumeric(  
        Substring(Iv.value, 0, 5)  
      ) = 1   
      AND Isnull(IV.statustype, '') NOT IN ('RR', 'RC') --AND Iv.Status = 'Approve'        
   and pv.PatientVisitId <@pVisitID  
   and @TemplateID in(92)  
      END   
   ELSE BEGIN INSERT INTO #previousvisits   
      (  
        visitid, investigationid, value, visitdate,   
        isarchive, sequenceno, NAME, referencerange,   
        uomcode, status  
      )   
    SELECT   
      DISTINCT Pv.patientvisitid,   
      Iv.investigationid,   
      Iv.value,   
      PV.visitdate,   
      'N',   
      I.sequenceno,   
      IV.NAME,   
      I.referencerange,   
      Iv.uomcode,   
      Iv.status   
    FROM   
      patient P WITH(nolock)   
      INNER JOIN patientvisit PV (nolock) ON P.patientid = PV.patientid   
      INNER JOIN investigationvalues Iv (nolock) ON PV.patientvisitid = Iv.patientvisitid   
      INNER JOIN #investigationids I (nolock)   
      ON iv.investigationid = I.investigationid   
    WHERE   
      P.patientnumber = @PatientNumber   
      AND iv.status NOT IN (  
        'Cancel', 'Retest', 'InActive', 'ForceClose',   
        'Recheck'  
      )   
      AND Isnull(IV.statustype, '') NOT IN ('RR', 'RC')   
      AND Isnumeric(  
        Substring(Iv.value, 0, 5)  
      ) = 1   
   and pv.PatientVisitId <@pVisitID  
   and @TemplateID in (92)  
   END IF EXISTS (  
        SELECT   
          1   
        FROM   
          patient P WITH(nolock)   
          INNER JOIN patientvisit PV (nolock) ON P.patientid = PV.patientid   
          INNER JOIN visit_archival VA (nolock) ON PV.patientvisitid = VA.visitid   
        WHERE   
          P.patientnumber = @PatientNumber  
      ) BEGIN IF(@IsServiceRequest = 'Y') BEGIN   
   INSERT INTO #previousvisits   
      (  
        visitid, investigationid, value, visitdate,   
        isarchive, sequenceno, NAME, referencerange,   
        uomcode, status  
      )   
    SELECT   
      DISTINCT Pv.patientvisitid,   
      Iv.investigationid,   
      Iv.value,   
      PV.visitdate,   
      'Y',   
      I.sequenceno,   
      Iv.NAME,   
      I.referencerange,   
      Iv.uomcode,   
      Iv.status   
    FROM   
      patient P WITH(nolock)   
      INNER JOIN patientvisit PV (nolock) ON P.patientid = PV.patientid   
      INNER JOIN investigationvalues_archival Iv (nolock) ON PV.patientvisitid = Iv.patientvisitid   
      INNER JOIN #investigationids I (nolock)   
      ON iv.investigationid = I.investigationid   
    WHERE   
      P.patientnumber = @PatientNumber   
      AND Isnumeric(  
        Substring(Iv.value, 0, 5)  
      ) = 1 --AND Iv.Status = 'Approve'        
      AND Isnull(IV.statustype, '') NOT IN ('RR', 'RC')   
   and pv.PatientVisitId <@pVisitID  
  and @TemplateID in(92)  
   END   
   ELSE   
   BEGIN   
   INSERT INTO #previousvisits   
      (  
        visitid, investigationid, value, visitdate,   
    isarchive, sequenceno, NAME, referencerange,   
        uomcode, status  
      )   
    SELECT   
      DISTINCT Pv.patientvisitid,   
      Iv.investigationid,   
      Iv.value,   
      PV.visitdate,   
      'Y',   
      I.sequenceno,   
      Iv.NAME,   
      I.referencerange,   
      Iv.uomcode,   
      Iv.status   
    FROM   
      patient P WITH(nolock)   
      INNER JOIN patientvisit PV (nolock) ON P.patientid = PV.patientid   
      INNER JOIN investigationvalues_archival Iv (nolock) ON PV.patientvisitid = Iv.patientvisitid   
      INNER JOIN #investigationids I (nolock)   
      ON iv.investigationid = I.investigationid   
    WHERE   
      P.patientnumber = @PatientNumber   
      AND Isnumeric(  
        Substring(Iv.value, 0, 5)  
      ) = 1   
   and pv.PatientVisitId <@pVisitID  
   and @TemplateID in(92)  
      AND Isnull(IV.statustype, '') NOT IN ('RR', 'RC') END END END;  
WITH cte AS (  
  SELECT   
    visitid,   
    investigationid,   
    value,   
    visitdate,   
    isarchive,   
    NAME,   
    referencerange,   
    uomcode,   
    status,   
    sequenceno,   
    Row_number() OVER (  
      partition BY investigationid   
      ORDER BY   
        visitdate DESC  
    ) AS Rno   
  FROM   
    #previousvisits)   
  SELECT   
    Dense_rank() OVER(  
      ORDER BY   
        sequenceno,   
        investigationid ASC  
    ) AS Row_Count,   
    Cast(visitdate AS DATE) AS VisitDate,   
    NAME,   
    value,   
    referencerange,   
    uomcode,   
    status,   
    investigationid AS InvestigationID,   
    visitid AS PatientVisitid,   
    sequenceno INTO #cte_table   
  FROM   
    cte   
  WHERE   
    rno < = 5   
  ORDER BY   
    sequenceno   
  SELECT   
    DISTINCT investigationid INTO #resulttable   
  FROM   
    #cte_table   
  GROUP BY   
    investigationid   
  HAVING   
    Count (investigationid) >= 1 DECLARE @PreviousVisitCount INT =(  
      SELECT   
        Count(1)   
      FROM   
        #cte_table   
      WHERE   
        investigationid  IN (  
          SELECT   
            DISTINCT investigationid   
          FROM   
            #resulttable))   
   INSERT INTO @TblDeptGrphs   
SELECT   
  Max(temorowid),   
  rid.deptid   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID RID   
  Inner Join #cte_table C On RID.invid = C.InvestigationID  
  INNER JOIN investigationorgmapping IOM ON RID.invid = iom.investigationid   
  AND RID.deptid = iom.deptid   
WHERE   
  IOM.trend = 1   
GROUP BY   
  rid.deptid DECLARE @dept TABLE (dept BIGINT, temorowid BIGINT) INSERT INTO @dept   
SELECT   
  rid.deptid,   
  Max(temorowid)   
FROM   
  @tblTempOrdInvExplodedResultOrderbyRowID RID   
GROUP BY   
  rid.deptid   
UPDATE   
  t   
SET   
  t.temmorowid = d.temorowid   
FROM   
  @TblDeptGrphs T   
  INNER JOIN @dept d ON T.deptid = d.dept  
  SET   
  @MinRowN1 = 1   
SELECT   
  @MaxRowN1 = rnkid   
FROM   
  @TblDeptGrphs  
            IF(  
              @DeptleveltrendConfigkey = 'Y'   
              AND @Trend = 1   
              AND @PreviousVisitCount >= 1  
            ) BEGIN WHILE (@MinRowN1 <= @MaxRowN1) BEGIN   
          SELECT   
            @Temorowid = temmorowid   
          FROM   
            @TblDeptGrphs   
          WHERE   
            rnkid = @MinRowN1 INSERT INTO @tblTempOrdInvExplodedResultOrderbyRowID (  
              rowid, NAME, result, units, technicalremarks,   
              referencerange, invid, methodname,   
              notes, samplename, isabnormal, medicalremarks,   
              deptid, grpid, isnonreportable, approvedby,   
              approvername, approverqualification,   
              rootgroupid, parentgrpid, deptprintseparately,   
              deptpagenumber, parentprintseparately,   
              parentpagenumber, childprintseparately,   
              childpagenumber, authorizedby, authorizername,   
              authorizerqualification, secondauthorizedby,   
              secondauthorizername, secondauthorizerqualification,   
              patientvisiid, packagename, isdeptheader,   
              deptmentname, coauthorizedby, coauthorizername,   
    coauthorizerqualification, coauthorizerimagesource,   
              isinterpretation, deptleveltrend  
            )   
          SELECT   
            (rowid) + 1,   
            '',   
            '',   
            '',   
            '',   
            '',   
            0,   
            '',   
            '',   
            '',   
            '',   
            '',   
            deptid,   
            0,   
            isnonreportable,   
            approvedby,   
            approvername,   
            approverqualification,   
            0,   
            0,   
            deptprintseparately,   
            deptpagenumber + 1,   
            parentprintseparately,   
            parentpagenumber + 1,   
            childprintseparately,   
            childpagenumber + 1,   
            authorizedby,   
            authorizername,   
            authorizerqualification,   
            secondauthorizedby,   
            secondauthorizername,   
            secondauthorizerqualification,   
            patientvisiid,   
            packagename,   
            isdeptheader,   
            deptmentname,   
            coauthorizedby,   
            coauthorizername,   
            coauthorizerqualification,   
            coauthorizerimagesource,   
            0,   
            'Y'   
          FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          WHERE   
            temorowid = @Temorowid   
          Order by   
            deptleveltrend -- Select 'a'   
          SET   
            @MinRowN1 = @MinRowN1 + 1 END --Select * from @TblDeptGrphs   
            --Update T set T.DeptLevelTrend='Y'   
            --FRom     @tblTempOrdInvExplodedResultOrderbyRowID T     
            --inner join @TblDeptGrphs   TT   
        --On T.temorowid=TT.temmorowid   
            END DECLARE @SymbolRow AS TABLE (  
              symbolrowid BIGINT, investigationid INT  
            ) INSERT INTO @SymbolRow   
          SELECT   
            rowid,   
            1   
          FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          WHERE   
            result LIKE '%##%' --update @tblTempOrdInvExplodedResultOrderbyRowID set isDeptHeader='Y'  where Name like '%%' and patternid is null      
            ---                        
            IF (@Cstatus <> 'S') BEGIN   
          DELETE FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          WHERE   
            rowid IN (  
              SELECT   
                symbolrowid   
              FROM   
                @SymbolRow  
            )   
          --UPDATE   
          --  @tblTempOrdInvExplodedResultOrderbyRowID   
          --SET   
          --  result = ''   
          --WHERE   
          --  result LIKE '%#%' --------------------------------------------------logic --------------------------------------------------   
            IF NOT EXISTS (  
              SELECT   
                coauthorizedby   
              FROM   
                @tblTempOrdInvExplodedResultOrderbyRowID   
              WHERE   
                coauthorizedby > 0  
            ) BEGIN   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            authorizedby = 0   
          WHERE   
            approvedby != authorizedby   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            secondauthorizedby = 0   
          WHERE   
            approvedby != secondauthorizedby   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            approvedby = 0,   
            approvername = '',   
            approverqualification = ''   
          WHERE   
            approvedby = authorizedby   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            approvedby = 0,   
            approvername = '',   
            approverqualification = ''   
          WHERE   
            approvedby = secondauthorizedby END ----------------------------------------------------------------   
            ELSE BEGIN   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            authorizedby = 0   
          WHERE   
            approvedby != authorizedby   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            secondauthorizedby = 0   
          WHERE   
            approvedby != secondauthorizedby   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            approvedby = 0,   
            approvername = '',   
            approverqualification = ''   
          WHERE   
            approvedby = authorizedby   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            approvedby = 0,   
            approvername = '',   
            approverqualification = ''   
          WHERE   
            approvedby = secondauthorizedby   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            authorizedby = coauthorizedby   
          WHERE   
            authorizername = coauthorizername   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            secondauthorizedby = coauthorizedby   
          WHERE   
            secondauthorizername = coauthorizername   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            approvedby = coauthorizedby,   
            approvername = coauthorizername,   
            approverqualification = coauthorizerqualification   
          WHERE   
            approvedby = 0   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            approvedby = 0,   
         approvername = '',   
            approverqualification = ''   
          WHERE   
            approvedby = authorizedby   
          UPDATE   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          SET   
            approvedby = 0,   
            approvername = '',   
            approverqualification = ''   
          WHERE   
            approvedby = secondauthorizedby END INSERT INTO @tblTempOrdInvExplodedResultOrderbyRowID1   
          SELECT   
            *   
          FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          UPDATE   
            tbl   
          SET   
            tbl.deptmentname = IDV.deptname,   
            isdeptheader = 'Y'   
          FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID Tbl   
            INNER JOIN invdeptmaster IDV ON Tbl.deptid = IDV.deptid   
            AND IDV.orgid = @OrgID   
            AND Tbl.deptmentname IS NULL   
          UPDATE   
            temp   
          SET   
            isinterpretation = 1   
    FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID TEMP   
            INNER JOIN (  
              SELECT   
                parentpagenumber,   
                childpagenumber,   
                deptpagenumber   
              FROM   
                @tblTempOrdInvExplodedResultOrderbyRowID T   
              WHERE   
                Isnull(notes, '') <> ''   
              GROUP BY   
                parentpagenumber,   
                childpagenumber,   
                deptpagenumber  
            ) C ON C.parentpagenumber = TEMP.parentpagenumber   
            AND C.childpagenumber = TEMP.childpagenumber   
            AND TEMP.deptpagenumber = C.deptpagenumber   
          UPDATE   
            temp   
          SET   
            isinterpretation = 1   
          FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID TEMP   
            INNER JOIN (  
              SELECT   
                parentpagenumber,   
                childpagenumber,   
                deptpagenumber   
              FROM   
                @tblTempOrdInvExplodedResultOrderbyRowID T   
              WHERE   
                Isnull(subgroupinterpretation, '') <> ''   
              GROUP BY   
                parentpagenumber,   
                childpagenumber,   
  deptpagenumber  
            ) C ON C.parentpagenumber = TEMP.parentpagenumber   
            AND C.childpagenumber = TEMP.childpagenumber   
            AND TEMP.deptpagenumber = C.deptpagenumber CREATE TABLE #templabresult   
            (  
              rowid INT,   
              rootgroupid BIGINT,   
              investigationname VARCHAR(100),   
              labresult VARCHAR(100)  
            ) INSERT INTO #templabresult   
          SELECT   
            T.rowid,   
            T.rootgroupid,   
            IOM.displaytext,   
            T.result   
          FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID T   
            INNER JOIN investigationmaster IM ON IM.investigationid = T.invid   
            INNER JOIN investigationorgmapping IOM ON IOM.investigationid = T.invid   
            AND IOM.orgid = @OrgID --WHERE  IOM.displaytext = 'Surgical Pathology No'    
          WHERE   
            IM.investigationname = 'Surgical Pathology No'   
          UPDATE   
            t   
          SET   
            labresult = TR.labresult,   
            labno = TR.investigationname   
          FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID T   
            INNER JOIN #templabresult TR   
            ON TR.rootgroupid = T.rootgroupid   
          WHERE   
            codename IS NOT NULL --and isnull(T.invid,0)=0   
          DELETE FROM   
            @tblTempOrdInvExplodedResultOrderbyRowID   
          WHERE   
            rowid IN (  
              SELECT   
                rowid   
              FROM   
                #templabresult)   
                AND result IN (  
                  SELECT   
                    labresult   
                  FROM   
                    #templabresult)   
                DROP   
                    TABLE #templabresult   
                  UPDATE   
                    t   
                  SET   
                    t.NAME = '<B>' + t.NAME + '</B>'   
                  FROM   
                    @tblTempOrdInvExplodedResultOrderbyRowID T   
                    INNER JOIN investigationorgmapping IOM ON IOM.investigationid = T.invid   
                    AND IOM.orgid = @OrgID   
                  WHERE   
                    IOM.outputinvestigationcode = 'BOLD'   
                  UPDATE   
                    t   
                  SET   
                    t.result = Replace(  
                      Replace(t.result, ', ', ','),   
                      ',',   
                      '<br/>'  
                    )   
                  FROM   
       @tblTempOrdInvExplodedResultOrderbyRowID T   
                    INNER JOIN investigationorgmapping IOM ON IOM.investigationid = T.invid   
                    AND IOM.orgid = @OrgID   
                  WHERE   
                    IOM.outputinvestigationcode = 'BRK' --      Select * From @tblTempOrdInvExplodedResultOrderbyRowID Where name = ''  
                    --Declare @maxVa BigInt  
                    --Set @maxVa = ( Select Max(rowID) FRom  @tblTempOrdInvExplodedResultOrderbyRowID )   
                    ----Select @maxVa  
                    --Update T set t.rowid = @maxVa + 1 FRom  @tblTempOrdInvExplodedResultOrderbyRowID T Where t.deptleveltrend = 'Y'  
                  SELECT   
                    rowid,   
                    NAME,   
                    CASE WHEN isabnormal = 'A' THEN Isnull(result, '') + '&nbsp;&nbsp;&nbsp;'   
                    /*Begin | MAlathi.P | 20190819 | Trend issue fix */  
                    --'H'   
                    /*End | MAlathi.P | 20190819 | Trend issue fix */  
                    WHEN isabnormal = 'L' THEN Isnull(result, '') + '&nbsp;&nbsp;&nbsp;'   
                    /*Begin | MAlathi.P | 20190819 | Trend issue fix */  
                    --'L'   
     --wHEN isabnormal = 'P' Then ISNULL(result,'') + '&nbsp;' + '(P)'  
                    /*End | MAlathi.P | 20190819 | Trend issue fix */  
                    ELSE Isnull(result, '') END AS Result,   
                    CASE WHEN Isnull(units, 'null') = 'null' THEN '' ELSE units END AS Units,   
                    Isnull(technicalremarks, '') AS Description,   
                    CASE WHEN Ltrim(  
                      Rtrim(  
                        Isnull(printablerange, '')  
                      )  
                    ) <> '' THEN printablerange ELSE Isnull(referencerange, '') END AS ReferenceRange,   
                    invid AS InvestigationID,   
                    Isnull(methodname, '') AS MethodName,   
                    Isnull(notes, '') AS Notes,   
                    Isnull(samplename, '') AS SampleName,   
                    isabnormal,   
                    Isnull(medicalremarks, '') AS MedicalRemarks,   
                    '' AS RefRangeSuffixtest,   
                    deptid,   
                    CASE WHEN Isnull(grpid, 0) = 0 THEN rootgroupid ELSE grpid END AS grpid,   
                    isnonreportable,   
                    Isnull(approvedby, 0) AS ApprovedBy,   
                    Isnull(approvername, '') AS ApproverName,   
                    Isnull(approverqualification, '') AS ApproverQualification,   
                    rootgroupid,   
                    parentgrpid,   
                    deptprintseparately,   
                    deptpagenumber,   
                    parentprintseparately,   
                    parentpagenumber,   
                    childprintseparately,   
                    childpagenumber,   
                    Isnull(authorizedby, 0) AS AuthorizedBy,   
                    Isnull(authorizername, '') AS AuthorizerName,   
                    Isnull(authorizerqualification, '') AS AuthorizerQualification,   
                    Isnull(secondauthorizedby, 0) AS SecondAuthorizedBy,   
                    Isnull(secondauthorizername, '') AS secondAuthorizerName,   
                    Isnull(  
                      secondauthorizerqualification, ''  
                    ) AS secondAuthorizerQualification,   
                    patientvisiid,   
                    Isnull(packagename, '') AS PackageName,   
                    @ApplicationURL AS ApplicationURL,   
                    Isnull(isrejected, 'N') AS IsRejected,   
                    Isnull(iswithheld, 'N') AS Iswithheld,   
                    retestrecheck,   
                    Isnull(convreferencerange, '') AS ConvReferenceRange,   
                    Isnull(convvalue, '') AS ConvValue,   
                    Isnull(convuomcode, '') AS ConvUOMCode,   
                    codename,   
                    subgroupinterpretation,   
                    patternid,   
                    Isnull(  
                      Rtrim(  
                        Ltrim(isdeptheader)  
                      ),   
                      ''  
                    ) AS IsDeptHeader,   
                    Upper(  
                      Isnull(  
                        Rtrim(  
                          Ltrim(deptmentname)  
                        ),   
                        ''  
                      )  
                    ) AS DeptmentName,   
                    Isnull(coauthorizedby, 0) AS CoAuthorizedBy,   
                    Isnull(coauthorizername, '') AS CoAuthorizerName,   
                    Isnull(coauthorizerqualification, '') AS CoAuthorizerQualification,   
                    coauthorizerimagesource AS CoAuthorizersignature,   
                    isinterpretation,   
                    dbo.Getoutputinvcode(invid, @OrgID) AS OutputInvestigationCode,   
                    labno,   
                    labresult,   
                    deptleveltrend   
                  FROM   
                    @tblTempOrdInvExplodedResultOrderbyRowID   
                  WHERE   
                    Isnull(isnonreportable, 'N') <> 'Y' --AND Lower(Isnull(NAME, '')) <> 'DRUG SUSCEPTIBILITY'   
                  ORDER BY   
                    rowid,   
                    temorowid,   
                    CASE WHEN invid IS NULL THEN 'a' ELSE 'b' END END --kapil    
                    ELSE 
					BEGIN 
					INSERT INTO @tempResult   
   SELECT   
                    rowid,   
                    LTrim(RTrim(NAME)),
                    CASE WHEN isabnormal = 'A' THEN Isnull(result, '') + '&nbsp;&nbsp;&nbsp;'   
                    /*Begin | MAlathi.P | 20190819 | Trend issue fix */  
                    -- 'H'   
                    /*End | MAlathi.P | 20190819 | Trend issue fix */  
                    WHEN isabnormal = 'L' THEN Isnull(result, '') + '&nbsp;&nbsp;&nbsp;'   
                    /*Begin | MAlathi.P | 20190819 | Trend issue fix */  
                    --'L'   
                    --wHEN isabnormal = 'P' Then ISNULL(result,'') + '&nbsp;' + '(P)'  
                    /*End | MAlathi.P | 20190819 | Trend issue fix */  
                    ELSE Isnull(result, '') END AS Result,   
                    CASE WHEN Isnull(units, 'null') = 'null' THEN '' ELSE units END AS Units,   
                    Isnull(technicalremarks, '') AS Description,   
                    CASE WHEN Ltrim(  
                      Rtrim(  
                        Isnull(printablerange, '')  
                      )  
                    ) <> '' THEN printablerange ELSE Isnull(referencerange, '') END AS ReferenceRange,   
                    invid AS InvestigationID,   
                    Isnull(methodname, '') AS MethodName,   
                    Isnull(notes, '') AS Notes,   
                    Isnull(samplename, '') AS SampleName,   
                    isabnormal,   
                    Isnull(medicalremarks, '') AS MedicalRemarks,   
                    '' AS RefRangeSuffixtest,   
                    deptid,   
                    grpid,   
                    isnonreportable,   
                    Isnull(approvedby, 0) AS ApprovedBy,   
                    Isnull(approvername, '') AS ApproverName,   
                    Isnull(approverqualification, '') AS ApproverQualification,   
                    rootgroupid,   
                    parentgrpid,   
                    deptprintseparately,   
                    deptpagenumber,   
                    parentprintseparately,   
                    parentpagenumber,   
                    childprintseparately,   
                    childpagenumber,   
               Isnull(authorizedby, 0) AS AuthorizedBy,   
                    Isnull(authorizername, '') AS AuthorizerName,   
                    Isnull(authorizerqualification, '') AS AuthorizerQualification,   
                    Isnull(secondauthorizedby, 0) AS SecondAuthorizedBy,   
                    Isnull(secondauthorizername, '') AS SecondAuthorizerName,   
                    Isnull(  
                      secondauthorizerqualification, ''  
                    ) AS SecondAuthorizerQualification,   
                    patientvisiid,   
                    Isnull(packagename, '') AS PackageName,   
                    @ApplicationURL AS ApplicationURL,   
                    Isnull(isrejected, 'N') IsRejected,   
                    Isnull(iswithheld, 'N') Iswithheld,   
                    retestrecheck,   
                    Isnull(convreferencerange, '') AS ConvReferenceRange,   
                    Isnull(convvalue, '') AS ConvValue,   
                    Isnull(convuomcode, '') AS ConvUOMCode,   
                    codename,   
                    subgroupinterpretation,   
                    printablerange,   
                    Isnull(  
                      Rtrim(  
                        Ltrim(isdeptheader)  
                      ),   
                      ''  
                    ) AS IsDeptHeader,   
                    Isnull(  
                      Rtrim(  
                        Ltrim(deptmentname)  
                      ),   
                      ''  
                    ) AS DeptmentName,   
                    Isnull(coauthorizedby, 0) AS CoAuthorizedBy,   
                    Isnull(coauthorizername, '') AS CoAuthorizerName,   
                    Isnull(coauthorizerqualification, '') AS CoAuthorizerQualification,   
                    coauthorizerimagesource AS CoauthorizerImageSource,   
   0 AS IsInterpretation,   
                    '',   
                    '',   
                    ''   
                  FROM   
                    @tblTempOrdInvExplodedResultOrderbyRowID   
                  WHERE   
                    isabnormal = 'P'   
                    AND Isnull(isnonreportable, 'N') <> 'Y' --Order by RowID                                             
                  UNION ALL   
                  SELECT   
                    tbl.rowid,  
					LTrim(RTrim(tbl.NAME))AS NAME,   
                    CASE WHEN isabnormal = 'A' THEN Isnull(result, '') + '&nbsp;&nbsp;&nbsp;'   
                    /*Begin | MAlathi.P | 20190819 | Trend issue fix */  
                    --'H'   
                    /*End | MAlathi.P | 20190819 | Trend issue fix */  
                    WHEN isabnormal = 'L' THEN Isnull(result, '') + '&nbsp;&nbsp;&nbsp;'   
                    /*Begin | MAlathi.P | 20190819 | Trend issue fix */  
                    --'L'   
     --wHEN isabnormal = 'P' Then ISNULL(result,'') + '&nbsp;' + '(P)'  
                    /*End | MAlathi.P | 20190819 | Trend issue fix */  
                    ELSE Isnull(result, '') END AS Result,   
                    CASE WHEN Isnull(units, 'null') = 'null' THEN '' ELSE units END AS Units,   
                    Isnull(technicalremarks, '') AS Description,   
                    CASE WHEN Ltrim(  
                      Rtrim(  
                        Isnull(tbl.printablerange, '')  
                      )  
                    ) <> '' THEN tbl.printablerange ELSE Isnull(tbl.referencerange, '') END AS ReferenceRange,   
                    invid AS InvestigationID,   
                    Isnull(methodname, '') AS MethodName,   
                    Isnull(notes, '') AS Notes,   
                    /*Begin | 20190819 | Malathi.P | Trend Report ISsue Fix */  
                     Isnull(samplename, '')                    AS SampleName,   
                    /*End | 20190819 | Malathi.P | Trend Report ISsue Fix */  
                    isabnormal,   
                    Isnull(medicalremarks, '') AS MedicalRemarks,   
                    '' AS RefRangeSuffixtest,   
                    tbl.deptid AS DeptID,   
                    grpid,   
                    tbl.isnonreportable,   
                    Isnull(approvedby, 0) AS ApprovedBy,   
                    Isnull(approvername, '') AS ApproverName,   
                    Isnull(approverqualification, '') AS ApproverQualification,   
                    rootgroupid,   
                    parentgrpid,   
                    deptprintseparately,   
                    deptpagenumber,   
                    parentprintseparately,   
                    parentpagenumber,   
                    childprintseparately,   
                    childpagenumber,   
                    Isnull(authorizedby, 0) AS AuthorizedBy,   
                    Isnull(authorizername, '') AS AuthorizerName,   
                    Isnull(authorizerqualification, '') AS AuthorizerQualification,   
                    Isnull(secondauthorizedby, 0) AS SecondAuthorizedBy,   
                    Isnull(secondauthorizername, '') AS SecondAuthorizerName,   
                    Isnull(  
                      secondauthorizerqualification, ''  
                    ) AS SecondAuthorizerQualification,   
                    patientvisiid,   
                    Isnull(packagename, '') AS PackageName,   
                    @ApplicationURL AS ApplicationURL,   
                    Isnull(isrejected, 'N') IsRejected,   
                    Isnull(iswithheld, 'N') Iswithheld,   
                    retestrecheck,   
                    Isnull(convreferencerange, '') AS ConvReferenceRange,   
                    Isnull(convvalue, '') AS ConvValue,   
                    Isnull(convuomcode, '') AS ConvUOMCode,   
                    codename,   
                    subgroupinterpretation,   
                    printablerange,   
                    Isnull(  
                      Rtrim(  
    Ltrim(isdeptheader)  
                      ),   
                      ''  
                    ) AS IsDeptHeader,   
                    Isnull(  
                      Rtrim(  
                        Ltrim(deptmentname)  
                      ),   
                      ''  
                    ) AS DeptmentName,   
                    Isnull(coauthorizedby, 0) AS CoAuthorizedBy,   
                    Isnull(coauthorizername, '') AS CoAuthorizerName,   
                    Isnull(coauthorizerqualification, '') AS CoAuthorizerQualification,   
                    coauthorizerimagesource AS CoauthorizerImageSource,   
                    0 AS IsInterpretation,   
                    '',   
                    '',   
                    ''   
                  FROM   
                    @tblTempOrdInvExplodedResultOrderbyRowID tbl   
                    INNER JOIN finalbill FB(nolock) ON tbl.patientvisiid = FB.visitid   
                    INNER JOIN billingdetails BD(nolock) ON BD.finalbillid = FB.finalbillid   
                    LEFT JOIN investigationorgmapping IOM(nolock) ON IOM.investigationid = tbl.invid   
                    AND IOM.orgid = @OrgID   
                  WHERE   
                    BD.isstat = 'Y'   
                    AND Isnull(tbl.isnonreportable, 'N') <> 'Y'   
                  DELETE FROM   
                    @tempResult   
                  WHERE   
                    rowid IN (  
                      SELECT   
                        symbolrowid   
                      FROM   
                        @SymbolRow  
                    )   
                  UPDATE   
                    temp   
                  SET   
                    isinterpretation = 1   
                  FROM   
     @tempResult TEMP   
                    INNER JOIN (  
                      SELECT   
                        parentpagenumber,   
                        childpagenumber,   
                        deptpagenumber   
                      FROM   
                        @tempResult T   
                      WHERE   
                        Isnull(notes, '') <> ''   
                      GROUP BY   
                        parentpagenumber,   
                        childpagenumber,   
                        deptpagenumber  
                    ) C ON C.parentpagenumber = TEMP.parentpagenumber   
                    AND C.childpagenumber = TEMP.childpagenumber   
                    AND TEMP.deptpagenumber = C.deptpagenumber   
                  UPDATE   
                    temp   
                  SET   
                    isinterpretation = 1   
                  FROM   
                    @tempResult TEMP   
                    INNER JOIN (  
                      SELECT   
                        parentpagenumber,   
                        childpagenumber,   
                        deptpagenumber   
                      FROM   
                        @tempResult T   
                      WHERE   
                        Isnull(subgroupinterpretation, '') <> ''   
                      GROUP BY   
                        parentpagenumber,   
                        childpagenumber,   
                        deptpagenumber  
                    ) C ON C.parentpagenumber = TEMP.parentpagenumber   
                    AND C.childpagenumber = TEMP.childpagenumber   
                    AND TEMP.deptpagenumber = C.deptpagenumber --                      
                  UPDATE   
                    @tempResult   
                  SET   
                    result = ''   
                  WHERE   
                    result LIKE '%#%' --Order by RowID       
                    CREATE TABLE #templabresult1   
                    (  
                      rowid INT,   
                      rootgroupid BIGINT,   
                      investigationname VARCHAR(100),   
                      labresult VARCHAR(100)  
                    ) INSERT INTO #templabresult1   
                  SELECT   
                    T.rowid,   
                    T.rootgroupid,   
          IOM.displaytext,   
                    T.result   
                  FROM   
                    @tempResult T   
                    INNER JOIN investigationmaster IM ON IM.investigationid = T.investigationid   
                    INNER JOIN investigationorgmapping IOM ON IOM.investigationid = T.investigationid   
                    AND IOM.orgid = @OrgID --WHERE  IOM.displaytext = 'Surgical Pathology No'    
                  WHERE   
                    IM.investigationname = 'Surgical Pathology No'   
                  UPDATE   
                    t   
                  SET   
                    labresult = TR.labresult,   
                    labno = TR.investigationname   
                  FROM   
                    @tempResult T   
                    INNER JOIN #templabresult1 TR   
                    ON TR.rootgroupid = T.rootgroupid   
                  WHERE   
                    codename IS NOT NULL   
                    AND Isnull(t.investigationid, 0) = 0   
                  DELETE FROM   
                    @tempResult   
                  WHERE   
                    rowid IN (  
                      SELECT   
                        rowid   
                      FROM   
                        #templabresult1)   
                        AND result IN (  
                          SELECT   
                            labresult   
                          FROM   
                            #templabresult1)   
                          DROP   
                            TABLE #templabresult1   
    SELECT   
                            DISTINCT *,   
                            dbo.Getoutputinvcode(investigationid, @OrgID) AS OutputInvestigationCode,   
             labno,   
                            labresult   
                          FROM   
                            @tempResult   
                          ORDER BY   
                            rowid END   
                          SET   
                            nocount OFF END   
  
GO


