 CREATE PROCEDURE [dbo].[pUpdateRefundDetails_Franchisee]                          
  @OrgID               [int],            
  @Prefflag            nchar(1),               
  @ReceiptNo           [nvarchar](30),                          
  @RefundBy            [bigint],                          
  @RefundStatus        [nvarchar](20),                          
  @TaskModifiedBy      [bigint],                          
  @TaskRejectionDetail [nvarchar](300),                          
  @ApprovedAmt         [dbo].[UDTAmtRefundDetails] readonly,                          
  @ContextInfo         [UDT_Context] readonly                          
WITH EXECUTE AS owner                          
AS                         
  BEGIN  
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED   
   SET NOCOUNT ON; 
BEGIN TRY
       DECLARE @EMsg nvarchar(4000),@ELine int,@Eproc nvarchar(128),@ESEVERITY int,@sptrace varchar(8000)  
	   DECLARE @pFinalbillID BIGINT,@pClientID BIGINT,@collectionID BIGINT
	   SELECT @pFinalbillID=FinalbillID FROM @ApprovedAmt
	   SELECT @collectionID=CollectionID FROM Finalbill (NOLOCK) WHERE FinalBillID=@pFinalbillID
      DECLARE @Ret int      

	  DECLARE @refundAmount BIGINT

	  DECLARE @ClientID BIGINT      

	  DECLARE @Tfinalbillid  BIGINT  
	  DECLARE @ServerDate DATETIME
SET @ServerDate=dbo.fn_GetServerDate(@ContextInfo)
	   

      IF( @RefundStatus = 'APPROVED' )                          
        BEGIN                          
            UPDATE RDC                          
            SET    RDC.ApprovedAmt = APA.AmtRefund,                          
                     RDC.ModifiedAt=@ServerDate,--(SELECT dbo.fn_GetServerDate(@ContextInfo)),                    
                     RDC.ModifiedBy=@TaskModifiedBy                    
            FROM   refundamtdetailscapture AS RDC WITH (ROWLOCK)                          
                   INNER JOIN @ApprovedAmt AS APA                          
                           ON RDC.BillingDetailsID = APA.BillingDetailsID  and RDC.RefundNo=@ReceiptNo          
                           and RDC.OrgId=@OrgID  
						   
						   
						  
	     INSERT INTO AmountRefundDetails                          
                        (FinalBillID,                          
                         BillingDetailsID,                          
                         AmtRefund,                          
                         RefundBy,                          
                         RefundStatus,                          
                         ReasonforRefund,                          
                         BillStatus,                          
                         RefundNo,                          
                         RefundType,                          
                         ApprovedBy,                          
                         AuthorisedBy,                        
                         PaymentTypeID,                        
                         ChequeNo,                        
                         BankName,                        
                         Remarks,                      
                        CancelAmount,                        
                         OrgID,                          
                         CreatedAt,                          
                         CreatedBy,                          
                         ModifiedAt,                          
                         ModifiedBy)                          
            SELECT FinalBillID,              
                   BillingDetailsID,                          
                   AmtRefund,     
                   RefundBy,                          
                   'Open',                          
                   ReasonforRefund,                          
                  @RefundStatus,                            
                   @ReceiptNo,                          
                   @RefundStatus,                          
                   ApprovedBy,                          
          AuthorisedBy,      
      PaymentTypeID,                        
                   ChequeNo,            
          BankName,                        
                   Remarks,                        
                   CASE WHEN ISNULL(CancelAmount,0)=0 THEN AmtRefund ELSE CancelAmount END ,                      
                   @OrgID,                          
                   (SELECT dbo.fn_GetServerDate(@ContextInfo)),                          
                   CreatedBy,                          
                   (SELECT dbo.fn_GetServerDate(@ContextInfo)),                    
                   CreatedBy                          
            FROM   @ApprovedAmt  




			DECLARE @TempRefundAmt1 Decimal(18,2)                                                                                            
  DECLARE @FinalBillID1 BIGINT                                                                      
  DECLARE @FinalAmtRefund1 Decimal(18,2)                                                           
   Declare @DisCount1 decimal(18,2)                                                       
      DECLARE @DiscountAdj1  decimal(18,2)                                                                                                                              
                          
  SELECT @TempRefundAmt1 =  SUM(ISNULL(ApprovedAmt,0)),@RefundBy = max(CreatedBy),@FinalBillID1 = max(FinalBillID)          
   FROM RefundAmtDetailsCapture WHERE RefundNo = @ReceiptNo and OrgID = @OrgID                                          
  SELECT @FinalAmtRefund1 =sum(AmtRefund) FROM AmountRefundDetails where  FinalBillID=@FinalBillID1 and OrgID=@OrgID                     
---------------------------------------------------------------------------------------------------------------------                    
   Declare @ExistDueAmt1 decimal(18,2)                                            
   Declare @RefundAmt1 decimal(18,2)                                        
            
             
    SELECT @DisCount1 =isnull(f.DiscountAmount,0)From FinalBill f where f.FinalBillID = @FinalBillID1    and f.OrgID=@Orgid                                        
    
	SELECT @DiscountAdj1=SUM(ISNULL(DiscountAmount,0)) FROM           
  (SELECT   BD.DiscountAmount  DiscountAmount FROM BillingDetails_Franchisee BD (NOLOCK) INNER JOIN @ApprovedAmt A ON A.FInalbillID=BD.FInalBillID 
  AND  BD.BillingDetailsID=A.BillingDetailsID) T  
	       
 /*SELECT @DiscountAdj1=SUM(ISNULL(DiscountAdjustedAmt,0)) FROM           
  (SELECT distinct RefundNo,DiscountAdjustedAmt FROM AmountRefundDetails where FinalBillID = @FinalBillID1    and OrgID=@Orgid) T  */        
           
           
 SET @DisCount1=@DisCount1-ISNULL(@DiscountAdj1,0)          
     --WHERE   a.FinalBillID = @FinalBillID    and f.OrgID=@Orgid                                        
                
  SELECT  @ExistDueAmt1= (a.DueAmount -(ISNULL(a.DuePaidAmt,0)+ISNULL(a.RefundedAmount,0)+ISNULL(a.DiscountAmt,0)+ISNULL(a.WriteOffAmt,0)))                
     From PatientDueDetails a                                                  
     WHERE  Finalbillid=@FinalBillID1   and OrgID=@Orgid            
            
   SET @ExistDueAmt1=isnull(@ExistDueAmt1,0)          
   IF(@Prefflag='Y')          
   BEGIN                                       
			   IF @ExistDueAmt1>0 and @ExistDueAmt1 >=@TempRefundAmt1          
                                   
   BEGIN                                        
  UPDATE FinalBill_Franchisee SET CurrentDue=isnull(CurrentDue,0)-@TempRefundAmt1                                       
  FROM FinalBill_Franchisee WITH (ROWLOCK)
  WHERE    FinalBillID = @FinalBillID1  and OrgID=@Orgid           
                                       
  UPDATE PatientDueDetails WITH (ROWLOCK) SET RefundedAmount = @TempRefundAmt1+ISNULL(RefundedAmount,0) WHERE  Finalbillid=@FinalBillID1  and OrgID=@Orgid                      
                                            
  UPDATE  ARD SET AmtRefund=0.00,TranCurrencyAmount=0.00, RefundadjustedAmt=A.AmtRefund           
  from AmountRefundDetails ARD WITH (ROWLOCK)           
  inner join @ApprovedAmt A on A.BillingDetailsID =ARD.BillingDetailsID and  RefundNo = @ReceiptNo            
  WHERE  ARD.OrgID = @OrgID   and ard.FinalBillID=@FinalBillID1          
                                      
   END   
                    
   ELSE                                         
    BEGIN                            
               
     Select @RefundAmt1 =@TempRefundAmt1-(@ExistDueAmt1)          
           
           
                                              
   UPDATE FinalBill_Franchisee WITH (ROWLOCK) SET AmountRefund=ISNULL(AmountRefund,0)+@RefundAmt1,CurrentDue=isnull(CurrentDue,0)-(@TempRefundAmt1- @RefundAmt1)                                      
     WHERE     FinalBillID = @FinalBillID1 and OrgID=@Orgid                         
                                     
     UPDATE PatientDueDetails WITH (ROWLOCK) SET RefundedAmount= isnull(RefundedAmount,0)+(@TempRefundAmt1- @RefundAmt1) WHERE   Finalbillid=@FinalBillID1 and OrgID=@Orgid                                 
               
     UPDATE  AmountRefundDetails WITH (ROWLOCK) SET RefundadjustedAmt=(@TempRefundAmt1- @RefundAmt1) WHERE RefundNo = @ReceiptNo and OrgID = @OrgID  AND    Finalbillid=@FinalBillID1                    
               
    -- IF(@RefundAmt1>ISNULL(@DisCount1,0))          
    -- BEGIN          
               
     --SET @RefundAmt1 =@RefundAmt1-@DisCount1   commented to get original redund amount        
     DECLARE @loop1 int =1                          
                              
                
               
     DECLARE @loopcont1 int =0                                    
     DECLARE @tbTable1 table(RowID int identity(1,1),AmtRefundID bigint,AmtRefund decimal(18,2),netAmt decimal(18,2))                                    
     DECLARE @AmtRefundID1 bigint,@AmtRefund1 decimal(18,2),@netAmt1 decimal(18,2) ,@TempAmtRefund1 decimal(18,2),@UpdatedAmtRefund1 decimal(18,2)                                    
                                         
     INSERT @tbTable1                                    
     SELECT distinct AmtRefundID,d.ApprovedAmt, 0                            
     FROM AmountRefundDetails a inner join RefundAmtDetailsCapture  d on d.BillingDetailsID=a.BillingDetailsID and d.RefundNo=@ReceiptNo                                   
     WHERE a.RefundNo = @ReceiptNo and a.OrgID = @OrgID and a.Finalbillid=@FinalBillID1                                    
                        
    SELECT @loopcont1=COUNT(1) FROM @tbTable1                                    
     WHILE @loop1<=@loopcont1                                    
     BEGIN                                    
           
  SELECT @AmtRefundID1=AmtRefundID,@AmtRefund1=AmtRefund,@netAmt1=netAmt FROM @tbTable1 where RowID=@loop1                       
                           
     IF(@RefundAmt1>0 and @RefundAmt1>=@AmtRefund1)                                    
     BEGIN                       
     UPDATE  AmountRefundDetails WITH (ROWLOCK) SET AmtRefund=@AmtRefund1,DiscountAdjustedAmt=@DisCount1 WHERE RefundNo = @ReceiptNo and OrgID = @OrgID                                     
   and AmtRefundID=@AmtRefundID1                                   
     SET @RefundAmt1=@RefundAmt1 - @AmtRefund1                       
     END                      
     ELSE                      
     BEGIN                       
     UPDATE  AmountRefundDetails WITH (ROWLOCK) SET RefundadjustedAmt=AmtRefund-ISNULL(@RefundAmt1,0),-- AmtRefund=@RefundAmt1,
     DiscountAdjustedAmt=@DisCount1  WHERE RefundNo = @ReceiptNo and OrgID = @OrgID                                     
 and AmtRefundID=@AmtRefundID1                                 
     SET @RefundAmt1=0                       
     END                      
                                 
     SET @loop1=@loop1+1                                    
     END                                    
                                    
                                         
   UPDATE  AmountRefundDetails WITH (ROWLOCK) set TranCurrencyAmount = AmtRefund where FinalBillID=@FinalBillID1 and RefundNo = @ReceiptNo and OrgID = @OrgID                                     
  /* END          
             
   ELSE        
BEGIN          
             
     UPDATE  AmountRefundDetails WITH (ROWLOCK) set DiscountAdjustedAmt=@DisCount1-@RefundAmt1, TranCurrencyAmount = 0,AmtRefund=0 where FinalBillID=@FinalBillID1 and RefundNo = @ReceiptNo and OrgID = @OrgID                                     
             
   END */         
   END                      
         --------------------------------               
   END           
  IF(@Prefflag='N')          
  BEGIN          
            
     UPDATE  AmountRefundDetails WITH (ROWLOCK) set TranCurrencyAmount = 0,AmtRefund=0 where FinalBillID=@FinalBillID1 and RefundNo = @ReceiptNo and OrgID = @OrgID                                     

  END          
                    
        END                          
      ELSE IF ( @RefundStatus = 'REJECTED' )                          
        BEGIN                          
		  DECLARE @RefundType NVARCHAR(150)
		  DECLARE @ClientRate DECIMAL(18,2)
			SELECT @ClientRate=SUM(BD.Amount) FROM BillingDetails BD (NOLOCK) INNER JOIN @ApprovedAmt RD  
			ON BD.FinalBIllID=RD.FinalBillID AND BD.BillingdetailsID=RD.BillingDetailsID

            UPDATE refundamtdetailscapture WITH (ROWLOCK)                         
            SET    RefundStatus = 'Rejected' ,ModifiedAt=(SELECT dbo.fn_GetServerDate(@ContextInfo)), ModifiedBy=@TaskModifiedBy  
			       ,@RefundType= RefundType                     
            WHERE  RefundNo = @ReceiptNo   and OrgId=@OrgID  
			--DECLARE @Refamount Decimal(18,2)
			--SELECT @Refamount=AmtRefund FROM @ApprovedAmt

			IF @RefundType='Cancelled'
			BEGIN
			   UPDATE CMA
				SET    CMA.BillRefund = Isnull(CMA.BillRefund, 0) -ISNULL( @ClientRate,0),
				CMA.TotalDepositUsed = Isnull(CMA.TotalDepositUsed, 0) + ISNULL( @ClientRate,0)
				FROM   CollectionsMaster CMA WITH (NOLOCK)
				WHERE  CMA.CollectionID = @collectionID
				AND orgid = @OrgID 
		    END                    
        END             
-------------------------------------------------------------------------------------------------------                               
      ELSE IF( @RefundStatus = 'REFUND' or @RefundStatus='CANCELLED')                          
        BEGIN                          
            UPDATE refundamtdetailscapture WITH (ROWLOCK)                        
            SET    RefundStatus = 'Closed'  ,ModifiedAt=(SELECT dbo.fn_GetServerDate(@ContextInfo)), ModifiedBy=@TaskModifiedBy                         
            WHERE  RefundNo = @ReceiptNo  and OrgId=@OrgID                            
                      
            INSERT INTO AmountRefundDetails                          
                        (FinalBillID,                          
                         BillingDetailsID,                          
                         AmtRefund,                          
                         RefundBy,                          
                         RefundStatus,                          
                         ReasonforRefund,                          
                         BillStatus,                          
                         RefundNo,                          
                         RefundType,                          
                         ApprovedBy,                          
                         AuthorisedBy,                        
                         PaymentTypeID,                        
                         ChequeNo,                        
                         BankName,                        
                         Remarks,                      
                         CancelAmount,                        
                         OrgID,                          
                         CreatedAt,                          
                         CreatedBy,                          
                         ModifiedAt,                          
                         ModifiedBy)                          
            SELECT FinalBillID,              
                   BillingDetailsID,                          
                   AmtRefund,     
                   RefundBy,                          
                   'Open',                          
                   ReasonforRefund,                          
                  @RefundStatus,                            
                   @ReceiptNo,                          
                   @RefundStatus,                          
                   ApprovedBy,                          
          AuthorisedBy,                         
                   PaymentTypeID,                        
                   ChequeNo,                        
          BankName,                        
                   Remarks,                        
                   CASE WHEN ISNULL(CancelAmount,0)=0 THEN AmtRefund ELSE CancelAmount END ,                                            
                   @OrgID,                          
                   (SELECT dbo.fn_GetServerDate(@ContextInfo)),                          
                   CreatedBy,              
                   (SELECT dbo.fn_GetServerDate(@ContextInfo)),                    
                   CreatedBy    
            FROM   @ApprovedAmt                     
                                                                     
  DECLARE @TempRefundAmt Decimal(18,2)                                                                                            
  DECLARE @FinalBillID BIGINT                                                                      
  DECLARE @FinalAmtRefund Decimal(18,2)                                                           
   Declare @DisCount decimal(18,2)                                                       
      DECLARE @DiscountAdj  decimal(18,2)                                                                                                                              
                          
  SELECT @TempRefundAmt =  SUM(ISNULL(ApprovedAmt,0)),@RefundBy = max(CreatedBy),@FinalBillID = max(FinalBillID)          
   FROM RefundAmtDetailsCapture WHERE RefundNo = @ReceiptNo and OrgID = @OrgID                                          
  --SELECT @FinalAmtRefund =sum(AmtRefund) FROM AmountRefundDetails where  FinalBillID=@FinalBillID and OrgID=@OrgID                     
---------------------------------------------------------------------------------------------------------------------                    
   Declare @ExistDueAmt decimal(18,2)                                            
   Declare @RefundAmt decimal(18,2)                                        
            
             
    SELECT @DisCount =isnull(f.DiscountAmount,0)From FinalBill_Franchisee f where f.FinalBillID = @FinalBillID    and f.OrgID=@Orgid                                        
    
	SELECT @DiscountAdj=SUM(ISNULL(DiscountAmount,0)) FROM           
  (SELECT   BD.DiscountAmount  DiscountAmount FROM BillingDetails_Franchisee BD (NOLOCK) INNER JOIN @ApprovedAmt A ON A.FInalbillID=BD.FInalBillID 
  AND  BD.BillingDetailsID=A.BillingDetailsID) T 
	       
/* SELECT @DiscountAdj=SUM(ISNULL(DiscountAdjustedAmt,0)) FROM           
  (SELECT distinct RefundNo,DiscountAdjustedAmt FROM AmountRefundDetails where FinalBillID = @FinalBillID    and OrgID=@Orgid) T      */           
           
 SET @DisCount=@DisCount-ISNULL(@DiscountAdj,0)          
     --WHERE   a.FinalBillID = @FinalBillID    and f.OrgID=@Orgid                                        
                
  SELECT  @ExistDueAmt= (a.DueAmount -(ISNULL(a.DuePaidAmt,0)+ISNULL(a.RefundedAmount,0)+ISNULL(a.DiscountAmt,0)+ISNULL(a.WriteOffAmt,0)))                
     From PatientDueDetails a                                                  
     WHERE  Finalbillid=@FinalBillID   and OrgID=@Orgid            
            
   SET @ExistDueAmt=isnull(@ExistDueAmt,0)          
   IF(@Prefflag='Y')          
   BEGIN                                       
   IF @ExistDueAmt>0 and @ExistDueAmt >=@TempRefundAmt          
                                   
   BEGIN                                        
	  UPDATE FinalBill_Franchisee SET CurrentDue=isnull(CurrentDue,0)-@TempRefundAmt                                       
	  FROM FinalBill_Franchisee WITH (ROWLOCK)
	  WHERE    FinalBillID = @FinalBillID  and OrgID=@Orgid           
                                       
	  UPDATE PatientDueDetails WITH (ROWLOCK) SET RefundedAmount = @TempRefundAmt+ISNULL(RefundedAmount,0) WHERE  Finalbillid=@FinalBillID  and OrgID=@Orgid                      
                                            
	  UPDATE  ARD SET AmtRefund=0.00,TranCurrencyAmount=0.00, RefundadjustedAmt=A.AmtRefund           
	  from AmountRefundDetails ARD WITH (ROWLOCK)           
	  inner join @ApprovedAmt A on A.BillingDetailsID =ARD.BillingDetailsID and  RefundNo = @ReceiptNo            
	  WHERE  ARD.OrgID = @OrgID   and ard.FinalBillID=@FinalBillID          
                                         
   END                          
                                           
   ELSE                                         
   BEGIN                            
              
     Select @RefundAmt =@TempRefundAmt-(@ExistDueAmt)          
           
   
                
   UPDATE FinalBill_Franchisee WITH (ROWLOCK) SET AmountRefund=ISNULL(AmountRefund,0)+@RefundAmt,CurrentDue=isnull(CurrentDue,0)-(@TempRefundAmt- @RefundAmt)                                      
     WHERE     FinalBillID = @FinalBillID and OrgID=@Orgid                         
                                     
     UPDATE PatientDueDetails WITH (ROWLOCK) SET RefundedAmount= isnull(RefundedAmount,0)+(@TempRefundAmt- @RefundAmt) WHERE   Finalbillid=@FinalBillID and OrgID=@Orgid                                 
               
     UPDATE  AmountRefundDetails WITH (ROWLOCK) SET RefundadjustedAmt=(@TempRefundAmt- @RefundAmt) WHERE RefundNo = @ReceiptNo and OrgID = @OrgID  AND    Finalbillid=@FinalBillID                    
               
     --IF(@RefundAmt>ISNULL(@DisCount,0))          
     --BEGIN          
               
    -- SET @RefundAmt =@RefundAmt-@DisCount          
     DECLARE @loop int =1                          
                              
                
               
     DECLARE @loopcont int =0                                    
     DECLARE @tbTable table(RowID int identity(1,1),AmtRefundID bigint,AmtRefund decimal(18,2),netAmt decimal(18,2))                                    
     DECLARE @AmtRefundID bigint,@AmtRefund decimal(18,2),@netAmt decimal(18,2) ,@TempAmtRefund decimal(18,2),@UpdatedAmtRefund decimal(18,2)                                    
                                         
     INSERT @tbTable                                    
     SELECT distinct AmtRefundID,d.ApprovedAmt, 0                            
     FROM AmountRefundDetails a inner join RefundAmtDetailsCapture  d on d.BillingDetailsID=a.BillingDetailsID and d.RefundNo=@ReceiptNo                                   
     WHERE a.RefundNo = @ReceiptNo and a.OrgID = @OrgID and a.Finalbillid=@FinalBillID                                    
                        
    SELECT @loopcont=COUNT(1) FROM @tbTable                                    
     WHILE @loop<=@loopcont                                    
     BEGIN                                    
           
  SELECT @AmtRefundID=AmtRefundID,@AmtRefund=AmtRefund,@netAmt=netAmt FROM @tbTable where RowID=@loop                       
                           
     IF(@TempRefundAmt>0 and @RefundAmt>=@AmtRefund)                                    
     BEGIN            
     UPDATE  AmountRefundDetails WITH (ROWLOCK) SET AmtRefund=@AmtRefund,DiscountAdjustedAmt=@DisCount WHERE RefundNo = @ReceiptNo and OrgID = @OrgID                                     
   and AmtRefundID=@AmtRefundID                                   
     SET @RefundAmt=@RefundAmt - @AmtRefund                       
     END                      
     ELSE                      
     BEGIN                     
     UPDATE  AmountRefundDetails WITH (ROWLOCK) SET RefundadjustedAmt=AmtRefund-ISNULL(@RefundAmt,0), 
	 --AmtRefund=@RefundAmt,
	 --CancelAmount=@RefundAmt,
	 DiscountAdjustedAmt=@DisCount 
	  WHERE RefundNo = @ReceiptNo and OrgID = @OrgID  and AmtRefundID=@AmtRefundID                                 
     SET @RefundAmt=0                       
     END                      
                                 
     SET @loop=@loop+1                                    
     END                                    
                                    
                                         
   UPDATE  AmountRefundDetails WITH (ROWLOCK) set TranCurrencyAmount = AmtRefund where FinalBillID=@FinalBillID and RefundNo = @ReceiptNo and OrgID = @OrgID                                     
  /* END          
             
   ELSE          
   BEGIN          
             
     UPDATE  AmountRefundDetails WITH (ROWLOCK) set DiscountAdjustedAmt=@DisCount-@RefundAmt, TranCurrencyAmount = 0,AmtRefund=0 where FinalBillID=@FinalBillID and RefundNo = @ReceiptNo and OrgID = @OrgID     
             
   END */         
   END              
         --------------------------------               
   END           
  IF(@Prefflag='N')          
  BEGIN          
            
     UPDATE  AmountRefundDetails WITH (ROWLOCK) set TranCurrencyAmount = 0,AmtRefund=0 where FinalBillID=@FinalBillID and RefundNo = @ReceiptNo and OrgID = @OrgID                                     

  END          

		/************************************************************************/  

		/**** CreditClientDetails  ****/              

			select @refundAmount=Sum(aamt.AmtRefund),@ClientID = isnull(vc.clientid,0), 

					@Tfinalbillid=aamt.finalbillid

			FROM   @ApprovedAmt aamt inner join visitclientmapping vc (NOLOCK) on vc.finalbillid=aamt.finalbillid

			group by vc.clientid,aamt.finalbillid

			if exists(select 1 from AmountRefundDetails where Finalbillid=@Tfinalbillid)

			begin

			if (@ClientID>0)

			begin

			IF Not Exists(Select distinct 1 From InvoiceDetails Where Finalbillid=@Tfinalbillid)
			BEGIN
			Update CCD set CCD.PendingCreditLimit=CCD.PendingCreditLimit+@refundAmount , CCD.NotInvoiced= CCD.NotInvoiced-@refundAmount
			From ClientCreditDetails CCD WITH (ROWLOCK)  Inner Join ClientMaster CM  on CM.ClientId=CCD.ClientID 
			Where CM.CreditLimit>0 and CCD.ClientID=@ClientID
			END
			ELSE
			BEGIN
			Update CCD set CCD.PendingCreditLimit=CCD.PendingCreditLimit+@refundAmount , CCD.SAPDue= CCD.SAPDue-@refundAmount
			From ClientCreditDetails CCD WITH (ROWLOCK) Inner Join ClientMaster CM  on CM.ClientId=CCD.ClientID 
			Where CM.CreditLimit>0 and CCD.ClientID=@ClientID and CCD.SAPDue>0
			END
			end

			end

			/*** End ***/   

   END                          
     
	 DECLARE @FullDue DECIMAL(18,2)

	   SELECT @FullDue = ( Isnull(RefundedAmount, 0)
		+ Isnull(DuePaidAmt, 0)
		+ Isnull(DiscountAmt, 0) )
		FROM   PatientDueDetails (NOLOCK)
		WHERE  Finalbillid = @pFinalbillID
		AND OrgID = @OrgID

		UPDATE PatientDueDetails
		SET    status = 'Closed'
		WHERE  Finalbillid = @pFinalbillID
		AND OrgID = @OrgID
		AND DueAmount = @FullDue   
		
		Declare @DueVisitID1 BigInt          
		Set @DueVisitID1 =(Select VisitID From PatientDueDetails (NOLOCK) WHERE  Finalbillid = @pFinalbillID            
		AND OrgID = @OrgID  and status = 'Closed'          
		AND DueAmount = @FullDue   )          
		IF (@DueVisitID1>0)          
		Begin           
		Update PatientVisit  Set IsDueBill=0 Where PatientVisitID=@DueVisitID1 and OrgID=@OrgID          
		Update Notifications Set Status='' Where Identityid=@DueVisitID1 and OrgID=@OrgID and ActionType in ('PDF','ROUNDBPDF') and Status='Due'          
		END   
	          
        IF @RefundStatus='CANCELLED'        
    BEGIN        
    declare @tmp_ordinv as table (accessionnumber bigint,status nvarchar(50))
	declare @tmp_patinv as table (patientinvid bigint,status nvarchar(50))
    DECLARE @pPatientVisitID BIGINT        
    SELECT @pPatientVisitID = VisitID FROM finalbill WHERE FinalBillID=@FinalBillID and OrgID = @OrgID  
	          
    UPDATE  OI 
	Set OI.Status='Cancel' 
	output inserted.AccessionNumber,inserted.Status into @tmp_ordinv
	FROM  OrderedInvestigations OI WITH (ROWLOCK)         
    INNER JOIN FinalBill FB on fb.VisitID=OI.VisitID            
    INNER JOIN BillingDetails BD on BD.FeeId=OI.ID and FB.FinalBillID=BD.FinalBillID AND OI.Type=BD.FeeType and BD.feetype!='PKG' and OI.PkgID is null              
    INNER JOIN @ApprovedAmt ta on BD.BillingDetailsID=ta.BillingDetailsID and BD.OrgID=@OrgID            
    WHERE OI.VisitID = @pPatientVisitID      
    
	
	    
    update  OI Set OI.Status='Cancel' 
	output inserted.AccessionNumber,inserted.Status into @tmp_ordinv
	from  OrderedInvestigations OI WITH (ROWLOCK)                    
    inner join FinalBill FB on fb.VisitID=OI.VisitID                        
    inner join BillingDetails BD on BD.FeeId=OI.PkgID and FB.FinalBillID=BD.FinalBillID  and BD.feetype='PKG'                       
    INNER join @ApprovedAmt ta on BD.BillingDetailsID=ta.BillingDetailsID and BD.OrgID=@OrgID                        
    where OI.VisitID = @pPatientVisitID  

	UPDATE PI
	SET    PI.Status = 'Cancel',
	PI.ModifiedBy = @TaskModifiedBy,
	PI.Modifiedat = @ServerDate
	output inserted.patientinvid,inserted.status into @tmp_patinv
	FROM   OrderedInvestigations OI WITH(NOLOCK)
	INNER JOIN PatientInvestigation PI WITH(NOLOCK)
	ON OI.VisitID = PI.PatientVisitID
	AND OI.AccessionNumber = PI.AccessionNumber
	AND OI.OrgID = PI.OrgID
	INNER JOIN @tmp_ordinv A ON A.AccessionNumber=OI.AccessionNumber
	WHERE  PatientVisitID = @pPatientVisitID
	AND OI.Status = 'Cancel'

	UPdate MIS Set status = OI.status , modifiedby = @TaskModifiedBy , Modifiedat = @ServerDate
	From @tmp_ordinv tmp
	Inner join orderedinvestigations OI (nolock) on tmp.accessionNumber = OI.accessionnumber
	Inner join MISOrderedinvestigations MIS (nolock) on OI.accessionnumber = MIS.accessionnumber
	Where OI.Visitid = @pPatientVisitID
	Insert into MISOrderedinvestigationhistory
	(
	AccessionNumber,Visitid,id,type,Name,statusid,status,
	CreatedBy,CreatedAt,ReferralID,ResCaptureLoc,PkgID,PkgName
	)
	Select mOrd.AccessionNumber,mord.Visitid,mord.id,mord.type,mord.Name,tsk.seq as statusid,mord.status,
	@TaskModifiedBy as CreatedBy,@ServerDate as CreatedAt,mord.ReferralID,mord.ResCaptureLoc,mord.PkgID,mord.PkgName
	From @tmp_ordinv tp
	Inner join MISOrderedinvestigations MORD (nolock) on tp.Accessionnumber = MORD.Accessionnumber
	Inner join ordtasks tsk (nolock) on MORD.status = tsk.status
	Left join MISOrderedinvestigationhistory OH (nolock) on tp.Accessionnumber = OH.Accessionnumber and tsk.seq = Oh.statusid and OH.Createdby = @TaskModifiedBy
	Where Oh.Accessionnumber is null
	update MISP set status = PI.status,modifiedat = @ServerDate,Modifiedby = @TaskModifiedBy
	From @tmp_patinv t
	Inner join MISpatientinvestigation MISP (nolock) on MISP.Patientinvid = t.Patientinvid
	Inner join patientinvestigation PI (nolock) on MISP.patientinvid = PI.Patientinvid
	Where MISP.PatientVisitid = @pPatientVisitID
      
    DECLARE @TaskActionID BIGINT    
      DECLARE @TaskStatusID BIGINT    
          
      SELECT @TaskActionID=TaskActionID FROM TaskActions WHERE ActionName='CollectSample'    
      SELECT @TaskStatusID=TaskStatusID FROM TaskStatus WHERE StatusName='DELETED'                                
    
  DECLARE @Count INT         
  SELECT @Count=COUNT(VisitID) FROM OrderedInvestigations OI WHERE VisitID= @pPatientVisitID AND OI.Status<>'Cancel'        
  IF @Count=0        
  BEGIN         
  UPDATE tasks WITH (ROWLOCK) SET TaskStatusID=@TaskStatusID WHERE PatientVisitID= @pPatientVisitID AND OrgID=@OrgID  AND TaskActionID=@TaskActionID        
  END     
         
 END      
            
                       
      SET @Ret=0                          
                          
      RETURN @Ret   
END TRY

BEGIN CATCH   		                           
    SELECT @EMsg = Error_Message(),@ELine = Error_Line(),@Eproc = Error_procedure(),@ESEVERITY = Error_SEVERITY(), @sptrace ='pUpdateRefundDetails @OrgID = '+CAST(@OrgID AS VARCHAR)+'@Prefflag = '+@Prefflag +'@ReceiptNo = '+@ReceiptNo + 
	'@RefundBy = '+CAST(@RefundBy AS VARCHAR)  
	 
    exec usp_insert_errorinfo @EMsg,@ELine,@Eproc,@Eseverity,@sptrace; 
END CATCH	  
  END










