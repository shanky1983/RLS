CREATE PROCEDURE [dbo].[pUpdateSampletransferForRLS] (@pSampleTransfer 
UDDPatientInvSampleTransfer Readonly, 
@ContextInfo     [UDT_Context] 
READONLY) 
AS 
begin
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED   
   SET NOCOUNT ON; 
BEGIN TRY
  DECLARE @EMsg nvarchar(4000),@ELine int,@Eproc nvarchar(128),@ESEVERITY int,@sptrace varchar(8000)
DECLARE @pCreatedAt datetime 
SET @pCreatedAt=(SELECT dbo.fn_GetServerDate(@ContextInfo)) 
DECLARE @pCreatedBy BIGINT 
DECLARE @OrgAddressID INT 
declare @pSampleTransferredList UDDPatientInvSampleTransfer
declare @pSampleTransferNow UDDPatientInvSampleTransfer

insert into @pSampleTransferredList
select SF.* from @pSampleTransfer SF 
Inner Join SampleTracker ST on  St.PatientVisitID = SF.PatientVisitID 
and St.OrgID = SF.OrgID 
and St.SampleID = SF.SampleID and ST.InvSampleStatusID=2

delete SF from @pSampleTransferredList SF 
Inner Join SampleTracker ST on  St.PatientVisitID = SF.PatientVisitID 
and St.OrgID = SF.OrgID 
and St.SampleID = SF.SampleID and ST.InvSampleStatusID=4


insert into @pSampleTransferNow
select SF.* from @pSampleTransfer SF where SF.SampleID not in (select SampleID  from @pSampleTransferredList)
SELECT @pCreatedBy = LoginID, 
@OrgAddressID = OrgAddressID 
FROM   @ContextInfo 
declare @CollectedIn bigint 
/* Code added by T.Suresh for MIS Purpose start here */
declare @tmp_ordinv as table (accessionnumber bigint)
declare @tmp_patinv as table (patientinvid bigint,status nvarchar(50))
Declare @tmp_sample as table (sampleid bigint,locid int)
declare @Visitid bigint
Select top 1 @Visitid = Patientvisitid from @pSampleTransfer
/* Code added by T.Suresh for MIS Purpose end here */
Select @CollectedIn = CollectedIn 
from   SampleTracker St 
inner join @pSampleTransfer temp 
on St.PatientVisitID = temp.PatientVisitID 
and St.OrgID = Temp.OrgID 
and St.SampleID = TEmp.SampleID 
BEGIN 
declare @Recorgid bigint 
select @Recorgid = oa.OrgID 
from   OrganizationAddress OA  
inner join @pSampleTransfer TSTR 
on oa.AddressID = TSTR.RecSampleLocID 
if exists (select 1 from @pSampleTransferredList)
Begin
Declare @tmp_sampleId as table (sampleid bigint,Exsampleid bigint)  
Insert into Patientinvsample (PatientVisitID,BarcodeNumber,Samplecode,Orgid,CreatedBy,Createdat,ModifiedBy,ModifiedAt,SampleContainerID,RecSampleLocID,CollectedLocID,UID,Recorgid,SampleRelationShipid,CollectedDatetime,VmUnitID)
output inserted.sampleid,inserted.VmUnitID into @tmp_sampleId    
select PIS.PatientVisitID,PIS.BarcodeNumber,PIS.Samplecode,PIS.Orgid,PIS.CreatedBy,PIS.Createdat,ST.ModifiedBy,PIS.ModifiedAt,PIS.SampleContainerID,ST.RecSampleLocID,PIS.CollectedLocID,PIS.UID,@Recorgid,PIS.SampleRelationShipid,PIS.CollectedDatetime,
ST.SampleID from patientinvsample PIS 
Inner Join @pSampleTransferredList ST on PIS.SampleID=ST.SampleID
  
IF  EXISTS (SELECT 1 FROM Patientinvsample  PIS (Nolock) 
inner join SampleTracker ST (nolock) on ST.SampleID=PIS.VmUnitID and ST.InvSampleStatusID=1 AND PIS.Patientvisitid=@Visitid)
BEGIN 
	INSERT INTO SampleTracker 
	(PatientVisitID,                 
	SampleID,                 
	InvSampleStatusID,                 
	DeptID,                 
	Reason,                 
	CreatedBy,                 
	CreatedAt,                 
	ModifiedBy,                 
	ModifiedAt,                 
	OrgID,                 
	CollectedIn) 
	SELECT DISTINCT ST.PatientVisitID, 
	T.sampleid, 
	1, 
	ST.DeptID,ST.Reason,                 
	ST.CreatedBy,                 
	ST.CreatedAt,                 
	ST.ModifiedBy,                 
	ST.ModifiedAt,      
	ST.OrgID,        
	ST.CollectedIn 
	FROM   Patientinvsample  PIS (Nolock)
	inner join  @tmp_sampleId T on T.sampleid=PIS.SampleID
	inner join SampleTracker ST (nolock) on ST.SampleID=PIS.VmUnitID and ST.InvSampleStatusID=1
END

IF NOT EXISTS (SELECT 1 FROM Patientinvsample  PIS (Nolock) 
inner join SampleTracker ST (nolock) on ST.SampleID=PIS.VmUnitID and ST.InvSampleStatusID=1  AND PIS.Patientvisitid=@Visitid)
BEGIN 
	INSERT INTO SampleTracker 
	(PatientVisitID,                 
	SampleID,                 
	InvSampleStatusID,                 
	DeptID,                 
	Reason,                 
	CreatedBy,                 
	CreatedAt,                 
	ModifiedBy,                 
	ModifiedAt,                 
	OrgID,                 
	CollectedIn) 
	SELECT DISTINCT ST.PatientVisitID, 
	T.sampleid, 
	1, 
	ST.DeptID,ST.Reason,                 
	ST.CreatedBy,                 
	ST.CreatedAt,                 
	ST.ModifiedBy,                 
	ST.ModifiedAt,                 
	ST.OrgID,                 
	ST.CollectedIn 
	FROM   Patientinvsample  PIS (Nolock)
	inner join  @tmp_sampleId T on T.sampleid=PIS.SampleID
	inner join SampleTracker ST (nolock) on ST.SampleID=PIS.VmUnitID and ST.InvSampleStatusID=3
END
INSERT INTO SampleTracker 
(PatientVisitID, 
SampleID, 
InvSampleStatusID, 
CurrentOrgID, 
DeptID, 
OrgID, 
CollectedIn, 
CreatedAt, 
CreatedBy) 
SELECT  DISTINCT ST.PatientVisitID, 
ST.SampleID, 
2, 
ST.OrgID, 
0, 
ST.OrgID, 
@CollectedIn, 
@pCreatedAt, 
@pCreatedBy 
FROM   SampleTracker ST
inner join  @tmp_sampleId T on T.sampleid=ST.SampleID

update PISM set PISM.SID=PIS.sampleid from PatientInvSampleMapping PISM
Inner Join @pSampleTransferredList ST on  ST.InvestigationID =PISM.ID
AND ST.PatientVisitID = PISM.VisitID and PISM.SID=ST.SampleID
inner join @tmp_sampleId PIS on PIS.exsampleid=PISM.SID 

UPDATE OI
SET    OI.Status = 'SampleTransferred',
OI.ModifiedBy = ST.ModifiedBy,
OI.ModifiedAt = @pCreatedAt,
OI.ResCaptureLoc = ST.RecSampleLocID
output inserted.accessionnumber into @tmp_ordinv
FROM   @pSampleTransferredList ST
inner join @tmp_sampleId T on T.Exsampleid=ST.SampleID
INNER JOIN PatientInvSampleMapping PISM 
ON T.SampleID = PISM.SID and ST.InvestigationID =PISM.ID
AND ST.PatientVisitID = PISM.VisitID
INNER JOIN OrderedInvestigations OI WITH (ROWLOCK)
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.OrgID = OI.OrgID
WHERE  OI.VisitID = ST.PatientVisitID
AND OI.OrgID = ST.OrgID
AND OI.UID = ST.UID
--AND ST.RecSampleLocID = OI.ResCaptureLoc
AND OI.Status IN( 'SampleCollected', 'Yet to Transfer' )


UPDATE PINV
SET    PINV.Status = OI.Status
output inserted.patientinvid,inserted.status into @tmp_patinv
FROM   @pSampleTransferredList ST
inner join @tmp_sampleId T on T.Exsampleid=ST.SampleID
INNER JOIN PatientInvSampleMapping PISM 
ON T.SampleID = PISM.SID
AND ST.PatientVisitID = PISM.VisitID
INNER JOIN OrderedInvestigations OI 
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.OrgID = OI.OrgID
INNER JOIN PatientInvestigation PINV WITH (ROWLOCK) 
ON PINV.PatientVisitID = OI.VisitID
AND PINV.AccessionNumber = OI.AccessionNumber
WHERE  OI.VisitID = ST.PatientVisitID
AND OI.OrgID = ST.OrgID
AND OI.UID = ST.UID
--AND ST.RecSampleLocID = OI.ResCaptureLoc
AND PINV.Status IN( 'SampleCollected', 'Yet to Transfer' )
UPDATE OI
SET    OI.Status = 'SampleTransferred',
OI.ModifiedBy = ST.ModifiedBy,
OI.ModifiedAt = @pCreatedAt,
OI.ResCaptureLoc = ST.RecSampleLocID
output inserted.accessionnumber into @tmp_ordinv
FROM   @pSampleTransferredList ST
inner join @tmp_sampleId T on T.Exsampleid=ST.SampleID
INNER JOIN PatientInvSampleMapping PISM 
ON T.SampleID = PISM.SID
AND ST.PatientVisitID = PISM.VisitID
AND PISM.ID = ST.InvestigationID
AND PISM.Type = ST.Type
INNER JOIN OrderedInvestigations OI WITH (ROWLOCK) 
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.OrgID = OI.OrgID
WHERE  OI.VisitID = ST.PatientVisitID
AND OI.OrgID = ST.OrgID
AND OI.UID = ST.UID
--AND ST.RecSampleLocID = OI.ResCaptureLoc
AND OI.Status IN( 'SampleReceived' )
UPDATE PINV
SET    PINV.Status = OI.Status
output inserted.patientinvid,inserted.status into @tmp_patinv
FROM   @pSampleTransferredList ST
inner join @tmp_sampleId T on T.Exsampleid=ST.SampleID
INNER JOIN PatientInvSampleMapping PISM 
ON T.SampleID = PISM.SID
AND ST.PatientVisitID = PISM.VisitID
AND PISM.ID = ST.InvestigationID
AND PISM.Type = ST.Type
INNER JOIN OrderedInvestigations OI 
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.OrgID = OI.OrgID
INNER JOIN PatientInvestigation PINV WITH (ROWLOCK) 
ON PINV.PatientVisitID = OI.VisitID
AND PINV.AccessionNumber = OI.AccessionNumber
WHERE  OI.VisitID = ST.PatientVisitID
AND OI.OrgID = ST.OrgID
AND OI.UID = ST.UID
--AND ST.RecSampleLocID = OI.ResCaptureLoc
AND PINV.Status IN( 'SampleReceived' )

End
IF EXISTS(select 1 
From   PatientInvSampleMapping PIS  
inner join PatientInvSample PS  
on PS.PatientVisitID = PIS.VisitID 
inner join @pSampleTransferNow st 
on st.SampleID = PS.SampleID 
and PS.SampleCode = PIS.SampleID 
and PIS.VisitID = st.PatientVisitID 
INNER JOIN OrderedInvestigations OI 
ON OI.VisitID = PIS.VisitID
AND OI.ID = PIS.ID
AND OI.Type = PIS.Type
WHERE  OI.Status IN ( 'Yet to Transfer', 'SampleReceived', 'SampleCollected' ) --AND OI.ResCaptureLoc = ST.RecSampleLocID 
--and PS.Recorgid = st.OrgID
)
BEGIN 
update PIS 
set    PIS.RecSampleLocID = TSTR.RecSampleLocID, 
PIS.recorgid = @Recorgid, 
PIS.ModifiedBy = TSTR.ModifiedBy, 
PIS.ModifiedAt = @pCreatedAt 
output inserted.sampleid,inserted.RecSampleLocID into @tmp_sample
from   PatientInvSample PIS WITH (ROWLOCK)
INNER JOIN @pSampleTransferNow TSTR 
ON PIS.OrgID = TSTR.OrgID 
AND PIS.SampleID = TSTR.SampleID 
DECLARE @TempSampleTracker AS TABLE 
( 
PatientVisitID    BIGINT, 
SampleID          BIGINT, 
InvSampleStatusID INT, 
CurrentOrgID      INT, 
DeptID            INT, 
OrgID             INT, 
CollectedIn       INT 
) 
INSERT INTO @TempSampleTracker 
(PatientVisitID, 
SampleID, 
InvSampleStatusID, 
CurrentOrgID, 
DeptID, 
OrgID, 
CollectedIn) 
SELECT DISTINCT ST.PatientVisitID, 
ST.SampleID, 
ST.InvSampleStatusID, 
ST.CurrentOrgID, 
ST.DeptID, 
ST.OrgID, 
ST.CollectedIn 
FROM   SampleTracker ST  
INNER JOIN @pSampleTransferNow TSTR 
ON ST.PatientVisitID = TSTR.PatientVisitID 
AND ST.SampleID = TSTR.SampleID 
AND ST.OrgID = TSTR.OrgID 
AND ST.InvSampleStatusID = 2 
AND ST.SampleID NOT IN (SELECT SampleID
FROM   SampleTracker
WHERE  PatientVisitID = ST.PatientVisitID
AND SampleID = ST.SampleID
AND OrgID = ST.OrgID
AND InvSampleStatusId = 3)
INSERT INTO SampleTracker 
(PatientVisitID, 
SampleID, 
InvSampleStatusID, 
CurrentOrgID, 
DeptID, 
OrgID, 
CollectedIn, 
CreatedAt, 
CreatedBy) 
SELECT DISTINCT ST.PatientVisitID, 
ST.SampleID, 
2, 
ST.OrgID, 
0, 
ST.OrgID, 
@CollectedIn, 
@pCreatedAt, 
@pCreatedBy 
FROM   @pSampleTransferNow ST 
LEFT JOIN @TempSampleTracker TSTR 
ON ST.PatientVisitID = TSTR.PatientVisitID 
AND ST.SampleID = TSTR.SampleID 
AND ST.OrgID = TSTR.OrgID 
AND TSTR.InvSampleStatusID = 2 
WHERE  TSTR.SampleID IS NULL 
--INSERT INTO SampleTracker (PatientVisitID,SampleID,InvSampleStatusID,CurrentOrgID,DeptID,Reason,OrgID,CollectedIn,CreatedAt,CreatedBy)         
-- SELECT  [STR].PatientVisitID,[STR].SampleID,2,[STR].CurrentOrgID,[STR].DeptID,[STR].Reason,[STR].OrgID,[STR].CollectedIn , 
-- @pCreatedAt, @pCreatedBy                        
-- from SampleTracker [STR]      
-- INNER JOIN @pSampleTransfer TSTR ON [STR].OrgID = TSTR.OrgID                                  
-- AND [STR].SampleID = TSTR.SampleID                
--update [STR] set [STR].CreatedAt = TSTR.CreatedAt                                
--from SampleTracker [STR]                                                         
--INNER JOIN @pSampleTransfer TSTR ON [STR].OrgID = TSTR.OrgID                                  
--AND [STR].SampleID = TSTR.SampleID                                  
/********   Commented by Sathish.E
UPDATE OrderedInvestigations WITH (ROWLOCK)
SET    Status = 'SampleTransferred',
ModifiedBy = pv.ModifiedBy, 
ModifiedAt = @pCreatedAt, 
ResCaptureLoc = pv.RecSampleLocID 
from   OrderedInvestigations O1 
INNER JOIN @pSampleTransfer pv 
ON pv.InvestigationID = O1.ID 
AND pv.Type = O1.Type
WHERE  O1.VisitID = pv.PatientVisitID 
and O1.OrgID = pv.OrgID 
AND O1.[UID] = pv.[UID] 
AND O1.Status IN( 'SampleCollected', 'SampleReceived', 'Yet to Transfer' )
UPDATE OrderedInvestigations WITH (ROWLOCK)
SET    Status = 'SampleTransferred', 
ModifiedBy = pv.ModifiedBy, 
ModifiedAt = @pCreatedAt, 
ResCaptureLoc = pv.RecSampleLocID 
from   OrderedInvestigations O1 
INNER JOIN @pSampleTransfer pv 
ON pv.InvestigationID = O1.ID 
AND pv.Type = O1.Type
WHERE  O1.VisitID = pv.PatientVisitID 
and O1.OrgID = pv.OrgID 
AND O1.[UID] = pv.[UID] 
AND O1.AccessionNumber NOT IN (select AccessionNumber 
FROM   OrderedInvestigations OI 
INNER JOIN OrganizationAddress OA
ON oa.AddressID = oi.ResCaptureLoc
AND oa.OrgID = oi.OrgID
WHERE  VisitID = pv.PatientVisitID
AND [UID] = pv.[UID]
AND O1.Status IN( 'SampleCollected', 'SampleReceived', 'Yet to Transfer' ))
UPDATE PINV 
SET    PINV.Status = O1.Status 
from   OrderedInvestigations O1 
INNER JOIN @pSampleTransfer pv 
ON pv.InvestigationID = O1.ID 
AND pv.Type = O1.Type
inner join PatientInvestigation PINV WITH (ROWLOCK)  
on PINV.PatientVisitID = O1.VisitID 
and Pinv.AccessionNumber = o1.AccessionNumber 
WHERE  O1.VisitID = pv.PatientVisitID 
AND O1.[UID] = pv.[UID] 
AND PINV.Status IN( 'SampleCollected', 'SampleReceived', 'Yet to Transfer' )
*********** Commented by Sathish.E  **********/
UPDATE OI
SET    OI.Status = 'SampleTransferred',
OI.ModifiedBy = ST.ModifiedBy,
OI.ModifiedAt = @pCreatedAt,
OI.ResCaptureLoc = ST.RecSampleLocID
output inserted.accessionnumber into @tmp_ordinv
FROM   @pSampleTransferNow ST
INNER JOIN PatientInvSampleMapping PISM 
ON ST.SampleID = PISM.SID -- and ST.InvestigationID =PISM.ID
AND ST.PatientVisitID = PISM.VisitID
INNER JOIN OrderedInvestigations OI WITH (ROWLOCK)
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.OrgID = OI.OrgID
WHERE  OI.VisitID = ST.PatientVisitID
AND OI.OrgID = ST.OrgID
AND OI.UID = ST.UID
--AND ST.RecSampleLocID = OI.ResCaptureLoc
AND OI.Status IN( 'SampleCollected', 'Yet to Transfer' )
UPDATE PINV
SET    PINV.Status = OI.Status
output inserted.patientinvid,inserted.status into @tmp_patinv
FROM   @pSampleTransferNow ST
INNER JOIN PatientInvSampleMapping PISM 
ON ST.SampleID = PISM.SID
AND ST.PatientVisitID = PISM.VisitID
INNER JOIN OrderedInvestigations OI 
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.OrgID = OI.OrgID
INNER JOIN PatientInvestigation PINV WITH (ROWLOCK) 
ON PINV.PatientVisitID = OI.VisitID
AND PINV.AccessionNumber = OI.AccessionNumber
WHERE  OI.VisitID = ST.PatientVisitID
AND OI.OrgID = ST.OrgID
AND OI.UID = ST.UID
--AND ST.RecSampleLocID = OI.ResCaptureLoc
AND PINV.Status IN( 'SampleCollected', 'Yet to Transfer' )
UPDATE OI
SET    OI.Status = 'SampleTransferred',
OI.ModifiedBy = ST.ModifiedBy,
OI.ModifiedAt = @pCreatedAt,
OI.ResCaptureLoc = ST.RecSampleLocID
output inserted.accessionnumber into @tmp_ordinv
FROM   @pSampleTransferNow ST
INNER JOIN PatientInvSampleMapping PISM 
ON ST.SampleID = PISM.SID
AND ST.PatientVisitID = PISM.VisitID
--AND PISM.ID = ST.InvestigationID
--AND PISM.Type = ST.Type
INNER JOIN OrderedInvestigations OI WITH (ROWLOCK) 
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.OrgID = OI.OrgID
WHERE  OI.VisitID = ST.PatientVisitID
AND OI.OrgID = ST.OrgID
AND OI.UID = ST.UID
--AND ST.RecSampleLocID = OI.ResCaptureLoc
AND OI.Status IN( 'SampleReceived' )
UPDATE PINV
SET    PINV.Status = OI.Status
output inserted.patientinvid,inserted.status into @tmp_patinv
FROM   @pSampleTransferNow ST
INNER JOIN PatientInvSampleMapping PISM 
ON ST.SampleID = PISM.SID
AND ST.PatientVisitID = PISM.VisitID
AND PISM.ID = ST.InvestigationID
AND PISM.Type = ST.Type
INNER JOIN OrderedInvestigations OI 
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.OrgID = OI.OrgID
INNER JOIN PatientInvestigation PINV WITH (ROWLOCK) 
ON PINV.PatientVisitID = OI.VisitID
AND PINV.AccessionNumber = OI.AccessionNumber
WHERE  OI.VisitID = ST.PatientVisitID
AND OI.OrgID = ST.OrgID
AND OI.UID = ST.UID
--AND ST.RecSampleLocID = OI.ResCaptureLoc
AND PINV.Status IN( 'SampleReceived' )
/****==========  Only for Non- Orderabe PKG =============****/
DECLARE @pSampleTransferForPKG AS TABLE
(
PatientVisitId  BIGINT,
SampleId        INT,
OrgID           INT,
ModifiedBy      BIGINT,
RecSampleLocId  BIGINT,
UID             nvarchar (255),
InvestigationID BIGINT,
CreatedAt       DATETIME,
Type            nvarchar (50),
PkgID           BIGINT,
PkgName         nvarchar (255)
)
INSERT INTO @pSampleTransferForPKG
(PatientVisitId,
SampleId,
OrgID,
ModifiedBy,
RecSampleLocId,
UID,
InvestigationID,
CreatedAt,
Type,
PkgID,
PkgName)
SELECT DISTINCT TM.PatientVisitID,
TM.SampleID,
TM.OrgID,
TM.ModifiedBy,
TM.RecSampleLocID,
TM.UID,
TM.InvestigationID,
TM.CreatedAt,
TM.Type,
OI.PkgID,
OI.PkgName
FROM   @pSampleTransferNow TM
INNER JOIN OrderedInvestigations OI 
ON TM.InvestigationID = OI.ID
AND TM.Type = OI.Type
WHERE  OI.VisitID = TM.PatientVisitID
AND OI.OrgID = TM.OrgID
AND OI.[UID] = TM.[UID]
AND OI.Status IN( 'SampleCollected', 'SampleReceived', 'Yet to Transfer', 'SampleTransferred' )
AND Isnull(OI.PkgID, 0) > 0
DECLARE @PKGDetails AS TABLE
(
PatientVisitID BIGINT,
PkgId          BIGINT,
OrgID          INT,
PkgName        nvarchar (255),
IsPkgLevel     BIT DEFAULT 0
)
INSERT INTO @PKGDetails
(PatientVisitID,
PkgId,
OrgID,
PkgName)
SELECT DISTINCT TT.PatientVisitId,
TT.PkgID,
TT.OrgID,
TT.PkgName
FROM   @pSampleTransferForPKG TT
WHERE  Isnull(TT.PkgID, 0) > 0
AND TT.OrgID <> @Recorgid
DECLARE @PkgIsNonOrderable AS TABLE
(
PkgID          BIGINT,
IsNonOrderable BIT DEFAULT 0
)
INSERT INTO @PkgIsNonOrderable
(PkgID,
IsNonOrderable)
SELECT DISTINCT PD.PkgID,
1
FROM   @PKGDetails PD
INNER JOIN InvGroupMaster IGM 
ON PD.PkgID = IGM.GroupID
AND IGM.Type = 'PKG'
INNER JOIN InvOrgGroup IOG 
ON PD.PkgID = IOG.AttGroupID
AND IOG.OrgID = PD.OrgID
WHERE  Isnull(IOG.IsPkgTransfer, 1) = 1
--SELECT DISTINCT PD.PkgID,
--                1
--FROM   @PKGDetails PD
--       INNER JOIN InvGroupMaster IGM 
--               ON PD.PkgID = IGM.GroupID
--                  AND IGM.Type = 'PKG'
--       INNER JOIN InvOrgGroup IOG 
--               ON PD.PkgID = IOG.AttGroupID
--                  AND IOG.OrgID = PD.OrgID
--       INNER JOIN InvPackageMapping IPM 
--               ON IOG.OrgGroupID = IPM.PackageID
--                  AND IPM.active = 'A'
--                  AND IPM.Type = 'INV'
--       INNER JOIN InvestigationOrgMapping IOM 
--               ON IPM.ID = IOM.InvestigationID
--                  AND IOM.OrgID = IOG.OrgID
--WHERE  Isnull(IOM.Display, 'N') = 'N'
--UNION ALL
--SELECT DISTINCT PD.PkgID,
--                1
--FROM   @PKGDetails PD
--  INNER JOIN InvGroupMaster IGM 
--               ON PD.PkgID = IGM.GroupID
--                  AND IGM.Type = 'PKG'
--       INNER JOIN InvOrgGroup IOG 
--               ON PD.PkgID = IOG.AttGroupID
--                  AND IOG.OrgID = PD.OrgID
--       INNER JOIN InvPackageMapping IPM 
--               ON IOG.OrgGroupID = IPM.PackageID
--                  AND IPM.active = 'A'
--                  AND IPM.Type = 'GRP'
--       INNER JOIN InvOrgGroup IOG1 
--               ON IPM.ID = IOG1.OrgGroupID
--                  AND IOG.OrgID = IOG1.OrgID
--WHERE  Isnull(IOG1.IsNonOrderable, 'N') = 'Y'
UPDATE PD
SET    PD.IsPkgLevel = 1
FROM   @PKGDetails PD
INNER JOIN @PkgIsNonOrderable PN
ON PD.PkgID = PN.PkgID
WHERE  PN.IsNonOrderable = 1
UPDATE OI
SET    OI.Status = 'SampleTransferred',
ModifiedBy = STP.ModifiedBy,
ModifiedAt = @pCreatedAt,
ResCaptureLoc = STP.RecSampleLocID
output inserted.accessionnumber into @tmp_ordinv
FROM   @PKGDetails PD
INNER JOIN @pSampleTransferForPKG STP
ON PD.PatientVisitID = STP.PatientVisitId
AND PD.OrgID = STP.OrgID
AND PD.PkgId = STP.PkgID
INNER JOIN OrderedInvestigations OI WITH (ROWLOCK) 
ON STP.PatientVisitId = OI.VisitID
AND STP.OrgID = OI.OrgID
AND STP.PkgID = OI.PkgID
INNER JOIN PatientInvSampleMapping PISM WITH (ROWLOCK) 
ON PISM.VisitId = OI.VisitID
AND PISM.OrgID = OI.OrgID
AND PISM.ID = OI.ID
AND PISM.Type=OI.Type
AND PISM.SID=STP.SampleID
WHERE  OI.VisitID = STP.PatientVisitID
AND OI.OrgID = STP.OrgID
AND OI.[UID] = STP.[UID]
AND OI.Status IN( 'SampleCollected', 'SampleReceived', 'Yet to Transfer' )
AND PD.IsPkgLevel = 1
UPDATE PI
SET    PI.Status = 'SampleTransferred'
output inserted.patientinvid,inserted.status into @tmp_patinv
FROM   @PKGDetails PD
INNER JOIN @pSampleTransferForPKG STP
ON PD.PatientVisitID = STP.PatientVisitId
AND PD.OrgID = STP.OrgID
AND PD.PkgId = STP.PkgID
INNER JOIN OrderedInvestigations OI 
ON STP.PatientVisitId = OI.VisitID
AND STP.OrgID = OI.OrgID
AND STP.PkgID = OI.PkgID
INNER JOIN PatientInvestigation PI WITH (ROWLOCK) 
ON OI.VisitID = PI.PatientVisitID
AND OI.OrgID = PI.OrgID
AND OI.AccessionNumber = PI.AccessionNumber
INNER JOIN PatientInvSampleMapping PISM WITH (ROWLOCK) 
ON PISM.VisitId = OI.VisitID
AND PISM.OrgID = OI.OrgID
AND PISM.ID = OI.ID
AND PISM.Type=OI.Type
AND PISM.SID=STP.SampleID
WHERE  OI.VisitID = STP.PatientVisitID
AND OI.OrgID = STP.OrgID
AND OI.[UID] = STP.[UID]
AND OI.Status IN( 'SampleCollected', 'SampleReceived', 'Yet to Transfer', 'SampleTransferred' )
AND PD.IsPkgLevel = 1
AND PI.Status IN ( 'SampleCollected', 'SampleReceived', 'Yet to Transfer' )
DECLARE @pSampleDetails AS TABLE
(
VisitID        BIGINT,
SampleId       BIGINT,
OrgID          INT,
RecSampleLocID BIGINT,
ModifiedBy     BIGINT
)
INSERT INTO @pSampleDetails
(VisitID,
SampleId,
OrgID,
RecSampleLocID,
ModifiedBy)
SELECT DISTINCT OI.VisitID,
PIS.SampleID,
OI.OrgID,
STP.RecSampleLocId,
STP.ModifiedBy
FROM   @PKGDetails PD
INNER JOIN @pSampleTransferForPKG STP
ON PD.PatientVisitID = STP.PatientVisitId
AND PD.OrgID = STP.OrgID
AND PD.PkgId = STP.PkgID
INNER JOIN OrderedInvestigations OI 
ON STP.PatientVisitId = OI.VisitID
AND STP.OrgID = OI.OrgID
AND STP.PkgID = OI.PkgID
INNER JOIN PatientInvSampleMapping PISM 
ON PISM.VisitID = OI.VisitID
AND PISM.ID = OI.ID
AND PISM.Type = OI.Type
AND PISM.UID = OI.UID
AND PISM.OrgID = OI.OrgID
INNER JOIN PatientInvSample PIS 
ON PISM.VisitID = PIS.PatientVisitID
AND PISM.SID = PIS.SampleID
AND PISM.OrgID = PIS.OrgID
AND PISM.UID = PIS.UID
WHERE  OI.VisitID = STP.PatientVisitID
AND OI.OrgID = STP.OrgID
AND OI.[UID] = STP.[UID]
AND OI.Status IN( 'SampleCollected', 'SampleReceived', 'Yet to Transfer', 'SampleTransferred' )
AND PD.IsPkgLevel = 1
AND PIS.SampleID   IN (SELECT DISTINCT SampleID
FROM   @pSampleTransferNow)
UPDATE PIS
SET    PIS.RecSampleLocID = PS.RecSampleLocID,
PIS.recorgid = @Recorgid,
PIS.ModifiedBy = PS.ModifiedBy,
PIS.ModifiedAt = @pCreatedAt
output inserted.sampleid,inserted.RecSampleLocID into @tmp_sample
FROM   @pSampleDetails PS
INNER JOIN PatientInvSample PIS WITH (ROWLOCK) 
ON PS.VisitID = PIS.PatientVisitID
AND PS.OrgID = PIS.OrgID
AND PS.SampleId = PIS.SampleID
INSERT INTO SampleTracker
(PatientVisitID,
SampleID,
InvSampleStatusID,
CurrentOrgID,
DeptID,
OrgID,
CollectedIn,
CreatedAt,
CreatedBy)
SELECT DISTINCT PS.VisitID,
PS.SampleID,
2,
PS.OrgID,
0,
PS.OrgID,
@CollectedIn,
@pCreatedAt,
@pCreatedBy
FROM   @pSampleDetails PS
/*******=============  End  ===================**********/
/*******************/ 
/**************For Rules Based Reflex *********************/ 
Update OI 
set    OI.ResCaptureLoc = pv.RecSampleLocID 
output inserted.accessionnumber into @tmp_ordinv
From   OrderedInvestigations OI WITH (ROWLOCK)  
INNER JOIN @pSampleTransferNow pv 
ON pv.PatientVisitID = OI.VisitID 
and OI.OrgID = PV.OrgID 
Inner Join InvOrgGroup IOG  
on OI.PkgID = IOG.AttGroupID 
and IOG.OrgID = OI.OrgID 
Inner Join InvPackageMapping IPM  
on IOG.OrgGroupID = IPM.PackageID 
and OI.ID = IPM.ID 
Where  OI.VisitID = pv.PatientVisitID 
And OI.PkgID IS NOT NULL 
AND OI.[UID] = pv.[UID] 
AND OI.Type = pv.Type
and OI.OrgID = PV.OrgID 
and IPM.IsReflex = 'Y' 
and OI.Status = 'ReflexTest' 
Update OI 
set    OI.ResCaptureLoc = pv.RecSampleLocID 
output inserted.accessionnumber into @tmp_ordinv
From   OrderedInvestigations OI WITH (ROWLOCK)  
INNER JOIN @pSampleTransferNow pv 
ON pv.PatientVisitID = OI.VisitID 
and OI.OrgID = PV.OrgID 
Inner Join InvOrgGroup IOG  
on OI.ID = IOG.AttGroupID 
and IOG.OrgID = OI.OrgID 
Inner Join InvGroupMapMaster IGMM  
on IOG.OrgGroupID = IGMM.GroupID 
Where  OI.VisitID = pv.PatientVisitID 
And OI.PkgID IS NULL 
and OI.Type = 'GRP' 
AND OI.[UID] = pv.[UID] 
AND OI.Type = pv.Type
and OI.OrgID = PV.OrgID 
and IGMM.IsReflex = 'Y' 
and OI.Status = 'ReflexTest' 
/**************For Rules Based Reflex *********************/ 
/*Code added by T.Suresh for MIS Purpose Start here */
;with cteo as
(
select row_number() over (partition by accessionnumber order by accessionnumber) as sno,accessionnumber from @tmp_Ordinv
)
delete from cteO where sno>1;
;with cteP as
(
select row_number() over (partition by patientinvid order by patientinvid) as sno,patientinvid from @tmp_patinv
)
delete from cteP where sno>1;
;with cteV as
(
select row_number() over (partition by sampleid order by sampleid) as sno,sampleid from @tmp_sample
)
delete from cteV where sno>1;
UPdate MIS Set status = OI.status , modifiedby = @pCreatedBy , Modifiedat = @pCreatedAt,ResCaptureLoc = OI.ResCaptureLoc,Transferedby = @pCreatedBy,Transitat = @pCreatedAt
From @tmp_ordinv tmp
Inner join orderedinvestigations OI  on tmp.accessionNumber = OI.accessionnumber
Inner join MISOrderedinvestigations MIS WITH (ROWLOCK)  on OI.accessionnumber = MIS.accessionnumber
Where OI.Visitid = @Visitid
Insert into MISOrderedinvestigationhistory
(
AccessionNumber,Visitid,id,type,Name,statusid,status,
CreatedBy,CreatedAt,ReferralID,ResCaptureLoc,PkgID,PkgName
)
Select mOrd.AccessionNumber,mord.Visitid,mord.id,mord.type,mord.Name,tsk.seq as statusid,mord.status,
@pCreatedBy as CreatedBy,@pCreatedAt as CreatedAt,mord.ReferralID,mord.ResCaptureLoc,mord.PkgID,mord.PkgName
From @tmp_ordinv tp
Inner join MISOrderedinvestigations MORD  on tp.Accessionnumber = MORD.Accessionnumber
Inner join ordtasks tsk  on MORD.status = tsk.status
--Left join MISOrderedinvestigationhistory OH  on tp.Accessionnumber = OH.Accessionnumber and tsk.seq = Oh.statusid and oh.Createdby = @pCreatedBy

--Where Oh.Accessionnumber is null
update MISP set status = t.status,modifiedat = @pCreatedAt ,Modifiedby = @pCreatedBy 
From @tmp_patinv t
Inner join MISpatientinvestigation MISP WITH (ROWLOCK)  on MISP.Patientinvid = t.Patientinvid
Update MPS set RecSampleLocID = tp.locid,modifiedat = @pCreatedAt ,Modifiedby = @pCreatedBy 
From @tmp_sample tp
Inner join MISPatientinvsample MPS WITH (ROWLOCK)  on tp.sampleid = MPS.Sampleid
/*Code added by T.Suresh for MIS Purpose Start here */
end 
END
END TRY
BEGIN CATCH   
			                           
    SELECT @EMsg = Error_Message(),@ELine = Error_Line(),@Eproc = Error_procedure(),@ESEVERITY = Error_SEVERITY(),@sptrace ='pUpdateSampletransfer '
	 
    exec usp_insert_errorinfo @EMsg,@ELine,@Eproc,@Eseverity,@sptrace; 
END CATCH 

END




