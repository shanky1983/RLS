SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO      
CREATE PROCEDURE [dbo].[pInsertBulkPatientInvSample] @ppatientInvSample [dbo].[PATIENTINVSAMPLECOLLECTED] READONLY,      
@pDeptID           [INT],      
@returnstatus      [INT] OUTPUT,      
@pSampleID         NVARCHAR( 1000) OUTPUT,      
@pSampleMapping    [dbo].[PATIENTINVSAMPLEMAPPING] READONLY,      
@Pinv              [dbo].[PATIENTINVESTIGATION] READONLY,      
@pInvestigationID  [dbo].[INVESTIGATIONRESULTS] READONLY,      
@ContextInfo       [UDT_CONTEXT] READONLY      
WITH EXECUTE AS OWNER      
AS      
DECLARE @pCreatedAt DATETIME      
DECLARE @PrintSampleBarcode NCHAR      
--DECLARE @ppSampleID  BIGINT                 
BEGIN      
Set nocount ON      
Set transaction isolation level read committed      
SET @returnstatus = -1      
SET @pCreatedAt = (SELECT dbo.Fn_getserverdate(@ContextInfo))      
/* Code added by T.Suresh for MIS Purpose start here */      
Declare @tmp_sample as table (sampleid bigint)      
Declare @tmp_tracker as table (SampleTrackerID int)      
declare @tmp_ordinv as table(accessionnumber bigint,collectedat datetime)      
declare @tmp_patinv as table(patientinvid bigint,status nvarchar(50))      
declare @tmp_ordhis as table(accessionnumber bigint,status nvarchar(50))      
Declare @loginid bigint,      
/* BEGIN | NA | Sabari | 19082019 | Created | Sample AutoTransfer */      
@LocationID    bigint      
/* END | NA | Sabari | 19082019 | Created | Sample AutoTransfer */      
Select @Loginid = Loginid,@LocationID=LocationID from @ContextInfo      
declare @vid bigint     
if(isnull(@LocationID,0)=0)    
begin    
select top 1 @vid=PatientVisitID from @ppatientInvSample    
select  @LocationID=Orgaddressid from patientvisit where PatientVisitID=@vid    
End    
/* Code added by T.Suresh for MIS Purpose end here */      
--DECLARE @RecOrgID INT      
--DECLARE @pPatientVisitID [BIGINT],      
--@recSampleLocId  [INT],      
--@pOrgID          INT,      
--@pCreatedBy      BIGINT      
--SELECT @pPatientVisitID = Max(PatientVisitID)      
--FROM   @ppatientInvSample      
Declare @pOrgID int,@pCreatedBy      BIGINT,@RecOrgID INT      
SELECT @pOrgID = OrgID,@RecOrgID=OrgID,      
@pCreatedBy = CreatedBy      
FROM   @ppatientInvSample      
                                
--SELECT @RecOrgID = (SELECT OrgID      
--FROM   PatientVisit WITH (NOLOCK)      
--WHERE  PatientVisitID = @pPatientVisitID)      
--SET @recSampleLocId = (SELECT OrgAddressID      
--FROM   PatientVisit WITH (NOLOCK)      
--WHERE  PatientVisitID = @pPatientVisitID)      
--UPDATE PIS      
--SET    BarcodeNumber = tmp.BarcodeNumber,      
--SampleCode = tmp.SampleCode,      
--ModifiedBy = tmp.CreatedBy,      
--ModifiedAt = @pCreatedAt,      
--SampleContainerID = tmp.SampleContainerID,      
--recSampleLocID = tmp.recSampleLocId,      
--CollectedLocID = tmp.CollectedLocID,      
--RecOrgID = @RecOrgID,      
--SampleRelationshipID = Isnull(tmp.SampleRelationshipID, 0),      
--CollectedDateTime = tmp.CollectedDateTime,      
--ExternalBarcode=tmp.ExternalBarcode      
--output inserted.sampleid into @tmp_sample      
--FROM   PatientInvSample PIS WITH(NOLOCK)      
--INNER JOIN @ppatientInvSample tmp      
--ON tmp.PatientVisitID = PIS.PatientVisitID      
--AND tmp.SampleCode = PIS.SampleCode      
--AND tmp.SampleContainerID = PIS.SampleContainerID      
--AND tmp.UID = PIS.UID      
--AND tmp.OrgID = PIS.OrgID      
--AND tmp.BarcodeNumber = PIS.BarcodeNumber      
INSERT INTO PatientInvSample      
(PatientVisitID,      
BarcodeNumber,      
SampleCode,      
OrgId,      
CreatedBy,      
CreatedAt,      
SampleContainerID,      
UID,      
recSampleLocID,      
CollectedLocID,      
RecOrgID,      
SampleRelationshipID,      
CollectedDateTime,      
VmValue,      
VmUnitID,      
SampleConditionID,      
ConsignmentNo,      
ExternalBarcode)      
output inserted.sampleid into @tmp_sample      
SELECT DISTINCT tmp.PatientVisitID,      
tmp.BarcodeNumber,      
tmp.SampleCode,      
tmp.OrgID,      
tmp.CreatedBy,      
@pCreatedAt,      
tmp.SampleContainerID,      
tmp.UID,      
tmp.recSampleLocID,      
/* BEGIN | NA | Sabari | 19082019 | Created | Sample AutoTransfer */      
--tmp.CollectedLocID,      
@LocationID,      
/* END | NA | Sabari | 19082019 | Created | Sample AutoTransfer */      
pv.OrgID,      
Isnull(tmp.SampleRelationshipID, 0),      
tmp.CollectedDateTime,      
tmp.VmValue,      
tmp.VmUnitID,      
tmp.SampleConditionID,      
tmp.ConsignmentNo,      
tmp.ExternalBarcode      
FROM   @ppatientInvSample tmp      
inner join patientvisit PV(nolock) on PV.PatientVisitId =tmp.PatientVisitID and PV.OrgID=tmp.OrgID      
LEFT JOIN PatientInvSample PIS WITH(NOLOCK)      
ON tmp.PatientVisitID = PIS.PatientVisitID      
AND tmp.SampleCode = PIS.SampleCode      
AND tmp.SampleContainerID = PIS.SampleContainerID      
AND tmp.UID = PIS.UID      
AND tmp.OrgID = PIS.OrgID      
AND PIS.BarcodeNumber = tmp.BarCodeNumber      
WHERE  PIS.SampleCode IS NULL      
--SET @ppSampleID = SCOPE_IDENTITY()                                                        
DECLARE @ServerDate DATETIME      
SELECT @ServerDate = dbo.Fn_getserverdate(@ContextInfo)      
IF NOT EXISTS(SELECT 1 '1'      
FROM   dbo.SampleTracker st WITH(NOLOCK)      
INNER JOIN @ppatientInvSample tmp      
ON tmp.PatientVisitID = st.PatientVisitID      
AND tmp.OrgID = st.OrgID      
AND tmp.InvSampleStatusID = st.InvSampleStatusID      
AND tmp.CollectedLocID = st.CollectedIn       
INNER JOIN dbo.PatientInvSample pis WITH(NOLOCK)      
ON pis.SampleID = st.SampleID      
AND pis.OrgID = tmp.OrgID      
AND pis.SampleCode = tmp.SampleCode )      
BEGIN      
INSERT INTO SampleTracker      
(PatientVisitID,      
SampleID,      
InvSampleStatusID,      
DeptID,      
Reason,      
CreatedBy,      
CreatedAt,      
OrgID,      
CollectedIn)      
output inserted.sampletrackerid into @tmp_tracker      
SELECT DISTINCT tmp.PatientVisitID,      
PIS.SampleID,      
tmp.InvSampleStatusID,      
@pDeptID,      
tmp.Reason,      
tmp.CreatedBy,      
@pCreatedAt,      
tmp.OrgID,      
/* BEGIN | NA | Sabari | 19082019 | Created | Sample AutoTransfer */      
--tmp.RecSampleLocID        
--tmp.CollectedLocID      
@LocationID      
/* END | NA | Sabari | 19082019 | Created | Sample AutoTransfer */      
FROM   @ppatientInvSample tmp      
INNER JOIN PatientInvSample PIS WITH(NOLOCK)      
ON PIs.BarcodeNumber = tmp.BarcodeNumber and PIs.PatientVisitId =tmp.PatientVisitID      
AND PIS.OrgID = tmp.OrgID      
AND PIS.SampleCode = tmp.SampleCode      
END      
ELSE      
BEGIN      
INSERT INTO SampleTracker      
(PatientVisitID,      
SampleID,      
InvSampleStatusID,      
DeptID,      
Reason,      
CreatedBy,      
CreatedAt,      
OrgID,      
CollectedIn)      
output inserted.sampletrackerid into @tmp_tracker      
SELECT DISTINCT tmp.PatientVisitID,      
PIS.SampleID,      
tmp.InvSampleStatusID,      
@pDeptID,      
tmp.Reason,      
tmp.CreatedBy,      
@pCreatedAt,      
tmp.OrgID,      
/* BEGIN | NA | Sabari | 19082019 | Created | Sample AutoTransfer */      
--tmp.RecSampleLocID        
--tmp.CollectedLocID      
@LocationID      
/* END | NA | Sabari | 19082019 | Created | Sample AutoTransfer */      
FROM   @ppatientInvSample tmp      
INNER JOIN PatientInvSample PIS WITH(NOLOCK)      
ON PIs.BarcodeNumber = tmp.BarcodeNumber and PIs.PatientVisitId =tmp.PatientVisitID      
AND PIS.OrgID = tmp.OrgID      
AND PIS.SampleCode = tmp.SampleCode      
END      
IF EXISTS(SELECT '1'      
FROM   @pSampleMapping)      
BEGIN      
INSERT INTO PatientInvSampleMapping      
(VisitID,      
OrgID,      
SampleID,      
ID,      
Type,      
DeptID,      
UID,      
Barcode,      
[SID],      
CreatedAt,      
ExternalBarcode)      
SELECT DISTINCT SM.VisitID,      
SM.OrgID,      
SM.SampleID,      
SM.ID,      
SM.Type,      
0,      
SM.UniqueID,      
SM.Barcode,      
(SELECT TOP 1 SampleID      
FROM   PatientInvSample WITH (NOLOCK)      
WHERE  SampleCode = SM.SampleID      
AND Orgid = SM.OrgID      
AND PatientVisitID = SM.VisitID      
AND UID = SM.UniqueID      
AND BarcodeNumber = SM.Barcode),      
@ServerDate,      
ExternalBarcode      
FROM   @pSampleMapping SM      
END      
EXEC [pUpdateBulkOrderedInvestigationStatusinLab]      
@pInvestigationID,      
'',      
0,      
'',      
@returnstatus output,      
@ContextInfo      
  
/* pGetInvestigationSamples Short Query*/  
--DECLARE @pgUID nvarchar(255)='8556f589-50d2-48c1-a16d-038bf283edac'                   
--DECLARE @pOrgID INT=67                   
--DECLARE @pPatientVisitID BIGINT=85007                   
DECLARE @TaskActionID BIGINT = 22  
DECLARE @TempInvestigationStatus TABLE  
(  
Status NVARCHAR(100)  
)  
DECLARE @TempSampleStatus TABLE  
(  
Status NVARCHAR(100)  
)  
DECLARE @TempInvStatus TABLE  
(  
status      NVARCHAR(100),  
DisplayText NVARCHAR(255)  
)  
DECLARE @PatientInvestigation AS TABLE  
(  
InvestigationID       BIGINT,  
InvestigationName     NVARCHAR(255),  
PatientVisitID        BIGINT,  
GroupID               BIGINT,  
GroupName             NVARCHAR(255),  
Status             NVARCHAR(100),  
CollectedDateTime     DATETIME,  
CreatedBy             BIGINT,  
Type                  NVARCHAR(20),  
OrgID                 INT,  
InvestigationMethodID BIGINT,  
KitID          BIGINT,  
InstrumentID          BIGINT,  
UID                   NVARCHAR(255),  
PackageID             INT,  
PackageName           NVARCHAR(255),  
AccessionNumber       BIGINT  
)  
IF NOT EXISTS(SELECT 1  
FROM   InvestigationStatus WITH(NOLOCK)  
WHERE  Orgid = @pOrgID)  
BEGIN  
INSERT INTO @TempInvStatus  
(status,  
DisplayText)  
SELECT Invsts.Status,  
invsts.DisplayText  
FROM   InvestigationStatus Invsts (NOLOCK)  
WHERE  Invsts.Orgid IS NULL  
INSERT INTO @TempInvStatus  
(Status,  
DisplayText)  
SELECT Status,  
Status  
FROM   dbo.Fn_getmappedstatus (@TaskActionID, 'SampleStatus', @pOrgID)  
END  
ELSE  
BEGIN  
INSERT INTO @TempInvStatus  
(status,  
DisplayText)  
SELECT Invsts.Status,  
invsts.DisplayText  
FROM   InvestigationStatus Invsts (NOLOCK)  
WHERE  Invsts.Orgid = @pOrgID  
INSERT INTO @TempInvStatus  
(Status,  
DisplayText)  
SELECT Status,  
Status  
FROM   dbo.Fn_getmappedstatus (@TaskActionID, 'SampleStatus', @pOrgID)  
END  
INSERT INTO @TempInvestigationStatus  
(Status)  
SELECT *  
FROM   dbo.Fn_getmappedstatus (@TaskActionID, 'InvestigationStatus', @pOrgID)  
INSERT INTO @TempInvestigationStatus  
(Status)  
SELECT *  
FROM   dbo.Fn_getmappedstatus (@TaskActionID, 'SampleStatus', @pOrgID)  
  
INSERT INTO @PatientInvestigation  
(InvestigationName,  
Type,  
InvestigationID,  
PatientVisitID,  
OrgID,  
Status,  
CollectedDateTime,  
UID,  
AccessionNumber,  
PackageName,  
CreatedBy,  
GroupID,  
GroupName,  
InvestigationMethodID,  
KitID,  
InstrumentID,  
PackageID)  
SELECT DISTINCT InvestigationName,  
Type,  
InvestigationID,  
PatientVisitID,  
OrgID,  
Status,  
CreatedAt,  
UID,  
AccessionNumber,  
PackageName,  
@pCreatedBy,  
0,  
NULL,  
0,  
0,  
0,  
0  
FROM   (SELECT DISTINCT Name                               AS InvestigationName,  
Type,  
ID                                 AS InvestigationID,  
VisitID                            AS PatientVisitID,  
OI.OrgID,  
OI.Status,  
OI.CreatedAt,  
OI.UID,  
AccessionNumber,  
PkgName                            AS PackageName,  
OI.ReferredType,  
(SELECT DISTINCT Isnull(Invsts.DisplayText, oi.Status)  
FROM   @TempInvStatus InvSts  
WHERE  InvSts.status = OI.Status) AS DisplayStatus  
FROM   OrderedInvestigations OI WITH (NOLOCK)  
Inner Join @ppatientInvSample T on T.Patientvisitid=OI.visitid and T.Orgid=OI.Orgid and T.UID=OI.UID  
WHERE   ( OI.Status IN(SELECT Status  
FROM   @TempInvestigationStatus) )  
AND pkgname IS NULL  
UNION ALL  
SELECT DISTINCT Name                               AS InvestigationName,  
Type,  
ID                                 AS InvestigationID,  
VisitID                            AS PatientVisitID,  
OI.OrgID,  
OI.Status,  
OI.CreatedAt,  
OI.UID,  
AccessionNumber,  
PkgName                            AS PackageName,  
OI.ReferredType,  
(SELECT DISTINCT Isnull(Invsts.DisplayText, oi.Status)  
FROM   @TempInvStatus InvSts  
WHERE  InvSts.status = OI.Status) AS DisplayStatus  
FROM   OrderedInvestigations OI WITH (NOLOCK)  
Inner Join @ppatientInvSample T on T.Patientvisitid=OI.visitid and T.Orgid=OI.Orgid and T.UID=OI.UID  
WHERE  ( OI.Status IN(SELECT Status  
FROM   @TempInvestigationStatus) )  
AND pkgname IS NOT NULL  
--Order by AccessionNumber asc                         
)TT  
ORDER  BY AccessionNumber ASC  
  
--ELSE  
--BEGIN  
--INSERT INTO @PatientInvestigation  
--(InvestigationName,  
--Type,  
--InvestigationID,  
--PatientVisitID,  
--OrgID,  
--Status,  
--CollectedDateTime,  
--UID,  
--AccessionNumber,  
--PackageName,  
--CreatedBy,  
--GroupID,  
--GroupName,  
--InvestigationMethodID,  
--KitID,  
--InstrumentID,  
--PackageID)  
--SELECT DISTINCT Name AS InvestigationName,  
--Type,  
--ID,  
--VisitID,  
--OrgID,  
--OI.Status,  
--CreatedAt,  
--UID,  
--AccessionNumber,  
--Oi.PkgName,  
--@pCreatedBy,  
--0,  
--NULL,  
--0,  
--0,  
--0,  
--0  
--FROM   OrderedInvestigations OI WITH (NOLOCK)  
--INNER JOIN @TempInvStatus InvSts  
--ON OI.Status = InvSts.Status  
--WHERE  VisitID = @pPatientVisitID  
--AND OI.OrgID = @pOrgID  
--AND ( OI.Status IN(SELECT Status  
--FROM   @TempInvestigationStatus)  
--OR OI.Status IN(SELECT Status  
--FROM   @TempSampleStatus) )  
--ORDER  BY Name ASC  
--END  
--SELECT * FROM @PatientInvestigation                     
DECLARE @p1 dbo.PATIENTINVESTIGATION  
INSERT INTO @p1  
(InvestigationID,  
InvestigationName,  
PatientVisitID,  
GroupID,  
GroupName,  
Status,  
CollectedDateTime,  
CreatedBy,  
Type,  
OrgID,  
InvestigationMethodID,  
KitID,  
InstrumentID,  
GUID,  
PackageID,  
PackageName)  
SELECT DISTINCT InvestigationID,  
InvestigationName,  
PatientVisitID,  
GroupID,  
GroupName,  
Status,  
CollectedDateTime,  
CreatedBy,  
Type,  
OrgID,  
InvestigationMethodID,  
KitID,  
InstrumentID,  
UID,  
PackageID,  
PackageName  
FROM   @PatientInvestigation  
DECLARE @p4 INT  
SET @p4=NULL  
DECLARE @p5 INT  
SET @p5=NULL  
Declare @pGUId  NVarchar(100)  
set @pGUId=null  
  
EXEC pInsertBulkInvestigation  
@pPatientInvTable=@p1,  
@OrgID=@pOrgID,  
@pOrderedInvCnt=@p4 output,  
@returnstatus=@p5 output,  
@ContextInfo=@ContextInfo  
EXEC [pUpdateBulkPatientInvestigationStatusinLab]  
@Pinv,  
@returnstatus output,  
@ContextInfo  
DECLARE @PatientID INT      
DECLARE @Gender NVARCHAR(1)      
DECLARE @pVisitID BIGINT      
SELECT top 1 @pVisitID = p.PatientVisitID      
FROM   @ppatientInvSample p      
SELECT @PatientID = pv.PatientID      
FROM   dbo.PatientVisit pv      
WHERE  pv.PatientVisitId = @pVisitID      
AND pv.OrgID = @pOrgID      
SELECT @Gender = p.SEX      
FROM   dbo.Patient p      
WHERE  p.PatientID = @PatientID      
AND p.OrgID = @pOrgID      
DECLARE @tempID AS TABLE      
(      
VisitId         BIGINT,      
AttGroupID      BIGINT,      
OrgGroupID      BIGINT,      
AccessionNumber BIGINT      
)      
INSERT INTO @tempID      
(VisitId,      
AttGroupID,      
OrgGroupID,      
AccessionNumber)      
SELECT DISTINCT pi.PatientVisitID,      
iog2.AttGroupID,      
iog2.OrgGroupID,      
oi.AccessionNumber      
FROM   dbo.OrderedInvestigations oi (nolock)      
INNER JOIN @pinv pi      
ON oi.AccessionNumber = pi.AccessionNumber      
INNER JOIN dbo.InvOrgGroup iog2      
ON iog2.AttGroupID = Oi.ID      
AND iog2.OrgiD = OI.OrgID AND oi.VisitID = pi.Patientvisitid      
WHERE  oi.Type = 'GRP'      
      
UNION      
SELECT DISTINCT T1.PatientVisitID,      
iog2.AttGroupID,      
iog2.OrgGroupID,      
T1.AccessionNumber      
FROM   @pinv T1      
INNER JOIN dbo.InvOrgGroup iog2      
ON iog2.OrgGroupID = T1.GroupID      
IF EXISTS(SELECT 1 '1'      
FROM   dbo.ConfigKeyMaster ckm WITH(NOLOCK)      
INNER JOIN dbo.ConfigOrgMaster com WITH(NOLOCK)      
ON com.ConfigKeyID = ckm.ConfigKeyID      
AND com.OrgID = @pOrgID      
WHERE  ckm.ConfigKey = 'GenderBasedInterpretation'      
AND com.ConfigValue = 'Y')      
BEGIN      
--SELECT *      
UPDATE pi      
SET    pi.Interpretation = ioim.Interpretation      
FROM   dbo.InvOrgInterpretationMapping ioim WITH(NOLOCK)      
INNER JOIN dbo.PatientInvestigation pi WITH(NOLOCK)      
ON pi.InvestigationID = ioim.IdentityID      
AND pi.OrgID = ioim.OrgID    AND pi.OrgID = @pOrgID      
INNER JOIN @pinv piv on pi.PatientVisitID=piv.PatientVisitID      
WHERE  ioim.OrgID = @pOrgID      
AND ioim.Gender = ''      
AND ioim.IsActive = 'Y'      
AND ioim.IdentityType = 'INV'      
-- SELECT *      
UPDATE pi      
SET    pi.Interpretation = ioim.Interpretation      
FROM   dbo.InvOrgInterpretationMapping ioim WITH(NOLOCK)      
INNER JOIN dbo.PatientInvestigation pi WITH(NOLOCK)      
ON pi.InvestigationID = ioim.IdentityID      
AND pi.OrgID = ioim.OrgID      
AND pi.OrgID = @pOrgID      
INNER JOIN @pinv piv on pi.PatientVisitID=piv.PatientVisitID      
WHERE   ioim.OrgID = @pOrgID      
AND ioim.Gender = @Gender      
AND ioim.IsActive = 'Y'      
AND ioim.IdentityType = 'INV'      
--INSERT INTO VisitGrpInterpretationDetails      
--(VisitId,      
--OrgID,      
--AttGrpId,      
--OrgGroupID,      
--IdentityType,      
--AccessionNumber,      
--Interpretation)      
--SELECT @pVisitID,      
--@pOrgID,      
--T.AttGroupID,      
--T.OrgGroupID,      
--ioim.IdentityType,      
--T.AccessionNumber,      
--ioim.Interpretation      
--FROM   @tempID T      
--INNER JOIN dbo.InvOrgInterpretationMapping ioim WITH(NOLOCK)      
--ON ioim.IdentityID = T.AttGroupID      
--AND ioim.OrgID = @pOrgID      
--LEFT JOIN VisitGrpInterpretationDetails VGI      
--ON VGI.VisitId = T.VisitId      
--AND VGI.AttGrpId = T.AttGroupID      
--AND VGI.OrgGroupID = T.OrgGroupID       
--WHERE  ioim.Gender = ''      
--AND ioim.IsActive = 'Y'      
--AND ioim.Interpretation <> ''      
--AND ioim.IdentityType = 'GRP'      
--AND VGI.ID IS NULL      
--INSERT INTO VisitGrpInterpretationDetails      
--(VisitId,      
--OrgID,      
--AttGrpId,      
--OrgGroupID,      
--IdentityType,      
--AccessionNumber,      
--Interpretation)      
--SELECT @pVisitID,      
--@pOrgID,      
--T.AttGroupID,      
--T.OrgGroupID,      
--ioim.IdentityType,      
--T.AccessionNumber,      
--ioim.Interpretation      
--FROM   @tempID T      
--INNER JOIN dbo.InvOrgInterpretationMapping ioim WITH(NOLOCK)      
--ON ioim.IdentityID = T.AttGroupID      
--AND ioim.OrgID = @pOrgID      
--LEFT JOIN VisitGrpInterpretationDetails VGI      
--ON VGI.VisitId = T.VisitId      
--AND VGI.AttGrpId = T.AttGroupID      
--AND VGI.OrgGroupID = T.OrgGroupID      
--WHERE  ioim.Gender = @Gender      
--AND ioim.IsActive = 'Y'      
--AND ioim.Interpretation <> ''      
--AND ioim.IdentityType = 'GRP'      
--AND VGI.ID IS NULL      
--SELECT ioim.Interpretation       
--UPDATE VGI      
--SET    vgi.Interpretation = ioim.Interpretation      
--FROM   @tempID T      
--INNER JOIN dbo.InvOrgInterpretationMapping ioim WITH(NOLOCK)      
--ON ioim.IdentityID = T.AttGroupID      
--AND ioim.OrgID = @pOrgID      
--INNER JOIN VisitGrpInterpretationDetails VGI (nolock)      
--ON VGI.VisitId = t.VisitId      
--AND vgi.AttGrpId = ioim.IdentityID      
--WHERE  ioim.Gender = @Gender      
--AND ioim.IsActive = 'Y'      
--AND ioim.Interpretation <> ''      
--AND ioim.IdentityType = 'GRP'      
END      
--ELSE      
--BEGIN      
--INSERT INTO VisitGrpInterpretationDetails      
--(VisitId,      
--OrgID,      
--AttGrpId,      
--OrgGroupID,      
--IdentityType,      
--AccessionNumber,      
--Interpretation)      
--SELECT @pVisitID,      
--@pOrgID,      
--T.AttGroupID,      
--T.OrgGroupID,      
--'GRP',      
--T.AccessionNumber,      
--iog.groupinterpretation      
--FROM   @tempID T      
--INNER JOIN dbo.InvOrgGroup iog WITH(NOLOCK)      
--ON iog.AttGroupID = T.AttGroupID      
--AND iog.OrgID = @pOrgID      
--LEFT JOIN VisitGrpInterpretationDetails VGI (nolock)      
--ON VGI.VisitId = T.VisitId      
--AND VGI.AttGrpId = T.AttGroupID      
--AND VGI.OrgGroupID = T.OrgGroupID      
--WHERE  iog.AttGroupID = T.AttGroupID      
--AND iog.OrgID = @pOrgID      
--AND iog.groupinterpretation <> ''      
--AND VGI.ID IS NULL      
--END      
UPDATE PIV      
SET    PIV.Status = 'ReflexTest',      
PIV.statustype = 'RF'      
output inserted.PatientInvID,inserted.status into @tmp_patinv      
FROM   PatientInvestigation PIV (nolock)      
INNER JOIN OrderedInvestigations OI (NOLOCK)   
ON OI.AccessionNumber = piv.AccessionNumber      
AND oi.VisitID = piv.PatientVisitID      
INNER JOIN @Pinv OrdInv      
ON PIV.GroupID = OrdInv.GroupID      
AND PIV.AccessionNumber = OrdInv.AccessionNumber      
AND piv.PatientVisitID = OrdInv.PatientVisitID      
WHERE  piv.InvestigationID IN (SELECT IGMM.InvestigationID      
FROM   PatientInvestigation PIV (NOLOCK)      
INNER JOIN @Pinv OrdInv      
ON PIV.GroupID = OrdInv.GroupID      
AND PIV.AccessionNumber = OrdInv.AccessionNumber      
AND piv.PatientVisitID = OrdInv.PatientVisitID      
INNER JOIN InvOrgGroup IOG (nolock)      
ON IOG.OrgGroupID = PIV.GroupID      
AND IOG.OrgID = @pOrgID      
INNER JOIN InvGroupMapMaster IGMM (nolock)      
ON IGMM.GroupID = IOG.OrgGroupID      
AND IGMM.Active <> 'N'      
AND Isnull(IGMM.IsReflex, 'N') = 'Y'      
INNER JOIN InvestigationOrgMapping IOM (nolock)      
ON IOM.InvestigationID = IGMM.InvestigationID      
AND IGMM.Parent = 'N'      
AND IOM.OrgID = @pOrgID      
INNER JOIN InvestigationMaster IM (nolock)      
ON IM.InvestigationID = IOM.InvestigationID      
WHERE  PIV.PatientVisitID = OrdInv.PatientVisitID      
AND OI.Type = 'GRP'      
AND NOT EXISTS (SELECT 1      
FROM   PatientInvestigation PI (nolock)      
WHERE  PI.GroupID = OrdInv.GroupID      
AND PI.Status IN ( 'Ordered', 'Paid', 'Refered' )      
AND PI.PatientVisitID = OrdInv.PatientVisitID))      
AND PIV.OrgID = @pOrgID      
DECLARE @tableSampleIDs AS TABLE      
(      
Sno      INT IDENTITY(1, 1),      
VisitID  BIGINT,      
SampleID BIGINT      
)      
INSERT INTO @tableSampleIDs      
(VisitID,      
SampleID)      
--VALUES(1,111),(1,222),(1,333)                 
SELECT PISM.VisitID,      
PISM.SID      
FROM   @pSampleMapping temp      
INNER JOIN PatientInvSampleMapping PISM WITH(NOLOCK)      
ON PISM.Barcode = temp.Barcode      
AND PISM.OrgID = temp.OrgID      
AND PISM.VisitID = temp.VisitID      
--SELECT * FROM @pSampleMapping                 
--SELECT * FROM @tableSampleIDs                 
      
CREATE TABLE #tempaccforoutboundreceivedstatus      
(      
id                BIGINT,      
NAME              VARCHAR(1000),      
type              VARCHAR(50),      
accessionnumber   BIGINT,      
teststatus        VARCHAR(50),      
patientvisitid    BIGINT,      
orderedid         BIGINT,      
collecteddatetime DATETIME,      
reason            VARCHAR(1000),      
OrgID             BIGINT      
)      
INSERT #tempaccforoutboundreceivedstatus      
SELECT DISTINCT Oi.id,      
Oi.NAME,      
OI.type,      
Oi.accessionnumber,      
Oi.status,      
Oi.visitid,      
Oi.orderedid,      
PIS.collecteddatetime,      
CASE      
WHEN Oi.status = 'Rejected' THEN sampletracker.reason      
ELSE ''      
END,      
OI.OrgID      
FROM   patientinvsamplemapping PINV WITH(nolock)      
INNER JOIN @pSampleMapping ST      
ON PiNV.id = ST.id      
AND PINV.type = St.type      
INNER JOIN patientinvsample PIs WITH(nolock)      
ON PINV.sid = PIS.sampleid      
AND PInv.visitid = PIS.patientvisitid      
AND Pinv.uid = PIS.uid      
INNER JOIN sampletracker WITH(nolock)      
ON sampletracker.patientvisitid = PIS.patientvisitid      
AND sampletracker.sampleid = pis.sampleid      
INNER JOIN orderedinvestigations OI WITH(nolock)      
ON OI.visitid = PINV.visitid      
WHERE  PINV.visitid = ST.visitid      
-- AND orderedid > 0                 
AND OI.status IN( 'SampleReceived', 'Rejected' )      
AND sampletracker.invsamplestatusid IN( 3, 4 )      
--IF NOT EXISTS(SELECT 1                 
--              FROM   hl7outboundmessagedetails Hl                 
--              WHERE  accessionnumber IN(SELECT accessionnumber                 
--                                        FROM                 
--                     #tempaccforoutboundreceivedstatus                 
--                     Temp                 
--                   WHERE                 
--                     Hl.teststatus = Temp.teststatus))               
IF EXISTS(SELECT 1      
FROM   dbo.configkeymaster ckm WITH(nolock)      
INNER JOIN dbo.configorgmaster com WITH(nolock)      
ON com.configkeyid = ckm.configkeyid      
AND com.orgid = @pOrgID      
WHERE  ckm.configkey = 'HL7OutBoundMessage'      
AND com.configvalue = 'Y')      
BEGIN      
IF EXISTS(SELECT 1      
FROM   dbo.configkeymaster ckm WITH(nolock)      
INNER JOIN dbo.configorgmaster com WITH(nolock)      
ON com.configkeyid = ckm.configkeyid      
AND com.orgid = @pOrgID      
WHERE  ckm.configkey = 'StatusBasedHL7OutBoundMessage'      
AND com.configvalue != 'N')      
BEGIN      
INSERT hl7outboundmessagedetails      
(id,      
NAME,      
type,      
teststatus,      
patientvisitid,      
OrgID,      
orderedid,      
accessionnumber,      
collecteddatetime,      
createdat,      
createdby,      
reason)      
SELECT id,      
NAME,      
type,      
teststatus,      
patientvisitid,      
@pOrgID,      
orderedid,      
accessionnumber,      
collecteddatetime,      
@pCreatedAt,      
@pCreatedBy,      
reason      
FROM   #tempaccforoutboundreceivedstatus      
--   IF EXISTS(SELECT 1              
--FROM   dbo.configkeymaster ckm WITH(nolock)             
--       INNER JOIN dbo.configorgmaster com WITH(nolock)             
--               ON com.configkeyid = ckm.configkeyid             
--                  AND com.orgid = @pOrgID             
--WHERE  ckm.configkey = 'StatusBasedHL7OutBoundMessage'             
--       AND com.configvalue = 'N')             
--       begin          
--      update H set H.status='Restricted'                           
--       from hl7outboundmessagedetails H          
--       inner join #tempaccforoutboundreceivedstatus Temp on H.patientvisitid=Temp.PatientVisitid and H.OrgID=Temp.OrgID          
--        where H.TestStatus='SampleReceived' and isnull(H.Status,'') =''          
--       End                
END      
END      
/* Code added by T.Suresh for MIS Purpose start here */      
;with cte as       
(      
Select row_number() over (partition by sampleid order by sampleid) as sno,sampleid  from @tmp_sample      
)      
delete from cte where sno>1      
Update MPIS set barcodeNumber = PIS.BarcodeNumber, CollectedDateTime = PIS.CollectedDateTime,      
RecSampleLocID = PIS.RecSampleLocID,CollectedLocID = PIS.CollectedLocID, modifiedat = @serverdate , Modifiedby = PIS.modifiedby      
,SampleRelationshipID = PIS.SampleRelationshipID      
output inserted.accessionnumber ,inserted.CollectedDateTime into @tmp_ordinv      
From @tmp_sample ts      
Inner join patientinvsample PIS (nolock) on ts.sampleid = pis.SampleID      
Inner join MISPatientinvsample MPIS (nolock) on PIS.Sampleid = MPIS.Sampleid      
Insert into mispatientinvsample      
(      
Sampleid, AccessionNumber, SampleCode, SampleDesc,      
CollectedDateTime, RecSampleLocID, CollectedLocID, Createdby,      
Createdat, modifiedby, modifiedat,BarcodeNumber,PatientVisitID,SampleRelationshipID      
)      
output inserted.accessionnumber ,inserted.CollectedDateTime into @tmp_ordinv      
Select distinct      
PIS.Sampleid, ORD.AccessionNumber, PIS.SampleCode, PIS.SampleDesc,      
PIS.CollectedDateTime, PIS.RecSampleLocID, PIS.CollectedLocID, PIS.Createdby,      
@ServerDate, PIS.modifiedby, @ServerDate,PIS.BarcodeNumber,PIS.PatientVisitID,PIS.SampleRelationshipID      
From @tmp_sample ts      
Inner join patientinvsample PIS (nolock) on ts.sampleid = pis.SampleID      
Inner join PatientInvSampleMapping PISM (nolock) on PIS.Sampleid = PISM.SID      
Inner join Orderedinvestigations ORD (nolock) on PISM.Visitid = ORD.Visitid and PISM.ID = ORD.ID and PISM.Type = ORD.Type      
left join MISPatientinvsample MPIS (nolock) on PIS.Sampleid = MPIS.Sampleid      
INNER JOIN @pinv piv on PIS.PatientVisitID=piv.PatientVisitID      
Where  MPIS.Sampleid is null      
;with cteO as       
(      
Select row_number() over (partition by accessionnumber order by accessionnumber) as sno,accessionnumber,collectedat  from @tmp_ordinv      
)      
delete from cteO where sno>1      
Update MORD set Collectedat = isnull(Tp.Collectedat,MORD.collectedat), modifiedat = @serverdate,Collectedby =  @Loginid      
--output inserted.Accessionnumber,'SampleCollected' as status into @tmp_ordhis      
From @tmp_ordinv tp      
Inner join MISOrderedinvestigations MORD (nolock) on tp.accessionNumber = MORD.accessionNumber      
Update MISO  set Receivedat = isnull(ST.Createdat,MISO.Receivedat),modifiedat = @serverdate,Receivedby = @Loginid      
--output inserted.Accessionnumber,'SampleReceived' as status into @tmp_ordhis      
From @tmp_tracker tk      
Inner join sampletracker ST (nolock) on tk.Sampletrackerid = ST.Sampletrackerid      
Inner join MISPatientinvsample MPIS (nolock) on ST.Sampleid = MPIS.Sampleid      
Inner join MISorderedinvestigations MISO (nolock) ON MPIS.AccessionNumber = MISO.AccessionNumber      
Where st.InvSampleStatusID = 3      
update MPI Set status = tp.status      
from Mispatientinvestigation MPI (nolock)      
Inner join @tmp_patinv tp on MPI.patientinvid = tp.patientinvid      
/* Code added by T.Suresh for MIS Purpose end here */      
      
 /*BEGIN | Bug ID[NA] | TAT |  | A |  TAT Integration  */      
    DECLARE @UID varchar(255)      
 DECLARE @TATDATE VARCHAR(20)      
      DECLARE @ReportDeliveryDATE VARCHAR(25)      
   DECLARE @pTatDateTime DATETIME      
      DECLARE @p_TATCalculationDateTime DATETIME      
      DECLARE @p_TATProcessDateTime DATETIME      
      DECLARE @p_SampleReceiptDateTime DATETIME      
      DECLARE @p_ProcessStartDateTime DATETIME      
      DECLARE @p_ReportDateTime DATETIME      
      DECLARE @p_TATDateTime DATETIME      
      DECLARE @IsProcessing BIT = 0      
      DECLARE @Tatprocessdatetype SMALLINT      
       DECLARE @pClientID BIGINT      
      DECLARE @pFinalbillID BIGINT      
       DECLARE @p_LogisticTimeasmins     SMALLINT      
   DECLARE @p_Processinghoursasmins  INT --SMALLINT --Corrected by SYED      
   DECLARE @p_LabendTime             TIME        
   DECLARE @p_EarlyReportTime        TIME        
   DECLARE @p_Isdebug BIT=0      
   DECLARE @p_TATReferenceDateBase int=0      
      
     DECLARE @PatientVisitDateTime DATETIME      
      
   --SET @RecSampleLocId = (SELECT LocationID      
   --                          FROM   @ContextInfo )      
      
      --SELECT @pPatientVisitID = Max(PatientVisitID)      
      --FROM   @ppatientInvSample      
      
      --SELECT @RecOrgID = OrgID,      
      --       @PatientVisitDateTime = PV.VisitDate      
      --FROM   PatientVisit PV WITH (NOLOCK)      
      --WHERE  PatientVisitID = @pPatientVisitID      
      --   SELECT @pClientID = Max(ClientID)      
      --FROM   VisitClientMapping VCM WITH(NOLOCK)      
      --WHERE  VCM.OrgID = @RecOrgID      
      --       AND VisitID = @pPatientVisitID      
      --       AND Isnull(IsActive, 'Y') = 'Y'      
      
      DECLARE @TatDetail AS TABLE      
        (      
           RowId                    INT IDENTITY(1, 1),      
           ID                       BIGINT,      
           Type                     VARCHAR(10),      
           TatDateTime              DATETIME,      
           ReportDateTime           DATETIME,      
           TATProcessDateTime       DATETIME,      
           TATSampleReceiptDateTime DATETIME,      
           TATProcessStartDateTime  DATETIME,      
           VisitID                  BIGINT,      
      
           BillingdetailsId         BIGINT,      
           Logistictimeinmins       smallint,      
           Processingtimeinmins     int,      
           Labendtime    Time,      
           Earlyreporttime          Time,      
           ExcludeVIDlockID         int,      
           CustomerCommittedTAT     DATETIME,      
           Excludetime              INT,      
           OrgID                    INT,      
       UID varchar(255)      
        )      
      
--SELECT ---@pClientID = ClientID,      
--      @pFinalbillID = FinalBillID      
--      FROM   VisitClientMapping vcm WITH(NOLOCK)      
--      WHERE  visitid = @pPatientVisitID      
--             AND Isnull(vcm.IsActive, 'Y') != 'N'      
      
      -- select * from VisitClientMapping       
      --SELECT @Tatprocessdatetype = Tatprocessdatetype      
      --FROM   clientmaster WITH(NOLOCK)      
      --WHERE  clientid = @pClientID      
      
      DECLARE @totaltestcount INT      
      DECLARE @incrementcount INT      
      DECLARE @configKeyID INT      
      DECLARE @ConfigValue VARCHAR(50)      
      DECLARE @p_OrgId INT = @RecOrgID      
      DECLARE @p_TestId BIGINT      
      DECLARE @p_TestType VARCHAR(5)      
      DECLARE @p_ClientId BIGINT = @pClientID      
      DECLARE @BillingdetailsId BIGINT      
      
      SELECT @configKeyID = ConfigKeyID      
      FROM   ConfigKeyMaster WITH(NOLOCK)      
      WHERE  ConfigKey = 'TAT'      
      
      SELECT @ConfigValue = ConfigValue      
      FROM   ConfigOrgMaster WITH(NOLOCK)      
      WHERE  ConfigKeyID = @configKeyID      
             AND OrgID = @RecOrgID          
      DECLARE @INVESTIGATIONRESULTS AS TABLE      
        (      
           RowId             INT IDENTITY(1, 1),      
           FeeId             BIGINT,      
           FeeType           VARCHAR(10),      
           CollectedDateTime DATETIME,      
           --   AccessionNumber   BIGINT,      
           BillingdetailsId  BIGINT,      
     UID varchar(255)      
      
        )      
      
      SELECT @ReportDeliveryDATE = NULL      
   SELECT @pTatDateTime=NULL      
      
      IF ( Isnull(@ConfigValue, 'N') = 'Y' )      
        BEGIN      
       IF EXISTS (SELECT 1      
                       FROM   dbo.ConfigKeyMaster ckm WITH (NOLOCK)      
                              INNER JOIN dbo.ConfigOrgMaster com WITH (NOLOCK)      
                                      ON com.ConfigKeyID = ckm.ConfigKeyID      
                                         AND com.OrgID = @pOrgID      
                       WHERE  ckm.ConfigKey = 'NewTATLogic'      
                              AND com.ConfigValue = 'Y')      
              BEGIN      
         --   IF @Tatprocessdatetype = 1      
           --   BEGIN      
                  SET @incrementcount = 1      
      
                  INSERT INTO @INVESTIGATIONRESULTS      
                  SELECT DISTINCT OI.ID,      
                                  OI.Type,      
                                  tmp.CollectedDateTime,      
                                  NULL,--bd.BillingDetailsID      
          OI.UID      
                  FROM   @ppatientInvSample tmp      
                         INNER JOIN @pSampleMapping PIS      
                                 ON PIs.Barcode = tmp.BarcodeNumber      
                                    AND PIS.OrgID = tmp.OrgID      
                                    AND PIS.SampleID = tmp.SampleCode      
                         INNER JOIN OrderedInvestigations oi WITH (nolock)      
                                 ON PIS.ID = oi.ID      
                                    AND PIS.Type = oi.Type      
                                    AND oi.OrgID = PIS.OrgID      
         INNER JOIN @pinv piv on OI.VisitID=piv.PatientVisitID      
                       --  INNER JOIN BillingDetails Bd WITH(noLOCK)      
                       --          ON BD.BillingDetailsID = oi.BillingDetailsID      
                      
                  SELECT @totaltestcount = Count(*)      
 FROM   @INVESTIGATIONRESULTS      
      
                  WHILE @incrementcount <= @totaltestcount      
                    BEGIN      
                        SELECT @p_TestId = FeeId,      
                               @p_TestType = FeeType,      
                               @p_TATCalculationDateTime = CollectedDateTime,      
                               @BillingdetailsId = BillingDetailsID,      
            @UID=UID      
                        FROM   @INVESTIGATIONRESULTS      
                        WHERE  RowId = @incrementcount      
      
              EXEC dbo.Pgettatreportdatetime      
                          @p_OrgId,      
                          @p_TestId,      
                          @p_TestType,      
                          @p_ClientId,      
  @p_TATCalculationDateTime,      
                          @p_TATProcessDateTime OUTPUT,      
                                @p_LogisticTimeasmins  OUTPUT,      
                          @p_SampleReceiptDateTime OUTPUT,      
                                @p_Processinghoursasmins OUTPUT,      
                          @p_ProcessStartDateTime OUTPUT,      
                          @p_TATDateTime OUTPUT,      
                                @p_LabendTime OUTPUT,      
                                @p_EarlyReportTime OUTPUT,      
                          @p_ReportDateTime OUTPUT,      
                                @p_Isdebug,         
                          @ContextInfo      
      
                        INSERT INTO @TatDetail      
                        SELECT @p_TestId,      
                               @p_TestType,      
                               @p_TATDateTime,      
                               @p_ReportDateTime,      
                               @p_TATProcessDateTime,      
                               @p_SampleReceiptDateTime,      
                               @p_ProcessStartDateTime,      
                               0,      
      
                               @BillingdetailsId,      
                               @p_LogisticTimeasmins,      
                               @p_Processinghoursasmins,      
                               @p_LabendTime,      
                                     @p_EarlyReportTime,      
                                     NULL                                                                                AS ExcludeVIDlockID,      
                                     NULL                                                                                AS CustomerCommittedTAT,      
                                     Abs(Round(Datediff(hh, @p_ReportDateTime, CAST(@PatientVisitDateTime AS DATE)), 0)) as Excludetime,      
                                     @p_OrgId,      
          @UID      
      
                        SET @incrementcount = @incrementcount + 1      
                    END      
      
                        UPDATE T      
                        SET    ExcludeVIDlockID = TVLE.ID      
                        FROM   @TatDetail T      
                               INNER JOIN TATVIDLockExclude TVLE (NOLOCK)      
                                       ON TVLE.OrgID = T.OrgID      
                                          AND TVLE.Isactive = 1      
                        WHERE  Excludetime BETWEEN TVLE.StartValue AND TVLE.EndValue      
      
                        UPDATE T      
                        SET    ExcludeVIDlockID = 9999      
                        FROM   @TatDetail T      
                        WHERE  ExcludeVIDlockID IS NULL      
                               AND ReportDateTime < CAST(@PatientVisitDateTime AS DATE);      
      
                        WITH TempCustomerCommittedTAT      
                             AS (SELECT ExcludeVIDlockID,      
                                        MAX(ReportDateTime) As CustomerCommittedTAT      
                                 FROM   @TatDetail TT      
                                 GROUP  BY ExcludeVIDlockID)      
                        --SELECT * FROM TempCustomerCommittedTAT      
                        UPDATE TT      
                        SET    TT.CustomerCommittedTAT = TP.CustomerCommittedTAT      
                        FROM   @TatDetail TT      
                               INNER JOIN TempCustomerCommittedTAT TP      
                                       ON TP.ExcludeVIDlockID = TT.ExcludeVIDlockID      
      
      
      UPDATE TT      
      SET    TT.CustomerCommittedTAT = TT.ReportDateTime      
      FROM   @TatDetail TT WHERE ExcludeVIDlockID IS NULL      
                  UPDATE oi      
                  SET    TatDateTime = td.TatDateTime,      
                         ReportDateTime = td.ReportDateTime,      
      
                         Tatreferencedatetime = td.TATProcessDateTime,      
      
                         Tatsamplereceiptdatetime = td.TATSampleReceiptDateTime,      
      
                         Tatprocessstartdatetime = td.TATProcessStartDateTime,      
            
      Logistictimeinmins=td.Logistictimeinmins,      
            
      Processingtimeinmins=td.Processingtimeinmins,      
            
      Labendtime=td.Labendtime,      
            
      Earlyreporttime=td.Earlyreporttime,      
            
      Tatreferencedatebase=@Tatprocessdatetype      
      
                  FROM   orderedinvestigations oi WITH(nolock)      
                        INNER JOIN @TatDetail TD  ON OI.ID = TD.ID AND OI.UID = TD.UID   AND OI.UID=TD.UID      
                        Inner Join  @Pinv  P on OI.visitid=P.Patientvisitid      
      
                  UPDATE bd      
                  SET    TatDateTime = td.TatDateTime,      
                         ReportDateTime = td.ReportDateTime,      
      
                         Tatreferencedatetime = td.TATProcessDateTime,      
      
                         Tatsamplereceiptdatetime = td.TATSampleReceiptDateTime,      
      
                         Tatprocessstartdatetime = td.TATProcessStartDateTime,      
      Logistictimeinmins=td.Logistictimeinmins,      
      Processingtimeinmins=td.Processingtimeinmins,      
      Labendtime=td.Labendtime,      
      Earlyreporttime=td.Earlyreporttime,      
                               Tatreferencedatebase = @Tatprocessdatetype,      
                               CustomerCommittedTAT = TD.CustomerCommittedTAT      
                  FROM   BillingDetails BD WITH(nolock)      
                         INNER JOIN @TatDetail TD      
                                 ON BD.BillingDetailsID = td.BillingDetailsID      
                  WHERE  FinalBillID = @pFinalbillID      
      
                  SELECT @pTatDateTime = Max(TatDateTime)      
                  FROM   @TatDetail      
      SELECT @ReportDeliveryDATE = Max(ReportDateTime)      
                  FROM   @TatDetail      
      
                  UPDATE fb      
                  SET    fb.TATDate = @pTatDateTime,      
                         fb.ReportDateTime = @ReportDeliveryDATE      
                  FROM   finalbill fb (nolock)      
       Inner Join  @Pinv P on fb.VisitID = p.PatientVisitID      
                               
                  WHERE   fb.OrgID = @RecOrgID      
              END      
     --END      
        END      
      
       
        
  SELECT @pSampleID = (SELECT DISTINCT CONVERT(NVARCHAR, t2.SampleID, 50)+ ','      
FROM   patientinvsample t2 with(nolock)      
inner join   @ppatientInvSample t1      
on  t1.patientVisitID = t2.patientVisitID and t1.barcodenumber=t2.barcodenumber      
      
FOR XML PATH(''))      
      
       
         
 /*END | Bug ID[NA] | TAT |  | A |  TAT Integration  */      
      
DROP TABLE #tempaccforoutboundreceivedstatus      
SET @returnstatus = 0      
END      
      
      
      
    
    
    
  
    
    
    
  
  
  