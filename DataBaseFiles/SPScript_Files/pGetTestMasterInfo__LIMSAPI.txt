CREATE PROCEDURE [dbo].[pGetTestMasterInfo__LIMSAPI]

	@pOrgCode NVARCHAR(100),
	@pType [nvarchar](255),
	@TestCode NVARCHAR(100),
	@Page INT,
    @Size INT
AS
BEGIN  

--pGetTestMasterInfo__LIMSAPI 'LIMSAPI','GRP','',1,2242

      
DECLARE  @pOrgID INT = NULL, @pOrgAddrID INT = NULL, @pStatus NVARCHAR(50)       


DECLARE @MaxRecordCount INT
 DECLARE @MaxCountReached BIT
 DECLARE @TotalRecords INT


 SELECT @MaxRecordCount=MaximumRecordCount 
 FROM APIConfiguration 
 WHERE SPName='pGetTestMasterInfo__LIMSAPI'

 IF @Size > @MaxRecordCount
 BEGIN
    SET @Size = @MaxRecordCount
    SET @MaxCountReached=1
 END


IF EXISTS(Select 1 from Integrationtypemaster where IntegrationTypeName = @pOrgCode)
   BEGIN
	  SELECT @pOrgID = VOM.AttuneOrgID, @pOrgAddrID = VOA.AttuneOrgAddressID, 
	         @pStatus = case ITM.Status when 1 then 'Active' else 'Inactive' end 
		FROM Integrationtypemaster ITM
			INNER JOIN VendorOrgMapping VOM ON ITM.IntegrationTypeID = VOM.VendorID
			INNER JOIN vendorOrgAddressMapping VOA ON VOA.VendorID = VOM.VendorID
		WHERE ITM.IntegrationTypeName = @pOrgCode
	END

	CREATE TABLE #TempINVPaging
	(
	 InvestigationID       BIGINT,     
     TestCode nvarchar(50),
	 TestName NVARCHAR(MAX),
	 Type nvarchar(20),    --(INV,GRP, PKG) ,
	 OrgId INT,
	 Gender NVARCHAR(20),
	 DeptID int,
	 Samplecode int,
	 SampleContainerID int,
	 Status NVARCHAR(50)
	 
	)


   CREATE TABLE #TempGRPPaging
	(
	  AttGroupID BIGINT,
	 OrgGroupID       BIGINT,     
     TestCode nvarchar(50),
	 Type nvarchar(20),    --(INV,GRP, PKG) ,
	 OrgID INT,
	 DisplayText NVARCHAR(1000),
	 Status NVARCHAR(20),
	 Gender NVARCHAR(20)
	 
	)


	CREATE TABLE #TempPKGPaging
	(
	DisplayText NVARCHAR(1000),
	AttGroupID BIGINT,
	OrgGroupID BIGINT,
	TestCode NVARCHAR(50),
	Type NVARCHAR(10),
	OrgID INT,
	Status NVARCHAR(20),
	Gender NVARCHAR(20)
	)

	CREATE TABLE #Temp_Result
	(
		--PatientVisitID         BIGINT,     
        InvestigationID       BIGINT,     
		TestCode nvarchar(50), 
		Testname nvarchar(1000), 
		Type nvarchar(20),    --(INV,GRP, PKG)  
		Gender nvarchar(20), 
		InvestigationName      nvarchar(100),  
		InvInvestigationID bigint,
		INVTestCode     nvarchar(100),  
		INV_InvestigationName      nvarchar(100),   
		SampleID INT, 
		SampleCode NVARCHAR(100)  ,
		--SampleType             nvarchar(100),   
		SampleName   nvarchar(100),    
		SampleContainerID  INT,     
		ContainerName  nvarchar(255),    
		SampleContainerColor nvarchar(100),          
		Price decimal(18,2),    
		GRPPrice decimal(18,2),      
		PKGPrice decimal(18,2),    
        DepartmentID    INT,    
		DeparmentName  nvarchar(255),    
		Status NVARCHAR(10) , --(Active/Inactive)
		OrgID bigint
)
                        
 IF (@pType = 'INV')          
BEGIN      

    SELECT @TotalRecords = COUNT(1) 
	FROM InvestigationOrgMapping IOM  WITH(NOLOCK) 
	WHERE IOM.OrgID=@pOrgID and IOM.IsActive='Y' 
	AND (IOM.TestCode=@TestCode OR @TestCode='')
	
	INSERT INTO #TempINVPaging(InvestigationID,TestCode,TestName,Type,OrgId,Gender,DeptID,Samplecode,SampleContainerID,Status)
	SELECT InvestigationId,TestCode,DisplayText,'INV',OrgId,Gender ,DeptID,Samplecode,SampleContainerID, 
	 case when ISNULL(IsActive,'N') = 'Y' then 'Active' else 'Inactive' end as IsActive
	FROM InvestigationOrgMapping IOM  WITH(NOLOCK) WHERE 
	IOM.OrgID=@pOrgID 
	AND (TestCode=@TestCode OR @TestCode='')
	 ORDER BY InvestigationID
      OFFSET (@Page -1) * @Size ROWS
      FETCH NEXT @Size ROWS ONLY                                  
 
 --	SELECT @TotalRecords = COUNT(1) FROM InvestigationOrgMapping IOM  WITH(NOLOCK) 
	--inner join  #TempINVPaging T WITH(NOLOCK)  on  T.InvestigationID=IOM.InvestigationID
	--WHERE IOM.OrgID=@pOrgID and IOM.IsActive='Y' 
	--AND (IOM.TestCode=@TestCode OR @TestCode='') and T.Type=@pType 


 INSERT #Temp_Result     
                         (
						  
							InvestigationID, 
							TestCode, 
							Testname, 
							Type,    --(INV,GRP, PKG)  
							Gender, 	
							InvestigationName,      
							SampleCode, 
							SampleName,    
							SampleContainerID,
							ContainerName, 
							SampleContainerColor,  
							DepartmentID,               
							DeparmentName, 
							Status,
							OrgID
							)     
     SELECT DISTINCT  
                                  IOM.InvestigationID, 
								  TestCode,  
								  IOM.TestName,
                                  @pType,
								  Gender,
                                  IOM.TestName,
								  ISM.SampleCode,
								  ISM.SampleDesc,     
								  ISC.SampleContainerID,
								  ISC.ContainerName,                                  
                                  ISC.ContainerColor,
								  IOM.DeptID DepartmentID,
                                  IDM.DeptName,   
								  IOM.Status,
								  IOM.OrgId
								   
								  FROM   #TempINVPaging IOM (nolock)  
				  inner join InvDeptMaster IDM on IDM.DeptID=IOM.DeptID and IDM.LangCode='en-GB'
				  AND IDM.OrgId=IOM.OrgID
                         left JOIN InvSampleMaster ISM (nolock)     
                                 ON IOM.samplecode = ISM.samplecode     
                                    AND ISM.OrgId = IOM.OrgId AND ISM.LangCode ='en-GB'   
                         left JOIN InvestigationSampleContainer ISC (nolock)     
                                 ON IOM.SampleContainerID = ISC.SampleContainerID     
                                    AND ISC.OrgID = IOM.OrgId AND ISC.LangCode ='en-GB'     
				WHERE  IOM.OrgID = @pOrgID   
				 
update TR set TR.Price=IRC.Rate 
from #Temp_Result TR   
INNER JOIN InvRateMaster  IRC ON IRC.ID=TR.InvestigationID  AND IRC.Type='INV'
INNER JOIN RateMaster R (NOLOCK) ON R.OrgID=TR.OrgID AND R.RateCode='GENERAL'  AND IRC.RateID=R.RateID
		--	select * from #Temp_Result		
  END    
  
  --  return;              
IF (@pType = 'GRP')    
  BEGIN     

	SELECT @TotalRecords = COUNT(1) 
              FROM   InvOrgGroup IOG WITH (NOLOCK)
                   LEFT JOIN InvGroupMaster IGM WITH (NOLOCK)
                          ON IGM.GroupID = IOG.AttGroupID
            WHERE  IGM.Type = 'GRP'
                   AND (IGM.TestCode=@TestCode OR @TestCode='')
                   AND IOG.OrgID = @pOrgID and IGM.Type=@pType
            


  	INSERT INTO #TempGRPPaging(AttGroupID,OrgGroupID,TestCode,Type,OrgID,DisplayText,Status,Gender)
	SELECT IOG.AttGroupID,IOG.OrgGroupID,IOG.TestCode,'GRP',IOG.OrgId,IOG.DisplayText,
	case when ISNULL(IOG.Status,'N') = 'Y' then 'Active' else 'Inactive' end as Status, IOG.Gender FROM InvOrgGroup IOG  
	WITH(NOLOCK) WHERE IOG.OrgID=@pOrgID
	AND (IOG.TestCode=@TestCode OR @TestCode='')
	 ORDER BY IOG.OrgGroupID
      OFFSET (@Page -1) * @Size ROWS
      FETCH NEXT @Size ROWS ONLY  
	   
  
                  ;WITH GRPDET   
                       AS 
					    ( SELECT distinct Cast(IOG.AttGroupID AS BIGINT) AS     
                                  ParentAttGroupID,
					              Cast(IOG.OrgGroupID AS     
                                       BIGINT)  AS ParentOrgGroupID,     
                                  Cast(IGMM.InvestigationID AS BIGINT) AS     
                                  ChildGroupID     
                           FROM   #TempGRPPaging IOG  with(nolock)     
                                  LEFT JOIN InvGroupMapMaster IGMM with (nolock)     
                                         ON IOG.OrgGroupID = IGMM.GroupID     
                                            AND IGMM.Parent = 'Y'     
                                            AND IGMM.Active = 'Y' 
                           WHERE  --IOG.attgroupid = @ID     
                                  --AND 
								  IOG.OrgID = @pOrgID
							    
                           UNION ALL     
                           SELECT GRPDET.ParentOrgGroupID              AS     
                                  ParentAttGroupID,     
                                  GRPDET.ParentOrgGroupID              AS     
                                  ParentOrgGroupID,     
                                  Cast(IGMM.InvestigationID AS BIGINT) AS     
           ChildGroupID    
                           FROM   GRPDET     
                                  INNER JOIN InvGroupMapMaster IGMM with(nolock)     
                                          ON GRPDET.ChildGroupID = IGMM.GroupID     
                                             AND IGMM.Parent = 'Y'     
                                             AND IGMM.Active = 'Y'
											 WHERE ParentAttGroupID < 500) --maximum recursion level  
							
            
	
			      INSERT #Temp_Result    
                         ( 
							InvestigationID,  
							TestCode, 
							Testname, 	
							Type,    --(INV,GRP, PKG)  
							Gender, 
							InvestigationName,   
							INVTestCode,
							INV_InvestigationName,  
							SampleCode,
							SampleName,    
							SampleContainerID,     
							ContainerName,    
							SampleContainerColor,  	    
							DepartmentID,
							DeparmentName, 
							Status,
							OrgID)      
                  SELECT DISTINCT 
                                  IOG.AttGroupID AS InvestigationID,
								  IOG.TestCode,
								  IOG.DisplayText as Testname , 
                                  'GRP'  AS      TestType     
                                  ,IOG.Gender,
								  IOM.Displaytext as InvestigationName, 
								 IM.TestCode,
							IM.InvestigationName, 
								   ISM.SampleCode AS  SampleID ,
								   ISM.SampleDesc AS SampleName,
                                  ISC.SampleContainerID,     
                                  ISC.ContainerName,
								  ISC.ContainerColor as [SampleContainerColor],    
                            IOM.DeptID DepartmentID,              
							IDM.DeptName DeparmentName,   
							
						IOG.Status,
                       @pOrgid AS[OrgID]     
                  FROM   (SELECT ParentOrgGroupID,     
                                 ChildGroupID     
                          FROM   GRPDET
                          WHERE  ChildGroupID IS NOT NULL     
                          UNION     
                          SELECT ParentOrgGroupID,     
                                 ParentOrgGroupID AS ChildGroupID     
                          FROM  GRPDET) TP      
                         INNER JOIN #TempGRPPaging IOG (nolock)     
                                 ON TP.ParentOrgGroupID = IOG.OrgGroupID     
						INNER JOIN InvGroupMapMaster IGMM (nolock)     
                                 ON TP.ChildGroupID = IGMM.GroupID     
                                    AND IGMM.Parent = 'N'     
                                    AND IGMM.Active = 'Y' 
									inner join InvestigationMaster IM on IM.InvestigationID  = IGMM.InvestigationID 
                         INNER JOIN InvestigationOrgMapping IOM (nolock)     
                                 ON IGMM.InvestigationID = IOM.InvestigationID     
                                    AND IOM.OrgID = IOG.OrgId    
						 inner join InvDeptMaster IDM on IDM.DeptID=IOM.DeptID  and  IDM.LangCode='en-GB'
						 AND IDM.OrgId=IOM.OrgId
                         left JOIN InvSampleMaster ISM (nolock)     
                                 ON IOM.SampleCode = ISM.SampleCode     
                                    AND ISM.OrgID = IOG.OrgId AND ISM.LangCode ='en-GB'    
                         left JOIN InvestigationSampleContainer ISC (nolock)     
                                 ON IOM.SampleContainerID =ISC.SampleContainerID     
                                    AND ISC.OrgID = IOG.OrgID AND ISC.LangCode ='en-GB'  
									OPTION (MAXRECURSION 0) --- maximum recursion level

 update TR set TR.GRPPrice=IRC.Rate 
from #Temp_Result TR 
inner join InvGroupMaster IGM ON  IGM.GroupID=TR.InvestigationID
inner join InvOrgGroup IOG  ON IOG.AttGroupID=IGM.GroupID  and IOG.Orgid=TR.OrgID
INNER JOIN InvRateMaster  IRC ON IRC.ID=IOG.OrgGroupID AND IRC.Type='GRP'
INNER JOIN RateMaster R (NOLOCK) ON R.OrgID=TR.OrgID AND R.RateCode='GENERAL'  AND IRC.RateID=R.RateID


 
END

 IF (@pType = 'PKG' )    
BEGIN    

SELECT @TotalRecords = COUNT(1) 
           FROM   InvOrgGroup IOG WITH (NOLOCK)
                   LEFT JOIN InvGroupMaster IGM WITH (NOLOCK)
                          ON IGM.GroupID = IOG.AttGroupID
            WHERE  IGM.Type = 'PKG'
                   AND (IGM.TestCode=@TestCode OR @TestCode='')
                   AND IOG.OrgID = @pOrgID
            


IF EXISTS(SELECT 1
                FROM   CodingSchemeOrgMapping
                WHERE  OrgID = @pOrgID)
        BEGIN
          
		   INSERT INTO #TempPKGPaging(DisplayText,AttGroupID,OrgGroupID,TestCode,Type,OrgID,Status,Gender)
            SELECT Isnull(IOG.DisplayText, IGM.GroupName) AS DisplayText,
			IOG.AttGroupID,
                   IOG.OrgGroupID                         AS OrgGroupID,
             CM.CodeName                            AS packagecode,
			 'PKG',
			 IOG.OrgId,
		     case when ISNULL(IOG.Status,'N') = 'Y' then 'Active' else 'Inactive' end AS Status,
		  IOG.GENDER
            FROM InvOrgGroup IOG WITH (NOLOCK)
               LEFT JOIN InvGroupMaster IGM WITH (NOLOCK)
                          ON IGM.GroupID = IOG.AttGroupID
                   LEFT JOIN CodeMapper CMP WITH (NOLOCK)
                          ON CMP.IdentifyingID = IOG.OrgGroupID
                             AND CMP.IdentifyingType = 'PKG'
                   INNER JOIN CodeMaster CM WITH (NOLOCK)
                           ON CM.CodeMasterID = CMP.CodeMasterID
                              AND CM.CodeType = 'PKG'
                   INNER JOIN CodingSchemeMaster CSM WITH (NOLOCK)
                           ON CM.CodeSchemeID = CSM.CodeTypeID
                   INNER JOIN CodingSchemeOrgMapping CSOM WITH (NOLOCK)
                           ON CSOM.CodeTypeID = CSM.CodeTypeID
                              AND CSOM.OrgID = IOG.OrgID
            WHERE  CSOM.IsPrimary = 'Y'
                   AND IGM.Type = 'PKG'
                   AND (CM.CodeName=@TestCode OR @TestCode='')
                   AND IOG.OrgID = @pOrgID
            ORDER  BY OrgGroupID
			 OFFSET (@Page -1) * @Size ROWS
      FETCH NEXT @Size ROWS ONLY    

        END
      ELSE
        BEGIN
  
           
		   INSERT INTO #TempPKGPaging(DisplayText,AttGroupID,OrgGroupID,TestCode,Type,OrgID,Status,Gender)
            SELECT Isnull(IOG.DisplayText, IGM.GroupName) AS DisplayText,
			IOG.AttGroupID,
                   IOG.OrgGroupID                         AS OrgGroupID,
				   IGM.TestCode,
				   'PKG',
				   IOG.ORGID,
                   case when ISNULL(IOG.Status,'N') = 'Y' then 'Active' else 'Inactive' end AS Status,
                   IOG.Gender                             AS Gender
            FROM   InvOrgGroup IOG WITH (NOLOCK)
                   LEFT JOIN InvGroupMaster IGM WITH (NOLOCK)
                          ON IGM.GroupID = IOG.AttGroupID
            WHERE  IGM.Type = 'PKG'
                   AND (IGM.TestCode=@TestCode OR @TestCode='')
                   AND IOG.OrgID = @pOrgID
            ORDER  BY OrgGroupID
			 OFFSET (@Page -1) * @Size ROWS
      FETCH NEXT @Size ROWS ONLY      
        END
	

  	
	;


                  WITH pkgdet     
                       AS (
SELECT Cast(GRP.AttGroupID AS BIGINT) AS     
                                  ParentAttGroupID,     
                                  Cast(GRP.OrgGroupID AS BIGINT) AS     
                                  ParentOrgGroupID,     
                                  PM.ID                          AS ChildGroupID     
                           FROM   #TempPKGPaging GRP (nolock)     
                                  LEFT JOIN InvPackageMapping PM (nolock)     
                                         ON GRP.OrgGroupID = PM.PackageID     
                                            AND PM.Type = 'GRP'     
                                            AND Isnull(PM.Active, 'A') IN( 'A',     
              'Y' )     
                           WHERE  --GRP.AttGroupID = @ID     
     --AND 
								  GRP.OrgID = @pOrgID     
								   UNION ALL     
                           SELECT PKGDET.ParentOrgGroupID              AS     
                                  ParentAttGroupID,     
                                  PKGDET.ParentOrgGroupID              AS     
                                  ParentOrgGroupID,     
                                  Cast(IGMM.InvestigationID AS BIGINT) AS     
                ChildGroupID     
                          FROM  PKGDET  
                                  INNER JOIN InvGroupMapMaster IGMM (nolock)     
                                          ON PKGDET.ChildGroupID = IGMM.GroupID     
                                             AND IGMM.Parent = 'Y'     
                                             AND Isnull(IGMM.Active, 'Y') = 'Y'
											 WHERE ParentAttGroupID < 500) --maximum recursion level
 								
				INSERT #Temp_Result     
                         ( 
							InvestigationID,     
							TestCode, 
							Testname, 	
							Type,    --(INV,GRP, PKG)  
							Gender, 
							InvestigationName, 
							InvInvestigationID,    
							INVTestCode,
							INV_InvestigationName,    
							SampleCode,
							SampleName,    
							SampleContainerID,     
							ContainerName,    
							SampleContainerColor,  	    
							DepartmentID,
							DeparmentName, 
							Status,
							OrgID
							)     
						SELECT DISTINCT 
                             IOG.AttGroupID,IOG.TestCode,
							IOG.DisplayText,   
                             IOG.Type,
							IOG.Gender ,
                            IOM.DisplayText,
							IOM.InvestigationID,
							IOM.InvestigationCode,
							IOM.DisplayText,
							ISM.SampleCode, 
                            ISM.SampleDesc,  
							ISC.SampleContainerID,     
                            Isnull(ISC.ContainerName, ''),
							ISC.ContainerColor,
                            IOM.DeptID DepartmentID,          
							IDM.DeptName DeparmentName,   						
						IOG.Status,
                        IOG.OrgId
                  FROM   PKGDET   
                         INNER JOIN #TempPKGPaging IOG (nolock)     
                                 ON PKGDET.ParentOrgGroupID =IOG.OrgGroupID     
                         INNER JOIN InvGroupMapMaster IGMM (nolock)     
                                 ON PKGDET.ChildGroupID = IGMM.GroupID     
                                    AND IGMM.Parent = 'N'     
                                    AND IGMM.Active = 'Y'     
                         INNER JOIN InvestigationOrgMapping IOM (nolock)     
                                 ON IGMM.InvestigationID = IOM.InvestigationID     
                                    AND IOM.Orgid = IOG.OrgID
						inner join InvDeptMaster IDM on IDM.DeptID=IOM.DeptID    and  IDM.LangCode='en-GB'
						AND IDM.OrgId=IOM.OrgId
                         left JOIN InvSampleMaster ISM (nolock)     
                                 ON IOM.SampleCode = ISM.SampleCode     
                                    AND ISM.OrgID = IOG.OrgId  AND ISM.LangCode='en-GB'    
                         left JOIN InvestigationSampleContainer ISC (nolock)     
                                 ON IOM.SampleContainerID = ISC.SampleContainerID     
                                    AND ISC.OrgID = IOG.OrgID  AND ISC.LangCode='en-GB'   
			UNION
			
			SELECT DISTINCT 
                             IOG.AttGroupID,IOG.TestCode,
							IOG.DisplayText,   
                             IOG.Type,
							IOG.Gender ,
                            IOM.DisplayText,
							IOM.InvestigationID,
								IOM.InvestigationCode,
                            IOM.DisplayText,
							ISM.SampleCode, 
                            ISM.SampleDesc,  
							ISC.SampleContainerID,     
                            Isnull(ISC.ContainerName, ''),
							ISC.ContainerColor,
                  IOM.DeptID DepartmentID,          
							IDM.DeptName DeparmentName,   						
						IOG.Status,
                        IOG.OrgId
			FROM #TempPKGPaging IOG (NOLOCK)
			INNER JOIN InvPackageMapping IPM(NOLOCK) ON IOG.OrgGroupID = IPM.PackageID
				AND IPM.Type = 'INV'
				AND Isnull(IPM.Active, 'A') IN (
					'A'
					,'Y'
					)
			INNER JOIN InvestigationOrgMapping IOM (NOLOCK) ON IPM.ID = IOM.InvestigationID
				 AND IOM.OrgID = IOG.OrgId    
				inner join InvDeptMaster IDM on IDM.DeptID=IOM.DeptID    and  IDM.LangCode='en-GB'
				AND IDM.OrgId=IOM.OrgId
			INNER JOIN InvSampleMaster ISM (NOLOCK) ON IOM.SampleCode = ISM.SampleCode
    AND ISM.OrgID = IOG.OrgID  AND ISM.LangCode='en-GB'
			INNER JOIN InvestigationSampleContainer ISC(NOLOCK) ON IOM.SampleContainerID = ISC.SampleContainerID and ISC.LangCode='en-GB'
				AND ISC.OrgID = IOG.OrgId    
			WHERE-- IOG.AttGroupID = @ID
				--AND 
				IOG.OrgID = @pOrgID
                OPTION (MAXRECURSION 0) --- maximum recursion level


	 
	 
	 
	 
	 
	  
												
 update TR set TR.PKGPrice=IRC.Rate 
from #Temp_Result TR 
inner join InvGroupMaster IGM ON  IGM.GroupID=TR.InvestigationID
inner join InvOrgGroup IOG  ON IOG.AttGroupID=IGM.GroupID  and IOG.Orgid=TR.OrgID 
INNER JOIN InvRateMaster  IRC ON IRC.ID=IOG.OrgGroupID AND IRC.Type='PKG'
INNER JOIN RateMaster R (NOLOCK) ON R.OrgID=TR.OrgID AND R.RateCode='GENERAL'  AND IRC.RateID=R.RateID
END


    SELECT distinct
             InvestigationID As [InvestigationID],    
			 TestCode, 
			 Testname TestName, 
			 Type          AS [Type], 
			 ISNULL(Gender,'') As [Gender],
			 ISNULL(InvestigationName,'') As [InvestigationName], 
			 ISNULL(InvInvestigationID,'') As InvInvestigationID,  
			 ISNULL(INVTestcode,'') As [INVTestCode],   
			 ISNULL(INV_InvestigationName,'') As [INVInvestigationName],  
             CAST(SampleCode AS INT) As [SampleID],       
             SampleName,
			 SampleContainerID As [ContainerID],     
			 ContainerName,    							
			 ISNULL([SampleContainerColor],'White') As [SampleContainerColour],    
			 ISNULL(Price,0.00) As [Price], 
			  ISNULL(GRPPrice,0.00) As [GRPPrice],
			   ISNULL(PKGPrice,0.00) As [PKGPrice],
			 DepartmentID,
			 DeparmentName As DepartmentName,  
			 OrgID   As [orgID],
			 Status  
      FROM   #Temp_Result
     ORDER BY TestCode
	 SELECT @TotalRecords as TotalRecords, cast(CEILING(CAST(@TotalRecords AS DECIMAL) / @Size) as Int) as TotalPages,
	 @MaxRecordCount as AllowableRecordCount
END

