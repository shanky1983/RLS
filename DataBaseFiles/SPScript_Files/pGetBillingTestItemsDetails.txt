 
/****** Object:  StoredProcedure [dbo].[pGetBillingTestItemsDetails]    Script Date: 2/12/2019 2:10:25 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[pGetBillingTestItemsDetails] @pOrgID             [INT],    
    
                                                 @pFeeID             [INT],    
    
                                                 @pFeeType           [nvarchar](20),    
    
                                                 @pDescription       [nvarchar](100),    
    
                                                 @pClientID          [BIGINT],    
    
                                                 @pVisitID           [BIGINT],    
    
                                                 @pRemarks           [nvarchar](255),    
    
                                                 @pIsCollected       nchar(1),    
    
                                                 @pCollectedDatetime DATETIME,    
    
                                                 @PlocationName      nvarchar(255),    
    
                                                 @ContextInfo        [UDT_CONTEXT] READONLY    
    
--WITH EXECUTE AS OWNER                                                                                                                                      
    
AS    
    
  BEGIN    
    
      SET nocount ON    
    --changes by arun if client not having any Baserate Ratecard then the alert should be changed
    DECLARE @ActualClientID BIGINT = @pClientID
            
      IF( @pClientID = 0 )    
    
        SELECT @pClientID = ClientID    
    
        FROM   ClientMaster WITH(NOLOCK)    
    
        WHERE  ClientCode = 'GENERAL'    
    
               AND OrgID = @pOrgID    
    
    
    
      DECLARE @configKeyID INT    
    
      DECLARE @ConfigValue nvarchar(50)    
    
    
    
      SELECT @configKeyID = ConfigKeyID    
    
      FROM   ConfigKeyMaster WITH(NOLOCK)    
    
      WHERE  ConfigKey = 'TAT'    
    
    
    
      SELECT @ConfigValue = ConfigValue    
    
      FROM   ConfigOrgMaster WITH(NOLOCK)    
    
      WHERE  ConfigKeyID = @configKeyID    
    
             AND OrgID = @pOrgID    
    
    
    
      DECLARE @CurdateTime DATETIME    
    
    
    
      SELECT @CurdateTime = (SELECT dbo.Fn_getserverdate(@ContextInfo))    
    
    
    
      DECLARE @LocationID BIGINT    
    
    
    
      SELECT @LocationID = LocationID    
    
      FROM   @ContextInfo    
    
    
    
   DECLARE @ProcessingAddressID Bigint,@ProcessingLocation nvarchar(50)    
    
       SELECT @ProcessingAddressID = ProcessingAddressID FROM OrganizationAddress WHERE AddressId = @LocationID    
    
       SELECT @ProcessingLocation = Location from OrganizationAddress (NOLOCK) where AddressId = @ProcessingAddressID    
    
    
    
      DECLARE @tblRates TABLE    
    
        (    
    
           RowNumber         INT IDENTITY(1, 1),    
    
           ID                BIGINT,    
    
           [DescriptionName] nvarchar(255),    
    
           [FeeType]         nvarchar(255),    
    
           [Amount]          DECIMAL(18, 2),    
    
           ProcedureName     nvarchar(max),    
    
           PriorityID        INT,    
    
           RateRefID         BIGINT,    
    
           ParentRateRefID   BIGINT,    
    
           RateID            BIGINT,    
    
           ActualAmount      DECIMAL(18, 2),    
    
           IsDiscountable    nchar(1) DEFAULT 'Y',    
    
           IsTaxable         nchar(1) DEFAULT 'Y',    
    
           IsRepeatable      nchar(1) DEFAULT 'N',    
    
           IsSTAT            nchar(1) DEFAULT 'N',    
    
           IsSMS             nchar(1) DEFAULT 'N',    
    
           IsNABL            nchar(1) DEFAULT 'N',    
    
           BillingItemRateID INT DEFAULT 0,    
    
           CategoryCode      NVARCHAR(200),    
    
           HasHistory        nchar(1) DEFAULT 'N',    
    
           ProcessingLoc     nvarchar(1000) DEFAULT '--',    
    
           TcodeName         nvarchar(50),    
    
           IsMandatory       nchar(1) DEFAULT 'N',    
    
           MaxDiscount       DECIMAL(18, 2) DEFAULT 0.00,    
    
           IsNormalRateCard  nvarchar(3),    
    
           IsRedeem          nvarchar(1),    
    
           RedeemAmount      DECIMAL(18, 2) DEFAULT 0.00  ,      
               isunmapped        nchar(1) DEFAULT 'N'    
    
,validfrom datetime    
,validto datetime,   
ValidtoDate datetime, 
IsSpecialTest char(1),    
Ishtml char(1),    
TemplateID BIGINT,    
IsTemplateText nvarchar(max)   ,
IsEnableTestHistory char(1) ,
IsMandatoryHis BIT DEFAULT 0
)    
    
      DECLARE @ActualAmount DECIMAL(18, 2) = 0    
    
      DECLARE @BaseRateID BIGINT    
    
	  --changes by arun if client not having any Baserate Ratecard then the alert should be changed
	  DECLARE @IsBaseRateAvail VARCHAR(10), @IsAvail INT =0,@ConfigId INT=0,@AlrtBaseRateNotMappngConfig VARCHAR(10) 
	  SET @ConfigId = (SELECT ConfigKeyID from  ConfigKeyMaster where ConfigKey = 'AlrtBaseRateNotMappng')
	  SET @AlrtBaseRateNotMappngConfig = (SELECT ConfigValue FROM ConfigOrgMaster WHERE ConfigKeyID = @ConfigId AND OrgID = @pOrgID)
	  SET @IsAvail = (SELECT 1 FROM InvClientMaster  where orgid = @pOrgID and clientid = @pClientID and BaseRate ='Y')   
	  SET @IsBaseRateAvail = (SELECT CASE WHEN ISNULL(@IsAvail,0) > 0 THEN 'Y' Else 'N' END)
	  ---for general client this restriction is not applicable
	  IF EXISTS (SELECT 1 FROM clientmaster where orgid = @pOrgID and Clientid = @pClientID  and clientcode = 'general')
	  BEGIN
			SET @IsBaseRateAvail = 'Y'
	  END
	  --
	
      DECLARE @pClientPolicyID INT    
    
      DECLARE @pRatePolicyID INT    
    
 DECLARE @time TIME --Added J    
 DECLARE @validToTime TIME --Added J    
      DECLARE @AppliedRateID INT    
    
      DECLARE @DiscountPolicyID INT    
    
      DECLARE @DiscountCategoryCode nvarchar(25)    
    
      DECLARE @tblDiscountPolicyDetails AS TABLE    
    
        (    
    
           PolicyID           BIGINT,    
    
           PolicyName         nvarchar(100),    
    
           FeeType            nvarchar(100),    
    
           CategoryCode       nvarchar(20),    
    
           DiscountPercentage DECIMAL(18, 2),    
    
           DiscountType       nvarchar(10)    
    
        )    
    
      DECLARE @CodeTypeID INT    
   DECLARE @chkFeeType nvarchar(20)    
   set @chkFeeType=(case when(@pFeeType='INV') then 'investigations' else @pFeeType end)    
    
 SELECT @time= cast(@CurdateTime AS TIME)--Added J    
    
     
      SELECT @CodeTypeID = Max(CSM.CodeTypeID)    
    
      FROM   CodingSchemeMaster CSM WITH(NOLOCK)    
    
             INNER JOIN CodingSchemeOrgMapping CSOM WITH(NOLOCK)    
    
                     ON CSOM.CodeTypeID = CSM.CodeTypeID    
    
      WHERE  VersionNo = 1    
    
             AND IsPrimary = 'Y'    
    
             AND OrgID = @pOrgID    
    
    
    
      INSERT @tblRates    
    
             (ID,    
    
              DescriptionName,    
    
              FeeType,    
    
              PriorityID,    
    
              ParentRateRefID,    
    
              RateRefID,    
    
              RateID,    
    
              TcodeName,    
    
  IsNormalRateCard,    
    
  validto  ,ValidtoDate  
  )    
      SELECT @pFeeID,    
    
             @pDescription,    
    
             @pFeeType,    
    
             ICM.Priority,    
    
             R.ParentID,    
    
             R.RateRefID,    
    
             R.RateID,    
    
             (SELECT TOP 1 Cm.CodeName    
    
              FROM   CodeMaster Cm WITH(NOLOCK)    
    
                     INNER JOIN CodeMapper Cmap WITH(NOLOCK)    
    
                             ON Cm.CodeMasterID = Cmap.CodeMasterID    
    
                                AND Cmap.IdentifyingID = @pFeeID    
    
                                AND Cm.CodeType = Cmap.IdentifyingType    
    
              WHERE  CMAP.IdentifyingType = @chkFeeType   and CMAP.IdentifyingType ='Investigations'  
   -- WHERE  CMAP.IdentifyingType = @pFeeType    
                     AND Cm.CodeSchemeID = @CodeTypeID    
      union    
    
      SELECT TOP 1 Cm.CodeName    
              FROM   CodeMaster Cm WITH(NOLOCK)    
                     INNER JOIN CodeMapper Cmap WITH(NOLOCK)    
                             ON Cm.CodeMasterID = Cmap.CodeMasterID    
    
    INNER JOIN InvOrgGroup IOG  WITH(NOLOCK)    
      ON Cmap.IdentifyingID=IOG.OrgGroupID AND IOG.OrgID=@pOrgID    
      INNER JOIN InvGroupMaster IGM WITH(NOLOCK) ON    
      IOG.AttGroupID=IGM.GroupID AND IGM.Type=@chkFeeType    
                                    
              WHERE IGM.GroupID=@pFeeID AND CMAP.IdentifyingType = @chkFeeType    
   -- WHERE  CMAP.IdentifyingType = @pFeeType    
                     AND Cm.CodeSchemeID = @CodeTypeID AND IOG.OrgID=@pOrgID    
          
          
          
      ),    
             CASE Isnull(RM.type, 'Normal')    
    
               WHEN 'Normal' THEN 'Y'    
    
               ELSE 'N'    
    
   END AS IsNormalRateCard,icm.ValidToTime  ,ICM.Validto   
    
      FROM   InvClientMaster ICM WITH(NOLOCK)    
    
             INNER JOIN RateRefOrgMapping R WITH(NOLOCK)    
    
                     ON R.RateID = ICM.RateID    
    
                        AND ICM.OrgID = @pOrgID    
    
             INNER JOIN RateMaster RM WITH(NOLOCK)    
    
                     ON RM.RateId = ICM.RateId    
    
                        AND ICM.OrgID = RM.orgid    
    
      WHERE  ICM.ClientID = @pClientID    
    
             AND R.OrgID = @pOrgID    
    
             AND ValidFrom <= @CurdateTime    
    
             AND ValidTo + ' 23:59:59' >= @CurdateTime    
    
	DECLARE @ValidToDate DATETIME
	SELECT @ValidToDate = ValidtoDate FROM @tblRates
    
     
  SELECT @validToTime = cast(validto AS TIME) FROM @tblRates --Added J    

IF @ValidToDate  <= @CurdateTime 
 BEGIN
  IF @validToTime != '00:00:00.0000000' and @validToTime !=''    
  BEGIN    
  DELETE FROM @tblRates WHERE cast(validto AS TIME) < @time    
  END    
 END 
     
      IF @pFeeType = 'INV'    
    
        BEGIN    
    
            UPDATE T    
    
            SET    T.Amount = R.Rate,    
    
                   T.BillingItemRateID = R.RateID  ,      
        t.isunmapped = isnull(R.isactive,'Y')        
            FROM   @tblRates T    
    
                   INNER JOIN InvRateMaster R WITH(NOLOCK)    
    
                           ON T.ParentRateRefID = R.RateRefID    
    
                              AND T.RateID = R.RateID    
    
                              AND t.ID = R.ID    
    
                              AND R.Type = @pFeeType    
    
            WHERE  R.ID = @pFeeID    
    
    
    
            UPDATE T    
    
            SET    T.Amount = R.Rate,    
    
                   T.BillingItemRateID = R.RateID ,       
                   t.isunmapped = isnull(R.isactive,'Y')        
            FROM   @tblRates T    
    
                   INNER JOIN InvRateMaster R WITH(NOLOCK)    
    
                           ON T.RateRefID = R.RateRefID    
    
                              AND T.RateID = R.RateID    
    
                              AND T.ID = R.ID    
    
                              AND R.Type = @pFeeType    
    
            WHERE  R.ID = @pFeeID    
    
    
    
   --added by sudhakar    
    
    UPDATE T    
    
            SET   T.MaxDiscount = Isnull(IOM.MaxDiscount, '0'),    
    
                   T.IsRedeem = IOM.IsRedeem,    
    
                   T.RedeemAmount = Isnull(IOM.RedeemAmount, 0)  ,
				   T.IsEnableTestHistory= ISNULL (IOM.EnableHistory,'N') , 
                  T.IsMandatoryHis= ISNULL (IOM.IsMandatoryHis,0)  
            FROM   @tblRates T    
    
                   INNER JOIN InvestigationOrgMapping IOM WITH(NOLOCK)    
    
                           ON T.ID = IOM.InvestigationID     
    
                       WHERE  IOM.OrgID = @pOrgID    
    
    
    
     
    
    UPDATE T    
    
             SET   T.Ishtml = 'Y'    
             FROM   @tblRates T inner join QuestionaryTemplateOrgMap QTOM    
    on QTOM.ID=t.ID     
             inner join QuestionaryTemplateMaster QTM     
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID    
    
             update T    
    set T.TemplateID=QTOM.TemplateID    
    from @tblRates T inner join QuestionaryTemplateOrgMap QTOM    
    on QTOM.ID=t.ID     
             inner join QuestionaryTemplateMaster QTM     
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID    
    
    update T    
    set T.IsTemplateText=QTM.TemplateText    
    from @tblRates T inner join QuestionaryTemplateOrgMap QTOM    
    on QTOM.ID=T.ID     
             inner join QuestionaryTemplateMaster QTM     
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID    
    
     
       
   UPDATE T     
    
      SET T.ProcessingLoc = Location    
    
       FROM  @tblRates T    
    
                   INNER JOIN InvestigationOrgMapping IOM WITH(NOLOCK)    
    
                           ON T.ID = IOM.InvestigationID    
    
                   INNER JOIN InvestigationLocationMapping ILM WITH(NOLOCK)    
    
                          ON IOM.InvestigationID = ILM.InvestigationID    
    
                             AND IOM.OrgID = ILM.OrgID    
    
                             AND ILM.LocationID = @LocationID    
    
                             AND ILM.FeeType = @pFeeType    
    
                   INNER JOIN OrganizationAddress OA WITH(NOLOCK)    
    
                           ON OA.AddressID =ILM.ProcessingAddressID                                                                                                       
    
            WHERE  IOM.OrgID = @pOrgID    
    
    
    
   UPDATE T     
    
        SET T.ProcessingLoc =  ISNULL(@ProcessingLocation,'--')    
    
     FROM @tblRates T WHERE ISNULL(T.ProcessingLoc,'--')='--'    
    
    
    
            --UPDATE T    
    
            --SET    T.ProcessingLoc = Location,    
    
            --       T.MaxDiscount = Isnull(IOM.MaxDiscount, '0'),    
    
            --       T.IsRedeem = IOM.IsRedeem,    
    
            --       T.RedeemAmount = Isnull(IOM.RedeemAmount, 0)    
    
            --FROM   @tblRates T    
    
            --       INNER JOIN InvestigationOrgMapping IOM WITH(NOLOCK)    
    
            --               ON T.ID = IOM.InvestigationID    
    
            --       LEFT JOIN InvestigationLocationMapping ILM WITH(NOLOCK)    
    
            --              ON IOM.InvestigationID = ILM.InvestigationID    
    
            --                 AND IOM.OrgID = ILM.OrgID    
    
            --                 AND ILM.LocationID = @LocationID    
    
            --                 AND ILM.FeeType = @pFeeType    
    
            --       INNER JOIN OrganizationAddress OA WITH(NOLOCK)    
    
            --               ON OA.AddressID = Isnull(ILM.ProcessingAddressID, IOM.ProcessingAddressID) --AND OA.OrgID=IOM.OrgID                                                                                                         
    
            --WHERE  IOM.OrgID = @pOrgID    
    
    
    
            UPDATE T    
    
            SET    T.IsDiscountable = IOA.IsDiscountable,    
    
                   T.IsRepeatable = IOA.IsRepeatable,    
    
                   T.IsSTAT = IOA.IsSTAT,    
    
                   T.IsSMS = IOA.IsSMS,    
    
                   T.IsTaxable = IOA.IsServiceTax,    
    
                   T.IsNABL = IOA.IsNABL,    
    
                   T.CategoryCode = Isnull(IOA.Category, ''),    
    
                   T.HasHistory = IOA.HasHistory,    
    
       T.MaxDiscount = Isnull(IOM.MaxDiscount, '0'),    
    
                   T.IsRedeem = IOM.IsRedeem,    
    
                   T.RedeemAmount = Isnull(IOM.RedeemAmount, 0)  ,  
				   T.ISEnableTestHistory= ISnull ( EnableHistory,'N'),
                    T.IsMandatoryHis= ISNULL (IOM.IsMandatoryHis,0) 
             FROM   @tblRates T    
    
    
    
                   INNER JOIN InvestigationOrgMapping IOM WITH(NOLOCK)     
    
                           ON T.ID = IOM.InvestigationID      
    
                              AND T.FeeType = 'INV'     
    
                   INNER JOIN InvestigationOrgAttributes IOA WITH(NOLOCK)     
    
                           ON IOM.InvestigationID = IOA.InvestigationID  AND IOM.OrgID = IOA.OrgID     
    
            WHERE  IOM.OrgID = @pOrgID    
    
    
    
        END    
    
    
    
      IF @pFeeType = 'GRP'    
    
          OR @pFeeType = 'PKG'    
    
        BEGIN    
    
            UPDATE T    
    
            SET    T.Amount = IRM.Rate,    
    
                   T.BillingItemRateID = IRM.RateID,    
                   t.isunmapped = isnull(IRM.isactive,'Y'), --IRM.isactive ,        
                   T.MaxDiscount = Isnull(IOG.MaxDiscount, '0'),    
    
                   T.IsRedeem = IOG.IsRedeem,    
    
                   T.RedeemAmount = Isnull(IOG.RedeemAmount, 0)    ,
				   T.IsEnableTestHistory = ISNULL (IOG.EnableHistory, 'N'),
				    T.IsMandatoryHis= ISNULL (IOG.IsMandatoryHis,0) 
    
            FROM   @tblRates T    
    
                   INNER JOIN InvOrgGroup IOG WITH(NOLOCK)    
    
                           ON IOG.AttGroupID = T.ID    
    
                   INNER JOIN InvRateMaster IRM WITH(NOLOCK)    
    
                           ON IOG.OrgGroupID = IRM.ID    
    
                              AND T.ParentRateRefID = IRM.RateRefID    
    
                              AND T.RateID = IRM.RateID    
    
            WHERE  IRM.Type = @pFeeType    
    
                   AND IOG.OrgID = @pOrgID    
    
     
    
      IF(@pFeeType = 'GRP')    
    
   BEGIN    
    
            UPDATE T    
    
            SET    T.ProcessingLoc = OA.Location    
    
            FROM   @tblRates T    
    
                   INNER JOIN InvestigationLocationMapping ILM WITH (nolock)    
    
                           ON T.ID = ILM.InvestigationID    
    
                              AND ILM.OrgID = @pOrgID    
    
                              AND ILM.LocationID = @LocationID    
    
                              AND ILM.FeeType = @pFeeType    
    
                   INNER JOIN OrganizationAddress OA WITH(nolock)    
    
                           ON ILM.ProcessingOrgID = OA.OrgID    
    
                  AND ILM.ProcessingAddressID = OA.AddressID    
    
    
  UPDATE T                  
                  
             SET   T.Ishtml = 'Y'                  
             FROM   @tblRates T inner join QuestionaryTemplateOrgMap QTOM                  
    on QTOM.ID=t.ID                   
             inner join QuestionaryTemplateMaster QTM             
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID                  
                  
             update T                  
    set T.TemplateID=QTOM.TemplateID                  
    from @tblRates T inner join QuestionaryTemplateOrgMap QTOM                  
    on QTOM.ID=t.ID                   
             inner join QuestionaryTemplateMaster QTM                   
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID                  
                  
    update T                  
    set T.IsTemplateText=QTM.TemplateText                  
    from @tblRates T inner join QuestionaryTemplateOrgMap QTOM                  
    on QTOM.ID=T.ID                   
             inner join QuestionaryTemplateMaster QTM                   
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID           
                  
                  
                  
                               
                  
    UPDATE T                   
        SET T.ProcessingLoc =  @ProcessingLocation    
    
     FROM @tblRates T WHERE ISNULL(T.ProcessingLoc,'--')='--'    
    
    
    
  END     
    
       
    
 IF (@pFeeType ='PKG')    
    
 BEGIN    
    
      DECLARE @TblPackage AS TABLE    
    
   (    
    
    ID   BIGINT,    
    
    Type  nvarchar(50),    
    
    PackageID   INT,    
    
    LocationID    BIGINT ,    
    
    AttGroupID Bigint,    
    
    Location nvarchar(255)    
    
   )     
    
    
    
   INSERT @TblPackage     
    
   SELECT IPM.ID,    
    
        IPM.Type,    
    
        TM.ID,    
    
        0 as LocationID,    
    
        IPM.ID,    
    
        '' as Location    
    
        FROM InvPackageMapping IPM WITH(NOLOCK)    
    
        INNER JOIN InvOrgGroup IOG (NOLOCK) ON IPM.PackageId = IOG.OrgGroupID    
    
        INNER JOIN @tblRates TM on IOG.AttGroupID = TM.ID      
    
        WHERE IOG.OrgID =@pOrgID  and  IPM.active='A'     
    
    
    
    UPDATE  TM    
    
    SET TM.AttGroupID= IOG.AttGroupID    
    
    FROM @TblPackage TM     
    
    INNER JOIN InvOrgGroup IOG (NOLOCK) ON TM.ID = IOG.OrgGroupID and IOG.OrgID = @pOrgID    
    
    WHERE TM.Type = 'GRP'     
    
       
    
    
    
           UPDATE  TP    
    
     SET TP.LocationID = ILM.ProcessingAddressID    
    
     FROM @TblPackage TP    
    
     INNER JOIN InvestigationLocationMapping ILM (NOLOCK) ON ILM.InvestigationID = TP.AttGroupID and ILM.FeeType = TP.Type    
    
     Where ILM.OrgID =@pOrgID and ILM.LocationID = @LocationID    
    
    
    
     UPDATE TP SET TP.LocationID = @ProcessingAddressID     
    
     FROM  @TblPackage TP WHERE ISNULL(TP.LocationID,0)=0     
    
    
    
     UPDATE T SET T.Location=OA.Location FROM @TblPackage T    
    
     INNER JOIN OrganizationAddress OA ON OA.AddressID=T.LocationID    
    
        
    
     UPDATE t1 SET     
    
     t1.ProcessingLoc=    
    
     CASE WHEN (SELECT COUNT(DISTINCT t.LocationID) FROM @TblPackage t WHERE t.PackageID=t1.ID )>1 THEN 'Multiple' ELSE t2.Location END        
    
     FROM @tblRates t1     
    
     INNER JOIN @TblPackage t2 ON PackageID=t1.ID    
    
  UPDATE T                  
                  
             SET   T.Ishtml = 'Y'                  
             FROM   @tblRates T inner join QuestionaryTemplateOrgMap QTOM                  
    on QTOM.ID=t.ID                   
             inner join QuestionaryTemplateMaster QTM             
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID     
                  
             update T                  
    set T.TemplateID=QTOM.TemplateID                  
    from @tblRates T inner join QuestionaryTemplateOrgMap QTOM                  
    on QTOM.ID=t.ID                   
             inner join QuestionaryTemplateMaster QTM                   
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID                  
                  
    update T                  
    set T.IsTemplateText=QTM.TemplateText                  
    from @tblRates T inner join QuestionaryTemplateOrgMap QTOM                  
    on QTOM.ID=T.ID                   
             inner join QuestionaryTemplateMaster QTM                   
    on QTM.TemplateID=QTOM.TemplateID and  QTOM.OrgID = @pOrgID                  
          
    
    
    
 END      
    
    
    
            UPDATE T    
    
            SET    T.Amount = IRM.Rate,    
    
                   T.BillingItemRateID = IRM.RateID,    
                   t.isunmapped = isnull(IRM.isactive,'Y'),         
                   T.IsDiscountable = Isnull(IOG.isDiscountable, 'Y'),    
    
                   T.IsTaxable = Isnull(IOG.isServiceTaxable, 'Y'),    
    
                   T.MaxDiscount = Isnull(IOG.MaxDiscount, '0'),    
    
                   T.IsRedeem = IOG.IsRedeem,    
    
                   T.RedeemAmount = Isnull(IOG.RedeemAmount, 0),
				   
				   T.isSTAT = IOG.isSTAT ,     
				   T.ISEnableTestHistory = ISnull(IOG.Enablehistory,'N'),
				    T.IsMandatoryHis= ISNULL (IOG.IsMandatoryHis,0) 
    
            FROM   @tblRates T    
    
                   INNER JOIN InvOrgGroup IOG WITH(NOLOCK)    
    
                           ON IOG.AttGroupID = T.ID    
    
                   INNER JOIN InvRateMaster IRM WITH(NOLOCK)    
    
                           ON IOG.OrgGroupID = IRM.ID    
    
                              AND T.RateRefID = IRM.RateRefID    
    
                              AND T.RateID = IRM.RateID    
    
            WHERE  IRM.Type = @pFeeType    
    
                   AND IOG.OrgID = @pOrgID    
    
    
    
UPDATE T    
SET    T.HasHistory = IOG.HasHistory,T.IsSpecialTest=ISNULL(IOG.IsSpecialTest,'N')    
            FROM   @tblRates T    
    
                   INNER JOIN InvOrgGroup IOG WITH(NOLOCK)    
    
                           ON IOG.AttGroupID = T.ID    
    
            WHERE  IOG.OrgID = @pOrgID    
    
    
    
            UPDATE T    
    
            SET    T.CategoryCode = Isnull(IOG.SubCategory, '')    
    
            FROM   @tblRates T    
    
                   INNER JOIN InvOrgGroup IOG WITH (NOLOCK)    
    
                           ON IOG.AttGroupID = T.ID    
    
                              AND IOG.OrgID = @pOrgID    
    
        END    
    
    
    
      IF @pFeeType = 'GEN'    
    
        BEGIN    
    
            UPDATE T    
    
            SET    T.Amount = R.Rate,    
    
                   T.BillingItemRateID = R.RateID  ,      
                   t.isunmapped = isnull(R.isactive,'Y')      
            FROM   @tblRates T    
    
                   INNER JOIN GeneralBillingItems R WITH(NOLOCK)    
    
                           ON T.ParentRateRefID = R.RateRefID    
    
                              AND T.RateID = R.RateID    
    
                              AND t.ID = R.ItemID    
    
            WHERE  R.ItemID = @pFeeID    
    
    
    
            UPDATE T    
    
            SET    T.Amount = R.Rate,    
    
                   T.BillingItemRateID = R.RateID,    
    
                   T.IsTaxable = Isnull(GBM.IsTaxable, 'Y'),    
    
      T.IsDiscountable = Isnull(GBM.IsDiscountable, 'Y')  ,      
    
                   t.isunmapped = isnull(R.isactive,'Y')        
            FROM   @tblRates T    
    
                   INNER JOIN GeneralBillingItems R WITH(NOLOCK)    
    
                           ON T.RateRefID = R.RateRefID    
    
                              AND T.RateID = R.RateID    
    
                   INNER JOIN GeneralBillingMaster GBM    
    
                           ON GBM.GenBillID = R.GenBillID    
    
                              AND GBM.OrgID = @pOrgID    
    
                              AND t.ID = R.ItemID    
    
            WHERE  R.ItemID = @pFeeID        
        END    
    
    
    
      UPDATE T    
    
      SET    T.IsMandatory = 'Y'    
    
      FROM   @tblRates T    
    
             INNER JOIN InvMedicalDetailsMapping IMDM WITH(NOLOCK)    
    
                     ON IMDM.InvID = T.ID    
    
      WHERE  Isnull(T.HasHistory, 'N') = 'Y'    
    
             AND Isnull(IMDM.IsMandatory, 'N') = 'Y'    
    
    
    
      --base rate card applied for changes dony prem----------                                                                                                                                                  
    
      IF EXISTS (SELECT ClientID    
    
                 FROM   ClientMaster WITH(NOLOCK)    
    
                 WHERE  ClientID = @pClientID    
    
                        AND ClientCode = 'GENERAL')    
    
        BEGIN    
    
            SELECT @ActualAmount = Amount    
    
            FROM   @tblRates T    
    
                   INNER JOIN RateMaster R WITH(NOLOCK)    
    
                           ON R.RateId = T.RateID    
    
                   INNER JOIN RateRefOrgMapping ROM WITH(NOLOCK)    
    
                           ON R.RateId = ROM.RateID    
    
            WHERE  ROM.OrgID = @pOrgID    
    
                   AND R.RateName = 'GENERAL'    
    
        END    
    
      ELSE    
    
        BEGIN    
    
            IF EXISTS(SELECT RateId    
    
                      FROM   InvClientMaster WITH(NOLOCK)    
    
                      WHERE  ClientID = @pClientID    
    
                             AND Isnull(BaseRate, 'N') = 'Y')    
    
              BEGIN    
    
                  SELECT @ActualAmount = Amount,    
    
                         @BaseRateID = ICM.RateId    
    
                  FROM   @tblRates T    
    
                         INNER JOIN RateMaster R WITH(NOLOCK)    
    
                                 ON R.RateId = T.RateID    
    
                         INNER JOIN RateRefOrgMapping ROM WITH(NOLOCK)    
    
                                 ON R.RateId = ROM.RateID    
    
                         INNER JOIN InvClientMaster ICM WITH(NOLOCK)    
    
                                 ON ICM.RateId = T.RateID    
    
                         WHERE  ICM.ClientID = @pClientID    
    
       AND  ROM.OrgID = @pOrgID    
    
                         AND ICM.BaseRate = 'Y'    
    
                         AND Amount IS NOT NULL    
    
              END    
    
            ELSE    
    
              BEGIN    
    
                  SELECT @ActualAmount = Amount    
    
                  FROM   @tblRates T    
    
                         INNER JOIN RateMaster R WITH(NOLOCK)    
    
                                 ON R.RateId = T.RateID    
    
                         INNER JOIN RateRefOrgMapping ROM WITH(NOLOCK)    
    
                                 ON R.RateId = ROM.RateID    
    
                  WHERE  ROM.OrgID = @pOrgID    
    
                         AND R.RateName = 'GENERAL'    
    
              END    
    
        END    
    ----SELVA | START | 10122020 | FOR ActualAmount<Amount --Test rate Should not be greater than General rate
   IF (@ActualAmount=0.00)
   BEGIN
   SELECT @ActualAmount = Amount   
    
                  FROM   @tblRates T    
    
                         INNER JOIN RateMaster R WITH(NOLOCK)    
    
                                 ON R.RateId = T.RateID    
    
                         INNER JOIN RateRefOrgMapping ROM WITH(NOLOCK)    
    
                                 ON R.RateId = ROM.RateID    
    
                         INNER JOIN InvClientMaster ICM WITH(NOLOCK)    
    
                                 ON ICM.RateId = T.RateID    
    
                         WHERE  ICM.ClientID = @pClientID    
    
       AND  ROM.OrgID = @pOrgID    
    
                         AND Isnull(ICM.BaseRate,'N') = 'N'    
    
                         AND Amount IS NOT NULL
   END
----SELVA | END | 10122020    
      --base rate card applied for changes dony prem  end----------                                                               
    
      SELECT TOP 1 @AppliedRateID = BillingItemRateID    
    
      FROM   @tblRates    
    
      ORDER  BY PriorityID    
    
    
    
      SELECT @pRatePolicyID = Isnull(DiscountPolicyID, 0)    
    
      FROM   RateRefOrgMapping WITH(NOLOCK)    
    
      WHERE  RateID = @AppliedRateID    
    
             AND OrgID = @pOrgID    
    
    
    
      SELECT @pClientPolicyID = Isnull(DiscountPolicyID, 0)    
    
      FROM   ClientMaster WITH(NOLOCK)    
    
      WHERE  ClientID = @pClientID    
    
             AND OrgID = @pOrgID    
    
    
    
      -- Begin Added by Nallathambi SPL.Rate card should not apply Discount Policy                              
    
      DECLARE @PPriority INT    
    
    
    
      SELECT TOP 1 @PPriority = Priority    
    
      FROM   InvClientMaster WITH(NOLOCK)    
    
      WHERE  ClientID = @pClientID    
    
       AND RateId IN (SELECT R.RateID    
    
                  FROM   InvRateMaster R WITH(NOLOCK)    
    
                                   INNER JOIN @tblRates T    
    
                                           ON T.ID = R.ID    
    
                                              AND R.Type = @pFeeType)    
    
      ORDER  BY Priority    
    
    
    
      DECLARE @SPRate nvarchar(10)    
    
    
    
      SELECT @SPRate = Isnull(RM.Type, 'Normal')    
    
      FROM   InvClientMaster IVC WITH(NOLOCK)    
    
             INNER JOIN Ratemaster RM WITH(NOLOCK)    
    
                     ON IVC.Rateid = RM.Rateid    
    
      WHERE  IVC.ClientID = @pClientID    
    
             AND IVC.OrgID = @pOrgID    
    
             AND Priority = @PPriority    
    
    
    
      -- END                                                                              
    
      IF @pClientPolicyID > 0 --and  @SPRate!='SPECIAL'                                                      
    
        BEGIN    
    
            INSERT INTO @tblDiscountPolicyDetails    
    
            SELECT PM.PolicyID,    
    
                   PM.PolicyName,    
    
                   @pFeeType,    
    
                   DPM.CategoryCode,    
    
                   DPM.DiscountPercentage,    
    
                   DPM.DiscountType    
    
            FROM   DiscountPolicyMapping DPM WITH(NOLOCK)    
    
                   INNER JOIN PolicyMaster PM WITH(NOLOCK)    
    
                           ON DPM.PolicyID = PM.PolicyID    
    
            WHERE  PM.OrgID = @pOrgID    
    
                   AND DPM.FeeTypeCode = @pFeeType    
    
                   AND DPM.PolicyID = @pClientPolicyID    
    
        END    
    
      ELSE IF @pRatePolicyID > 0    
    
        BEGIN    
    
            INSERT INTO @tblDiscountPolicyDetails    
    
            SELECT PM.PolicyID,    
    
                   PM.PolicyName,    
    
                   @pFeeType,    
    
                   DPM.CategoryCode,    
    
                   DPM.DiscountPercentage,    
    
                   DPM.DiscountType    
    
            FROM   DiscountPolicyMapping DPM WITH(NOLOCK)    
    
                   INNER JOIN PolicyMaster PM WITH(NOLOCK)    
    
                           ON DPM.PolicyID = PM.PolicyID    
    
            WHERE  PM.OrgID = @pOrgID    
    
           AND DPM.FeeTypeCode = @pFeeType    
    
                   AND DPM.PolicyID = @pRatePolicyID    
    
        END    
    
    
    
      IF ( (SELECT Count(1)    
    
            FROM   @tblDiscountPolicyDetails) > 0 )    
    
        BEGIN    
    
            SELECT @DiscountPolicyID = TPD.PolicyID,    
    
                   @DiscountCategoryCode = TPD.CategoryCode    
    
            FROM   @tblDiscountPolicyDetails TPD    
    
                   INNER JOIN @tblRates T    
    
                           ON T.FeeType = TPD.FeeType    
    
                   INNER JOIN RateMaster RM WITH(NOLOCK)    
    
                           ON RM.RateId = T.RateID    
    
            WHERE  Isnull(T.CategoryCode, '') != ''    
    
                   AND Isnull(T.IsDiscountable, 'N') = 'Y'    
    
                   AND Isnull(RM.Type, 'Normal') != 'Special'    
    
    
    
            UPDATE T    
    
            SET    T.amount = CASE    
    
                                WHEN tDP.DiscountType = 'DIS' THEN ( T.Amount - ( T.Amount * tDP.DiscountPercentage / 100 ) )    
    
                                WHEN tDP.DiscountType = 'PRE' THEN ( T.Amount + ( T.Amount * tDP.DiscountPercentage / 100 ) )    
    
                                ELSE T.Amount    
    
                              END    
    
            FROM   @tblRates T    
    
                   INNER JOIN @tblDiscountPolicyDetails tDP    
    
                           ON T.FeeType = tdp.FeeType    
    
                   INNER JOIN RateMaster RM WITH(NOLOCK)    
    
                           ON RM.RateId = T.RateID    
    
            WHERE  Isnull(RM.Type, 'Normal') != 'Special'    
    
                   AND T.CategoryCode = tDP.CategoryCode    
    
                   AND T.FeeType = @pFeeType    
    
        END    
    
      ELSE    
    
        BEGIN    
    
            UPDATE @tblRates    
    
            SET    CategoryCode = ''    
    
        END    
    
    
    
      ----Config Based TAT report created by prem-------------                                                              
    
      DECLARE @TATDATE DateTime--nvarchar(20)    
    
      DECLARE @ReportDeliveryDATE DateTime---nvarchar(25)    
    
    
    
      SELECT @ReportDeliveryDATE = NULL    
    
    
    /*OLD TAT
      IF ( Isnull(@ConfigValue, 'N') = 'Y' )    
    
        BEGIN    
    
            EXEC dbo.Pgettatreportdetails 
			       
    
              @pOrgID,     
    
              @pFeeID,    
    
              @pFeeType,    
    
              @pDescription,    
    
              @pClientID,    
    
              @pIsCollected,    
    
              @pCollectedDatetime,    
    
              @ContextInfo,    
    
              @TATDATE OUTPUT,    
    
              @ReportDeliveryDATE output    
    
        END    
    
      ELSE    
    
        BEGIN    
    
            SELECT @TATDATE = NULL,    
    
                   @ReportDeliveryDATE = NULL    
    
        END    
    
   */
      ---------------END--------------------------------------------    
	  
	/* NEW TAT integration */
	
	
      --DECLARE @TATDATE DATETIME

      --DECLARE @ReportDeliveryDATE DATETIME

      DECLARE @p_TATCalculationDateTime DATETIME
      DECLARE @p_TATProcessDateTime DATETIME
      DECLARE @p_SampleReceiptDateTime DATETIME
      DECLARE @p_ProcessStartDateTime DATETIME
      DECLARE @p_ReportDateTime DATETIME
      DECLARE @p_TATDateTime DATETIME
      DECLARE @IsProcessing BIT = 0
      DECLARE @Tatprocessdatetype SMALLINT
      DECLARE @p_LogisticTimeasmins SMALLINT
      DECLARE @p_Processinghoursasmins INT --SMALLINT --Corrected by SYED
      DECLARE @p_LabendTime TIME
      DECLARE @p_EarlyReportTime TIME
      DECLARE @p_Isdebug BIT=0
      DECLARE @p_TATReferenceDateBase INT=0

      SELECT @Tatprocessdatetype = CASE
                                     WHEN ISNULL(Tatprocessdatetype, 0) = 0 THEN 2
                                     ELSE Tatprocessdatetype
                                   END
      FROM   clientmaster WITH(nolock)
      WHERE  clientid = @pClientID

      SELECT @ReportDeliveryDATE = NULL
	   
      IF ( Isnull(@ConfigValue, 'N') = 'Y' )
        BEGIN
            IF EXISTS (SELECT 1
                       FROM   dbo.ConfigKeyMaster ckm WITH (NOLOCK)
                              INNER JOIN dbo.ConfigOrgMaster com WITH (NOLOCK)
                                      ON com.ConfigKeyID = ckm.ConfigKeyID
                                         AND com.OrgID = @pOrgID
                       WHERE  ckm.ConfigKey = 'NewTATLogic'
                              AND com.ConfigValue = 'Y')
              BEGIN
				 
                  IF( @Tatprocessdatetype != 0
                     -- AND @Tatprocessdatetype != 1 
					  )
                    BEGIN
                        
                        IF( @Tatprocessdatetype = 2 )
                          BEGIN
                              SET @p_TATCalculationDateTime = Getdate()
                          END
                        ELSE
                          BEGIN
								IF( CAST (@pCollectedDatetime AS DATE) = '19000101' )
								BEGIN
									SET @p_TATCalculationDateTime = Getdate()
								END
								ELSE
								BEGIN
									SET @p_TATCalculationDateTime = @pCollectedDatetime
								END
							END 

                        DECLARE @p_OrgId INT = @pOrgID
                        DECLARE @p_TestId BIGINT = @pFeeID
                        DECLARE @p_TestType VARCHAR(5) = @pFeeType
                        DECLARE @p_ClientId BIGINT = @pClientID

						 
                        EXEC dbo.Pgettatreportdatetime
						@pOrgID,  
					  @pFeeID,    
					  @pFeeType,  
					  @pClientID,  
                          @p_TATCalculationDateTime,
                          @p_TATProcessDateTime OUTPUT,
                          @p_LogisticTimeasmins OUTPUT,
                          @p_SampleReceiptDateTime OUTPUT,
                          @p_Processinghoursasmins OUTPUT,
                          @p_ProcessStartDateTime OUTPUT,
                          @p_TATDateTime OUTPUT,
                          @p_LabendTime OUTPUT,
                          @p_EarlyReportTime OUTPUT,
                          @p_ReportDateTime OUTPUT,
                          @p_Isdebug,
                          @ContextInfo

                        SET @TATDATE = @p_TATDateTime
                        SET @ReportDeliveryDATE = @p_ReportDateTime
                    END
                  ELSE
                    BEGIN
                        SELECT @TATDATE = NULL,
                               @ReportDeliveryDATE = NULL,
                               @p_TATProcessDateTime = NULL,
                               @p_SampleReceiptDateTime = NULL,
                               @p_ProcessStartDateTime = NULL,
                               @p_LogisticTimeasmins = NULL,
                               @p_Processinghoursasmins = NULL,
                               @p_LabendTime = NULL,
                               @p_EarlyReportTime = NULL
                    END
              END
            ELSE
              BEGIN
                  EXEC dbo.Pgettatreportdetails
                    @pOrgID,
                    @pFeeID,
                    @pFeeType,
                    @pDescription,
                    @pClientID,
                    @pIsCollected,
                    @pCollectedDatetime,
                    @ContextInfo,
                    @TATDATE OUTPUT,
                    @ReportDeliveryDATE output

                  SELECT @p_TATProcessDateTime = NULL,
                         @p_SampleReceiptDateTime = NULL,
                         @p_ProcessStartDateTime = NULL,
                         @p_LogisticTimeasmins = NULL,
                         @p_Processinghoursasmins = NULL,
                         @p_LabendTime = NULL,
                         @p_EarlyReportTime = NULL
              END
        END
      ELSE
        BEGIN
            SELECT @TATDATE = NULL,
                   @ReportDeliveryDATE = NULL,
                   @p_TATProcessDateTime = NULL,
                   @p_SampleReceiptDateTime = NULL,
                   @p_ProcessStartDateTime = NULL,
                   @p_LogisticTimeasmins = NULL,
                   @p_Processinghoursasmins = NULL,
                   @p_LabendTime = NULL,
                   @p_EarlyReportTime = NULL
        END

		
  
	                                                                 
    DECLARE @configKeyIDClientBatch INT                  
                  
      DECLARE @ConfigValueClientBatch nvarchar(50)                  
                  
                  
                  
      SELECT @configKeyIDClientBatch = ConfigKeyID                  
                  
      FROM   ConfigKeyMaster WITH(NOLOCK)                  
                  
      WHERE  ConfigKey = 'PopupconfigorgidReport'                  
                  
                  
                  
      SELECT @ConfigValueClientBatch = ConfigValue                  
                  
      FROM   ConfigOrgMaster WITH(NOLOCK)                  
                  
      WHERE  ConfigKeyID = @configKeyIDClientBatch                  
                  
             AND OrgID = @pOrgID             
          
    if(@ConfigValueClientBatch ='Y')      
    Begin 
	 if exists (Select 1 from clientBatchMaster where Testnameid = @pFeeID and ClientId=@pClientID and TestType = @pFeeType )
	 Begin 
		 if not exists(select 1 from clientBatchMaster where Testnameid = @pFeeID and ClientId=@pClientID and TestType = @pFeeType and (Billingid -isnull(TestReducedCount,0))>0) 
		 Begin      
		  set @pDescription = @pDescription +'~'+'CountChk'      
		 ENd  
		 else if not exists(select 1 from clientBatchMaster where Testnameid = @pFeeID and ClientId=@pClientID and TestType = @pFeeType and getdate() between  Fromdate and Todate) 
		 Begin      
		  set @pDescription = @pDescription +'~'+'validityChk'      
		 ENd   
	 END   
    End           
                  
	-- VEL | Added for Display MRP Bill AMount | 24-May-19 ----

Declare @HideReportDateinBill char(1)='N'

	Set @HideReportDateinBill =(SELECT com.ConfigValue
                       FROM   dbo.ConfigKeyMaster ckm WITH (NOLOCK)
                              INNER JOIN dbo.ConfigOrgMaster com WITH (NOLOCK)
                                      ON com.ConfigKeyID = ckm.ConfigKeyID                                         
                       WHERE  ckm.ConfigKey = 'HideReportDateinBill' AND com.OrgID = @pOrgID)
if (@HideReportDateinBill ='Y')
Begin
Set @ReportDeliveryDATE=null
Set @TATDATE=null
End

	   DECLARE @DisplayMRPAmount char(1)='N'

	   IF EXISTS (select 1 from ClientAttributesDetails CAD
	   INNER JOIN ClientAttributes CA ON CAD.AttributesID=CA.AttributeID
	   WHERE ClientID=@pClientID AND CA.AttributeCode='MRPBILL')
	   BEGIN
	       SET @DisplayMRPAmount='Y'
	   END

	-- VEL | Added for Display MRP Bill AMount | 24-May-19 ----


      SELECT TOP 1 ID,    
    
                   @pDescription                                AS Descrip,    
    
                   @pFeeType                                        AS FeeType,    
    
                   Isnull(Amount, 0)                                Amount,    
    
                   Isnull(CONVERT(nvarchar, ID), '0') + '^'    
    
                   + @pDescription + '^' + @pFeeType + '^'    
    
                    --changes by arun if client not having any Baserate Ratecard then the alert should be changed
                    +CASE WHEN @ActualClientID > 0 AND ISNULL(@AlrtBaseRateNotMappngConfig,'') = 'Y' 
					THEN (CONVERT(nvarchar, Amount)+' '+ @IsBaseRateAvail ) ELSE CONVERT(nvarchar, Amount) END
				    + '^' + '' + '^' + '' + '^' + 'Y'    
    
                   + '^'    
    
                   + Isnull(CONVERT(VARCHAR(50), CONVERT(VARCHAR(50), @TATDATE, 100), 120), '') 
				   -- + Isnull(CONVERT(VARCHAR(50), CONVERT(varchar(50), @TATDATE, 100), 120), '')  
    
                   + '^' + CONVERT(nvarchar, @ActualAmount) + '^'    
    
                   + Isnull(IsDiscountable, '') + '^'    
    
                   + Isnull(IsTaxable, '') + '^'    
    
                   + Isnull(IsRepeatable, '') + '^'    
    
                   + Isnull(IsSTAT, '') + '^' + Isnull(IsSMS, '') + '^'    
    
                   + Isnull(IsNABL, '') + '^'    
    
                   + Isnull(CONVERT(nvarchar, BillingItemRateID), '0')    
    
                   + '^' + Isnull(HasHistory, 'N') + '^'    
    
                   + Isnull(ProcessingLoc, '--') + '^'    
    
                   + Isnull(T.TcodeName, '') + '^'    
    
                   + Isnull(CONVERT(nvarchar, @BaseRateID), '0')    
    
                   + '^'    
    
                   + Isnull(CONVERT(nvarchar, @DiscountPolicyID), '0')    
    
                   + '^' + Isnull(T.CategoryCode, '') + '^'    
    
                    +  	Isnull(CONVERT(VARCHAR(20), Format(CONVERT(DATETIME, @ReportDeliveryDATE, 120), 'dd-MM-yyyy hh:mm tt'), 120), '')    --+ Isnull(CONVERT(nvarchar(20), @ReportDeliveryDATE  ), '')    --@TATDATE
    
                   + '^'    
    
                   + Isnull(CONVERT(nvarchar(30), MaxDiscount), '')    
    
                   + '^' + 'Y' --+ Isnull(IsNormalRateCard, 'N') + '^'    
    
                   + '^' + Isnull(IsRedeem, '') + '^'    
    
                   + Isnull(CONVERT(nvarchar(30), RedeemAmount), ''
				   ) + '^' + @DisplayMRPAmount AS ProcedureName,    
    
					Isnull(T.IsMandatory, 'N')                       AS IsHistoryMandatory,    
					
					IsSpecialTest ,Ishtml,TemplateID,IsTemplateText ,
					 Isnull(CONVERT(VARCHAR(50), CONVERT(VARCHAR(50), @TATDATE, 100), 120), '') TATDATE,    
					Isnull(CONVERT(VARCHAR(20), Format(CONVERT(DATETIME, @ReportDeliveryDATE, 120), 'dd-MM-yyyy hh:mm tt'), 120), '') ReportDeliveryDate,
					Isnull(CONVERT(VARCHAR(3), @TATProcessDateType), '')                                                              TATProcessDateType,
                         Isnull(CONVERT(VARCHAR(20), CONVERT(DATETIME, @p_TATProcessDateTime, 100), 120), '')                              Tatreferencedatetime,
                         Isnull(CONVERT(VARCHAR(20), CONVERT(DATETIME, @p_SampleReceiptDateTime, 100), 120), '')                           Tatsamplereceiptdatetime,
                         Isnull(CONVERT(VARCHAR(20), CONVERT(DATETIME, @p_ProcessStartDateTime, 100), 120), '')                            Tatprocessstartdatetime,
                         Isnull(CONVERT(SMALLINT, @p_LogisticTimeasmins), 0)                                                               Logistictimeinmins,
                         Isnull(CONVERT(INT, @p_Processinghoursasmins), 0)                                                                 Processingtimeinmins,
                         Isnull(CONVERT(VARCHAR(20), CONVERT(TIME, @p_LabendTime)), '')                                                    Labendtime,
                         Isnull(CONVERT(VARCHAR(20), CONVERT(TIME, @p_EarlyReportTime)), '')                                      Earlyreporttime,
                         Isnull(CONVERT(INT, @Tatprocessdatetype), 0)                             Tatreferencedatebase,
						 Isnull ( IsenableTesthistory,'N') as IsEnableTestHistory,
						 ISNULL (IsMandatoryHis,0)  as IsMandatoryHis
						    
      FROM   @tblRates T    
    
      WHERE  Amount IS NOT NULL  and t.isunmapped='Y'      
    
      ORDER  BY PriorityID    
     

  -- SELECT IsDiscountable,IsTaxable,IsRepeatable FROM @tblRates                             
    
  END    
    
    
    
